!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.html	doc/html/navtreeindex0.js	/^".html":[0,0,0],$/;"	p	class:NAVTREEINDEX0
0	doc/html/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
0	doc/html/search/searchdata.js	/^  0: "_acdfghilprstvwxy",$/;"	p	class:indexSectionsWithContent
0	doc/html/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
1	doc/html/search/searchdata.js	/^  1: "Classes",$/;"	p	class:indexSectionLabels
1	doc/html/search/searchdata.js	/^  1: "_acdlprstv",$/;"	p	class:indexSectionsWithContent
1	doc/html/search/searchdata.js	/^  1: "classes",$/;"	p	class:indexSectionNames
2	doc/html/search/searchdata.js	/^  2: "Functions",$/;"	p	class:indexSectionLabels
2	doc/html/search/searchdata.js	/^  2: "acdfghiprstw",$/;"	p	class:indexSectionsWithContent
2	doc/html/search/searchdata.js	/^  2: "functions",$/;"	p	class:indexSectionNames
3	doc/html/search/searchdata.js	/^  3: "Variables"$/;"	p	class:indexSectionLabels
3	doc/html/search/searchdata.js	/^  3: "tvxy"$/;"	p	class:indexSectionsWithContent
3	doc/html/search/searchdata.js	/^  3: "variables"$/;"	p	class:indexSectionNames
ABTAINED_GOAL_STATE	logical_core/src/logical_core_node.cpp	/^    ABTAINED_GOAL_STATE,$/;"	e	enum:CarState	file:
ANLS_SCAN_H	vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	2;"	d
ANS_DEV_ERR	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^        ANS_DEV_ERR = -2,$/;"	e	enum:rp::hal::serial_rxtx::__anon7
ANS_OK	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^        ANS_OK      = 0,$/;"	e	enum:rp::hal::serial_rxtx::__anon7
ANS_TIMEOUT	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^        ANS_TIMEOUT = -1,$/;"	e	enum:rp::hal::serial_rxtx::__anon7
AbsPos	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^struct AbsPos$/;"	s
Activate	doc/html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
AutoDrive	logical_core/src/logical_core_node.cpp	/^enum AutoDrive$/;"	g	file:
AutoLocker	rplidar_ros/sdk/src/hal/locker.h	/^    AutoLocker(Locker &l): _binded(l)$/;"	f	class:rp::hal::AutoLocker
AutoLocker	rplidar_ros/sdk/src/hal/locker.h	/^class AutoLocker$/;"	c	namespace:rp::hal
BAUD_CONV	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	300;"	d	file:
BAUD_CONV	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	301;"	d	file:
BEGIN_STATIC_CODE	rplidar_ros/sdk/src/arch/win32/timer.cpp	/^BEGIN_STATIC_CODE(timer_cailb)$/;"	f	namespace:rp::arch
BEGIN_STATIC_CODE	rplidar_ros/sdk/src/hal/util.h	59;"	d
Brain	logical_core/src/logical_core_node.cpp	/^    Brain() : ac("move_base", true),drive_mode(PATROL_MODE),car_state(IDLE_STATE)$/;"	f	class:Brain
Brain	logical_core/src/logical_core_node.cpp	/^class Brain$/;"	c	file:
CLASS_THREAD	rplidar_ros/sdk/src/hal/thread.h	38;"	d
COMMREAD_H	serial_comm/include/comm_read.h	2;"	d
COMM_WRITE_H	serial_comm/include/comm_write.h	2;"	d
CarState	logical_core/src/logical_core_node.cpp	/^enum CarState$/;"	g	file:
CloseResultsWindow	doc/html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	doc/html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
CreateDriver	rplidar_ros/sdk/src/rplidar_driver.cpp	/^RPlidarDriver * RPlidarDriver::CreateDriver(_u32 drivertype)$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
CreateRxTx	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateRxTx	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^    serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateRxTx	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
DEFAULT_MOTOR_PWM	rplidar_ros/sdk/include/rplidar_cmd.h	77;"	d
DEFAULT_TIMEOUT	rplidar_ros/sdk/include/rplidar_driver.h	/^        DEFAULT_TIMEOUT = 2000, \/\/2000 ms$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon3
DEG2RAD	rplidar_ros/src/node.cpp	44;"	d	file:
DETECT_FACTORY_H	vision_unit/include/vision_unit/detect_factory/detect_factory.h	2;"	d
DOMPopupSearchResults	doc/html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	doc/html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	doc/html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	doc/html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	doc/html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	doc/html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	doc/html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
DRIVER_TYPE_SERIALPORT	rplidar_ros/sdk/include/rplidar_driver.h	/^        DRIVER_TYPE_SERIALPORT = 0x0,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon4
DisposeDriver	rplidar_ros/sdk/src/rplidar_driver.cpp	/^void RPlidarDriver::DisposeDriver(RPlidarDriver * drv)$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
END_STATIC_CODE	rplidar_ros/sdk/src/hal/util.h	65;"	d
EVENT_FAILED	rplidar_ros/sdk/src/hal/event.h	/^        EVENT_FAILED = 0,$/;"	e	enum:rp::hal::Event::__anon8
EVENT_OK	rplidar_ros/sdk/src/hal/event.h	/^        EVENT_OK = 1,$/;"	e	enum:rp::hal::Event::__anon8
EVENT_TIMEOUT	rplidar_ros/sdk/src/hal/event.h	/^        EVENT_TIMEOUT = -1,$/;"	e	enum:rp::hal::Event::__anon8
Event	rplidar_ros/sdk/src/hal/event.h	/^    Event(bool isAutoReset = true, bool isSignal = false)$/;"	f	class:rp::hal::Event
Event	rplidar_ros/sdk/src/hal/event.h	/^class Event$/;"	c	namespace:rp::hal
FindChildElement	doc/html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
ForeBack	serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
HPtimer_reset	rplidar_ros/sdk/src/arch/win32/timer.cpp	/^void HPtimer_reset()$/;"	f	namespace:rp::arch
IDLE_STATE	logical_core/src/logical_core_node.cpp	/^    IDLE_STATE$/;"	e	enum:CarState	file:
IS_FAIL	rplidar_ros/sdk/include/rptypes.h	114;"	d
IS_OK	rplidar_ros/sdk/include/rptypes.h	113;"	d
LABELER_H	vision_unit/include/vision_unit/detect_factory/labeler.h	2;"	d
LEGACY_SAMPLE_DURATION	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^        LEGACY_SAMPLE_DURATION = 476,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriverSerialImpl::__anon6
LOCK_FAILED	rplidar_ros/sdk/src/hal/locker.h	/^        LOCK_FAILED = 0$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOCK_OK	rplidar_ros/sdk/src/hal/locker.h	/^        LOCK_OK = 1,$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOCK_STATUS	rplidar_ros/sdk/src/hal/locker.h	/^    enum LOCK_STATUS$/;"	g	class:rp::hal::Locker
LOCK_TIMEOUT	rplidar_ros/sdk/src/hal/locker.h	/^        LOCK_TIMEOUT = -1,$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LeftRight	serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
Lidar2Camera	vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^class Lidar2Camera$/;"	c
Lidar2Camera	vision_unit/src/vision_lidar_fusion/lidar2camera_node.cpp	/^Lidar2Camera::Lidar2Camera()$/;"	f	class:Lidar2Camera
Locker	rplidar_ros/sdk/src/hal/locker.h	/^    Locker(){$/;"	f	class:rp::hal::Locker
Locker	rplidar_ros/sdk/src/hal/locker.h	/^class Locker$/;"	c	namespace:rp::hal
MAX_MOTOR_PWM	rplidar_ros/sdk/include/rplidar_cmd.h	76;"	d
MAX_SCAN_NODES	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^        MAX_SCAN_NODES = 2048,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriverSerialImpl::__anon5
MoveBaseClient	logical_core/src/logical_core_node.cpp	/^typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;$/;"	t	file:
NAVTREE	doc/html/navtreedata.js	/^var NAVTREE =$/;"	v
NAVTREEINDEX	doc/html/navtreedata.js	/^var NAVTREEINDEX =$/;"	v
NAV_STATE	logical_core/src/logical_core_node.cpp	/^    NAV_STATE,$/;"	e	enum:CarState	file:
Nav	doc/html/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	doc/html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	doc/html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	doc/html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
OnSearchFieldChange	doc/html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	doc/html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	doc/html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	doc/html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	doc/html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	doc/html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
PARAM_MANAGER_H	param_manager/include/param_manager.h	2;"	d
PATROL_MODE	logical_core/src/logical_core_node.cpp	/^    PATROL_MODE,$/;"	e	enum:AutoDrive	file:
POINT_MODE	logical_core/src/logical_core_node.cpp	/^    POINT_MODE,$/;"	e	enum:AutoDrive	file:
PRIORITY_HIGH	rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_HIGH     = 1,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_IDLE	rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_IDLE     = 4,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_LOW	rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_LOW      = 3,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_NORMAL	rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_NORMAL   = 2,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_REALTIME	rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_REALTIME = 0,$/;"	e	enum:rp::hal::Thread::priority_val_t
ProcessKeys	doc/html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
R	serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
R	tf_tree/include/tf_tree/tf_factory.h	/^  cv::Mat R;$/;"	m	class:autocar::tf_mul::tf_factory
R	tf_tree/include/tf_tree/tf_param.h	/^  cv::Mat R;$/;"	m	class:autocar::tf_mul::tf_param
RAD2DEG	rplidar_ros/src/client.cpp	41;"	d	file:
RESULT_ALREADY_DONE	rplidar_ros/sdk/include/rptypes.h	104;"	d
RESULT_FAIL_BIT	rplidar_ros/sdk/include/rptypes.h	103;"	d
RESULT_FORMAT_NOT_SUPPORT	rplidar_ros/sdk/include/rptypes.h	110;"	d
RESULT_INSUFFICIENT_MEMORY	rplidar_ros/sdk/include/rptypes.h	111;"	d
RESULT_INVALID_DATA	rplidar_ros/sdk/include/rptypes.h	105;"	d
RESULT_OK	rplidar_ros/sdk/include/rptypes.h	102;"	d
RESULT_OPERATION_FAIL	rplidar_ros/sdk/include/rptypes.h	106;"	d
RESULT_OPERATION_NOT_SUPPORT	rplidar_ros/sdk/include/rptypes.h	109;"	d
RESULT_OPERATION_STOP	rplidar_ros/sdk/include/rptypes.h	108;"	d
RESULT_OPERATION_TIMEOUT	rplidar_ros/sdk/include/rptypes.h	107;"	d
RPLIDAR_ANS_HEADER_SIZE_MASK	rplidar_ros/sdk/include/rplidar_protocol.h	48;"	d
RPLIDAR_ANS_HEADER_SUBTYPE_SHIFT	rplidar_ros/sdk/include/rplidar_protocol.h	49;"	d
RPLIDAR_ANS_PKTFLAG_LOOP	rplidar_ros/sdk/include/rplidar_protocol.h	46;"	d
RPLIDAR_ANS_SYNC_BYTE1	rplidar_ros/sdk/include/rplidar_protocol.h	43;"	d
RPLIDAR_ANS_SYNC_BYTE2	rplidar_ros/sdk/include/rplidar_protocol.h	44;"	d
RPLIDAR_ANS_TYPE_ACC_BOARD_FLAG	rplidar_ros/sdk/include/rplidar_cmd.h	98;"	d
RPLIDAR_ANS_TYPE_DEVHEALTH	rplidar_ros/sdk/include/rplidar_cmd.h	89;"	d
RPLIDAR_ANS_TYPE_DEVINFO	rplidar_ros/sdk/include/rplidar_cmd.h	88;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT	rplidar_ros/sdk/include/rplidar_cmd.h	91;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED	rplidar_ros/sdk/include/rplidar_cmd.h	93;"	d
RPLIDAR_ANS_TYPE_SAMPLE_RATE	rplidar_ros/sdk/include/rplidar_cmd.h	96;"	d
RPLIDAR_CMDFLAG_HAS_PAYLOAD	rplidar_ros/sdk/include/rplidar_protocol.h	40;"	d
RPLIDAR_CMD_EXPRESS_SCAN	rplidar_ros/sdk/include/rplidar_cmd.h	56;"	d
RPLIDAR_CMD_FORCE_SCAN	rplidar_ros/sdk/include/rplidar_cmd.h	45;"	d
RPLIDAR_CMD_GET_ACC_BOARD_FLAG	rplidar_ros/sdk/include/rplidar_cmd.h	60;"	d
RPLIDAR_CMD_GET_DEVICE_HEALTH	rplidar_ros/sdk/include/rplidar_cmd.h	51;"	d
RPLIDAR_CMD_GET_DEVICE_INFO	rplidar_ros/sdk/include/rplidar_cmd.h	50;"	d
RPLIDAR_CMD_GET_SAMPLERATE	rplidar_ros/sdk/include/rplidar_cmd.h	53;"	d
RPLIDAR_CMD_RESET	rplidar_ros/sdk/include/rplidar_cmd.h	46;"	d
RPLIDAR_CMD_SCAN	rplidar_ros/sdk/include/rplidar_cmd.h	44;"	d
RPLIDAR_CMD_SET_MOTOR_PWM	rplidar_ros/sdk/include/rplidar_cmd.h	59;"	d
RPLIDAR_CMD_STOP	rplidar_ros/sdk/include/rplidar_cmd.h	43;"	d
RPLIDAR_CMD_SYNC_BYTE	rplidar_ros/sdk/include/rplidar_protocol.h	39;"	d
RPLIDAR_EXPRESS_SCAN_MODE_FIXANGLE	rplidar_ros/sdk/include/rplidar_cmd.h	70;"	d
RPLIDAR_EXPRESS_SCAN_MODE_NORMAL	rplidar_ros/sdk/include/rplidar_cmd.h	69;"	d
RPLIDAR_RESP_ACC_BOARD_FLAG_MOTOR_CTRL_SUPPORT_MASK	rplidar_ros/sdk/include/rplidar_cmd.h	100;"	d
RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT	rplidar_ros/sdk/include/rplidar_cmd.h	113;"	d
RPLIDAR_RESP_MEASUREMENT_CHECKBIT	rplidar_ros/sdk/include/rplidar_cmd.h	112;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_ANGLE_MASK	rplidar_ros/sdk/include/rplidar_cmd.h	127;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_DISTANCE_MASK	rplidar_ros/sdk/include/rplidar_cmd.h	128;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNCBIT	rplidar_ros/sdk/include/rplidar_cmd.h	140;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_1	rplidar_ros/sdk/include/rplidar_cmd.h	137;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_2	rplidar_ros/sdk/include/rplidar_cmd.h	138;"	d
RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT	rplidar_ros/sdk/include/rplidar_cmd.h	111;"	d
RPLIDAR_RESP_MEASUREMENT_SYNCBIT	rplidar_ros/sdk/include/rplidar_cmd.h	110;"	d
RPLIDAR_SDK_VERSION	rplidar_ros/sdk/include/rplidar.h	43;"	d
RPLIDAR_STATUS_ERROR	rplidar_ros/sdk/include/rplidar_cmd.h	108;"	d
RPLIDAR_STATUS_OK	rplidar_ros/sdk/include/rplidar_cmd.h	106;"	d
RPLIDAR_STATUS_WARNING	rplidar_ros/sdk/include/rplidar_cmd.h	107;"	d
RPlidarDriver	rplidar_ros/sdk/include/rplidar_driver.h	/^    RPlidarDriver() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
RPlidarDriver	rplidar_ros/sdk/include/rplidar_driver.h	/^class RPlidarDriver {$/;"	c	namespace:rp::standalone::rplidar
RPlidarDriverSerialImpl	rplidar_ros/sdk/src/rplidar_driver.cpp	/^RPlidarDriverSerialImpl::RPlidarDriverSerialImpl() $/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
RPlidarDriverSerialImpl	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^class RPlidarDriverSerialImpl : public RPlidarDriver$/;"	c	namespace:rp::standalone::rplidar
RUNE_DETECT_H	vision_unit/include/vision_unit/detect_factory/rune_detect.h	2;"	d
RelPos	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^struct RelPos$/;"	s
ReleaseRxTx	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void serial_rxtx::ReleaseRxTx(serial_rxtx *rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^    void serial_rxtx::ReleaseRxTx(serial_rxtx *rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void  serial_rxtx::ReleaseRxTx( serial_rxtx * rxtx)$/;"	f	class:rp::hal::serial_rxtx
Rotate	serial_comm/include/comm_read.h	/^  double YawAngle, Rotate;$/;"	m	class:autocar::serial_mul::comm_read
SERIAL_PARAM_H	serial_comm/include/serial_param.h	2;"	d
SERIAL_RX_BUFFER_SIZE	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon10
SERIAL_RX_BUFFER_SIZE	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon9
SERIAL_RX_BUFFER_SIZE	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon11
SERIAL_RX_TIMEOUT	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_RX_TIMEOUT     = 2000,$/;"	e	enum:rp::arch::net::raw_serial::__anon11
SERIAL_TX_BUFFER_SIZE	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon10
SERIAL_TX_BUFFER_SIZE	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon9
SERIAL_TX_BUFFER_SIZE	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon11
SERIAL_TX_TIMEOUT	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_TX_TIMEOUT     = 2000,$/;"	e	enum:rp::arch::net::raw_serial::__anon11
SYNCOFFMSG	doc/html/navtreedata.js	/^var SYNCOFFMSG = 'click to enable panel synchronisation';/;"	v
SYNCONMSG	doc/html/navtreedata.js	/^var SYNCONMSG = 'click to disable panel synchronisation';$/;"	v
Search	doc/html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	doc/html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	doc/html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	doc/html/search/search.js	/^function SearchResults(name)$/;"	c
SelectItemCount	doc/html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	doc/html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
T	tf_tree/include/tf_tree/tf_factory.h	/^  cv::Mat T;$/;"	m	class:autocar::tf_mul::tf_factory
T	tf_tree/include/tf_tree/tf_param.h	/^  cv::Mat T;$/;"	m	class:autocar::tf_mul::tf_param
TF_FACTORY_H	tf_tree/include/tf_tree/tf_factory.h	2;"	d
TF_PARAM_H	tf_tree/include/tf_tree/tf_param.h	2;"	d
THREAD_PROC	rplidar_ros/sdk/include/rptypes.h	84;"	d
THREAD_PROC	rplidar_ros/sdk/include/rptypes.h	87;"	d
THREAD_PROC	rplidar_ros/sdk/include/rptypes.h	90;"	d
THREAD_PROC	rplidar_ros/sdk/include/rptypes.h	93;"	d
THREAD_PROC	rplidar_ros/sdk/include/rptypes.h	96;"	d
TRACKING_MODE	logical_core/src/logical_core_node.cpp	/^    TRACKING_MODE,$/;"	e	enum:AutoDrive	file:
Thread	rplidar_ros/sdk/src/hal/thread.h	/^    Thread( thread_proc_t proc, void * data ): _data(data),_func(proc), _handle(0)  {}$/;"	f	class:rp::hal::Thread
Thread	rplidar_ros/sdk/src/hal/thread.h	/^    Thread():  _data(NULL),_func(NULL),_handle(0)  {}$/;"	f	class:rp::hal::Thread
Thread	rplidar_ros/sdk/src/hal/thread.h	/^class Thread$/;"	c	namespace:rp::hal
Toggle	doc/html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
VEL2ODOM_H	odometry/include/odometry/vel2odom.h	2;"	d
VIDEO_RECODER	vision_unit/include/vision_unit/detect_factory/video_recoder.h	2;"	d
VISION_LIDAR_FUSION_H	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	2;"	d
VISION_PARAM_H	vision_unit/include/vision_unit/detect_factory/vision_param.h	2;"	d
VisionLidarFusion	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^class VisionLidarFusion$/;"	c
WINVER	rplidar_ros/sdk/src/arch/win32/arch_win32.h	41;"	d
Y	serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
YawAngle	serial_comm/include/comm_read.h	/^  double YawAngle, Rotate;$/;"	m	class:autocar::serial_mul::comm_read
_CRT_SECURE_NO_WARNINGS	rplidar_ros/sdk/src/arch/win32/arch_win32.h	38;"	d
_DEBUG_VISION	vision_unit/include/vision_unit/detect_factory/draw.h	7;"	d
_DEBUG_VISION	vision_unit/src/detect_factory/armor_detect_node.cpp	11;"	d	file:
_DEBUG_VISION	vision_unit/src/detect_factory/draw.cpp	2;"	d	file:
_RICHEDIT_VER	rplidar_ros/sdk/src/arch/win32/arch_win32.h	54;"	d
_UTIL_H_	vision_unit/include/vision_unit/detect_factory/util.h	2;"	d
_WIN32_IE	rplidar_ros/sdk/src/arch/win32/arch_win32.h	50;"	d
_WIN32_WINNT	rplidar_ros/sdk/src/arch/win32/arch_win32.h	45;"	d
__ARMOR_H__	vision_unit/include/vision_unit/detect_factory/armor_detect.h	2;"	d
__DEBUG_UTILITY_H__	vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	2;"	d
__DRAW_H__	vision_unit/include/vision_unit/detect_factory/draw.h	2;"	d
__THREAD_OPERATION_H__	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	2;"	d
__UTILITY_H__	vision_unit/include/vision_unit/detect_factory/image_utility.h	2;"	d
__attribute__	rplidar_ros/sdk/include/rptypes.h	77;"	d
__small_endian	rplidar_ros/sdk/include/rptypes.h	74;"	d
_baudrate	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_baudrate	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_baudrate	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_binded	rplidar_ros/sdk/src/hal/locker.h	/^    Locker & _binded;$/;"	m	class:rp::hal::AutoLocker
_cacheCapsuledScanData	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_cacheCapsuledScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cacheScanData	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_cacheScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_previous_capsuledata	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rplidar_response_capsule_measurement_nodes_t _cached_previous_capsuledata;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_sampleduration_express	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    _u16                    _cached_sampleduration_express;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_sampleduration_std	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    _u16                    _cached_sampleduration_std;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_scan_node_buf	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rplidar_response_measurement_node_t      _cached_scan_node_buf[2048];$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_scan_node_count	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    size_t                                   _cached_scan_node_count;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cachethread	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^	rp::hal::Thread _cachethread;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_capsuleToNormal	rplidar_ros/sdk/src/rplidar_driver.cpp	/^void     RPlidarDriverSerialImpl::_capsuleToNormal(const rplidar_response_capsule_measurement_nodes_t & capsule, rplidar_response_measurement_node_t *nodebuffer, size_t &nodeCount)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_co	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    COMMTIMEOUTS _co;$/;"	m	class:rp::arch::net::raw_serial
_cond_locker	rplidar_ros/sdk/src/hal/event.h	/^        pthread_mutex_t        _cond_locker;$/;"	m	class:rp::hal::Event
_cond_var	rplidar_ros/sdk/src/hal/event.h	/^        pthread_cond_t         _cond_var;$/;"	m	class:rp::hal::Event
_countof	rplidar_ros/sdk/src/hal/util.h	42;"	d
_countof	rplidar_ros/sdk/src/hal/util.h	48;"	d
_countof	rplidar_ros/src/node.cpp	41;"	d	file:
_current_freq	rplidar_ros/sdk/src/arch/win32/timer.cpp	/^static LARGE_INTEGER _current_freq;$/;"	m	namespace:rp::arch	file:
_data	rplidar_ros/sdk/src/hal/thread.h	/^    void * _data;$/;"	m	class:rp::hal::Thread
_dataEvt	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rp::hal::Event          _dataEvt;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_dcb	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    DCB _dcb;$/;"	m	class:rp::arch::net::raw_serial
_disableDataGrabbing	rplidar_ros/sdk/src/rplidar_driver.cpp	/^void RPlidarDriverSerialImpl::_disableDataGrabbing()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_event	rplidar_ros/sdk/src/hal/event.h	/^        HANDLE _event;$/;"	m	class:rp::hal::Event
_flags	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_flags	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_flags	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_func	rplidar_ros/sdk/src/hal/thread.h	/^    thread_proc_t _func;$/;"	m	class:rp::hal::Thread
_handle	rplidar_ros/sdk/src/hal/thread.h	/^    _word_size_t _handle;$/;"	m	class:rp::hal::Thread
_init	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_init	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_init	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_isAutoReset	rplidar_ros/sdk/src/hal/event.h	/^        bool                   _isAutoReset;$/;"	m	class:rp::hal::Event
_isConnected	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool     _isConnected;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_isScanning	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool     _isScanning;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_isSupportingMotorCtrl	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool     _isSupportingMotorCtrl;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_is_previous_capsuledataRdy	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool                                         _is_previous_capsuledataRdy;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_is_serial_opened	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    volatile bool   _is_serial_opened;$/;"	m	class:rp::hal::serial_rxtx
_is_signalled	rplidar_ros/sdk/src/hal/event.h	/^        bool                   _is_signalled;$/;"	m	class:rp::hal::Event
_lock	rplidar_ros/sdk/src/hal/locker.h	/^    HANDLE  _lock;$/;"	m	class:rp::hal::Locker
_lock	rplidar_ros/sdk/src/hal/locker.h	/^    pthread_mutex_t _lock;$/;"	m	class:rp::hal::Locker
_lock	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^	rp::hal::Locker         _lock;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_portName	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    char _portName[200];$/;"	m	class:rp::arch::net::raw_serial
_portName	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    char _portName[200];$/;"	m	class:rp::arch::net::raw_serial
_portName	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    char _portName[20];$/;"	m	class:rp::arch::net::raw_serial
_preventDefault	doc/html/resize.js	/^  var _preventDefault = function(evt) { evt.preventDefault(); };$/;"	f
_ro	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _ro, _wo;$/;"	m	class:rp::arch::net::raw_serial
_rplidar_ans_header_t	rplidar_ros/sdk/include/rplidar_protocol.h	/^typedef struct _rplidar_ans_header_t {$/;"	s
_rplidar_cmd_packet_t	rplidar_ros/sdk/include/rplidar_protocol.h	/^typedef struct _rplidar_cmd_packet_t {$/;"	s
_rplidar_payload_acc_board_flag_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_acc_board_flag_t {$/;"	s
_rplidar_payload_express_scan_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_express_scan_t {$/;"	s
_rplidar_payload_motor_pwm_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_motor_pwm_t {$/;"	s
_rplidar_response_acc_board_flag_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_acc_board_flag_t {$/;"	s
_rplidar_response_cabin_nodes_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_cabin_nodes_t {$/;"	s
_rplidar_response_capsule_measurement_nodes_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_capsule_measurement_nodes_t {$/;"	s
_rplidar_response_device_health_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_device_health_t {$/;"	s
_rplidar_response_device_info_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_device_info_t {$/;"	s
_rplidar_response_measurement_node_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_measurement_node_t {$/;"	s
_rplidar_response_sample_rate_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_sample_rate_t {$/;"	s
_rxtx	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rp::hal::serial_rxtx  * _rxtx;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_s16	rplidar_ros/sdk/include/rptypes.h	/^typedef int16_t        _s16;$/;"	t
_s32	rplidar_ros/sdk/include/rptypes.h	/^typedef int32_t        _s32;$/;"	t
_s64	rplidar_ros/sdk/include/rptypes.h	/^typedef int64_t        _s64;$/;"	t
_s8	rplidar_ros/sdk/include/rptypes.h	/^typedef int8_t         _s8;$/;"	t
_sendCommand	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_sendCommand(_u8 cmd, const void * payload, size_t payloadsize)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_serial_handle	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    volatile HANDLE _serial_handle;$/;"	m	class:rp::arch::net::raw_serial
_thread_thunk	rplidar_ros/sdk/src/hal/thread.h	/^	static _word_size_t THREAD_PROC _thread_thunk(void * data)$/;"	f	class:rp::hal::Thread
_u16	rplidar_ros/sdk/include/rptypes.h	/^typedef uint16_t       _u16;$/;"	t
_u32	rplidar_ros/sdk/include/rptypes.h	/^typedef uint32_t       _u32;$/;"	t
_u64	rplidar_ros/sdk/include/rptypes.h	/^typedef uint64_t       _u64;$/;"	t
_u8	rplidar_ros/sdk/include/rptypes.h	/^typedef uint8_t        _u8;$/;"	t
_waitCapsuledNode	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitCapsuledNode(rplidar_response_capsule_measurement_nodes_t & node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_waitNode	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitNode(rplidar_response_measurement_node_t * node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_waitResponseHeader	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitResponseHeader(rplidar_ans_header_t * header, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_waitScanData	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_wait_o	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _wait_o;$/;"	m	class:rp::arch::net::raw_serial
_wo	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _ro, _wo;$/;"	m	class:rp::arch::net::raw_serial
_word_size_t	rplidar_ros/sdk/include/rptypes.h	/^typedef _u32            _word_size_t;$/;"	t
_word_size_t	rplidar_ros/sdk/include/rptypes.h	/^typedef _u32           _word_size_t;$/;"	t
_word_size_t	rplidar_ros/sdk/include/rptypes.h	/^typedef _u64           _word_size_t;$/;"	t
_word_size_t	rplidar_ros/sdk/include/rptypes.h	/^typedef _u8            _word_size_t;$/;"	t
_word_size_t	rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned long  _word_size_t;$/;"	t
a.onclick	doc/html/navtree.js	/^      a.onclick = function(){$/;"	f
ac	logical_core/src/logical_core_node.cpp	/^    MoveBaseClient ac;$/;"	m	class:Brain	file:
ang_lim	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    double ang_lim = 3.0\/180*3.14;$/;"	m	class:autocar::vision_mul::armor_detect_node
angle	serial_comm/include/comm_read.h	/^  int16_t angle;$/;"	m	struct:autocar::serial_mul::__anon2
angle_q6_checkbit	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   angle_q6_checkbit; \/\/ check_bit:1;angle_q6:15;$/;"	m	struct:_rplidar_response_measurement_node_t
animationInProgress	doc/html/navtree.js	/^var animationInProgress = false;$/;"	v
annotated_dup	doc/html/annotated_dup.js	/^var annotated_dup =$/;"	v
arch	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	rplidar_ros/sdk/src/arch/linux/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	rplidar_ros/sdk/src/arch/linux/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
arch	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	rplidar_ros/sdk/src/arch/macOS/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
arch	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	rplidar_ros/sdk/src/arch/win32/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	rplidar_ros/sdk/src/arch/win32/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
armor	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  armor_info *armor;$/;"	m	class:autocar::vision_mul::armor_detecter
armor	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::RotatedRect armor;$/;"	m	class:autocar::vision_mul::armor_info
armor_	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    armor_info *armor_;$/;"	m	class:autocar::vision_mul::armor_detect_node
armor_angle_	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double armor_angle_;$/;"	m	class:VisionLidarFusion
armor_detect_node	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^class armor_detect_node$/;"	c	namespace:autocar::vision_mul
armor_detect_node	vision_unit/src/detect_factory/armor_detect_node.cpp	/^armor_detect_node::armor_detect_node(void)$/;"	f	class:autocar::vision_mul::armor_detect_node
armor_detecter	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^class armor_detecter: public detect_factory$/;"	c	namespace:autocar::vision_mul
armor_detecter	vision_unit/src/detect_factory/armor_detect.cpp	/^armor_detecter::armor_detecter()$/;"	f	class:autocar::vision_mul::armor_detecter
armor_dist_	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double armor_dist_;$/;"	m	class:VisionLidarFusion
armor_index_	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  int armor_index_;$/;"	m	class:VisionLidarFusion
armor_info	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  armor_info(int type_, cv::RotatedRect armor_, cv::RotatedRect left_=cv::RotatedRect(), cv::RotatedRect right_=cv::RotatedRect())$/;"	f	class:autocar::vision_mul::armor_info
armor_info	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^class armor_info$/;"	c	namespace:autocar::vision_mul
armor_info	vision_unit/src/detect_factory/armor_detect.cpp	/^armor_info::armor_info()$/;"	f	class:autocar::vision_mul::armor_info
armor_pos	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    vision_unit::armor_msg armor_pos;$/;"	m	class:autocar::vision_mul::armor_detect_node
ascendScanData	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::ascendScanData(rplidar_response_measurement_node_t * nodebuffer, size_t count)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
auto_vw	serial_comm/include/comm_write.h	/^    int16_t auto_vw;$/;"	m	struct:autocar::serial_mul::__anon1
auto_vx	serial_comm/include/comm_write.h	/^    int16_t auto_vx;$/;"	m	struct:autocar::serial_mul::__anon1
auto_vy	serial_comm/include/comm_write.h	/^    int16_t auto_vy;$/;"	m	struct:autocar::serial_mul::__anon1
autocar	odometry/include/odometry/vel2odom.h	/^namespace autocar$/;"	n
autocar	odometry/src/vel2odom.cpp	/^namespace autocar$/;"	n	file:
autocar	param_manager/include/param_manager.h	/^namespace autocar$/;"	n
autocar	param_manager/src/param_manager.cpp	/^namespace autocar$/;"	n	file:
autocar	serial_comm/include/comm_read.h	/^namespace autocar$/;"	n
autocar	serial_comm/include/comm_write.h	/^namespace autocar$/;"	n
autocar	serial_comm/include/serial_param.h	/^namespace autocar$/;"	n
autocar	serial_comm/src/comm_read.cpp	/^namespace autocar$/;"	n	file:
autocar	serial_comm/src/comm_write.cpp	/^namespace autocar$/;"	n	file:
autocar	serial_comm/src/serial_param.cpp	/^namespace autocar$/;"	n	file:
autocar	tf_tree/include/tf_tree/tf_factory.h	/^namespace autocar$/;"	n
autocar	tf_tree/include/tf_tree/tf_param.h	/^namespace autocar$/;"	n
autocar	tf_tree/src/tf_factory.cpp	/^namespace autocar$/;"	n	file:
autocar	tf_tree/src/tf_param.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/detect_factory.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/image_utility.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/labeler.h	/^namespace autocar {$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/rune_detect.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/util.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^namespace autocar$/;"	n
autocar	vision_unit/include/vision_unit/detect_factory/vision_param.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/include/vision_unit/detect_factory/vision_param.h	/^namespace autocar$/;"	n
autocar	vision_unit/src/detect_factory/armor_detect.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/armor_detect_node.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/image_utility.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/labeler.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/rune_detect.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/util.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/video_recoder.cpp	/^namespace autocar$/;"	n	file:
autocar	vision_unit/src/detect_factory/vision_param.cpp	/^namespace autocar$/;"	n	file:
bind	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::bind(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
bind	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::bind(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
bind	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::bind(const char * portname, _u32 baudrate, _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
cabins	rplidar_ros/sdk/include/rplidar_cmd.h	/^    rplidar_response_cabin_nodes_t  cabins[16];$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
cachedLink	doc/html/navtree.js	/^function cachedLink()$/;"	f
cal_odom	odometry/src/vel2odom.cpp	/^void vel2odom::cal_odom()$/;"	f	class:autocar::odom_mul::vel2odom
calcLineDegree	vision_unit/src/detect_factory/image_utility.cpp	/^double calcLineDegree(const cv::Point2f& firstPt, const cv::Point2f& secondPt)$/;"	f	namespace:autocar::vision_mul
cam	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    double cam[9] = {839.923052, 0.0,        340.780730,$/;"	m	class:autocar::vision_mul::armor_detect_node
camera_matrix	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat camera_matrix;$/;"	m	class:autocar::vision_mul::armor_detect_node
camera_matrix	vision_unit/include/vision_unit/detect_factory/vision_param.h	/^  cv::Mat camera_matrix;$/;"	m	class:autocar::vision_mul::vision_param
car_comm_write	serial_comm/src/comm_write_node.cpp	/^autocar::serial_mul::comm_write car_comm_write;$/;"	v
car_position	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    geometry_msgs::PoseWithCovarianceStamped car_position;$/;"	m	class:autocar::vision_mul::armor_detect_node
car_state	logical_core/src/logical_core_node.cpp	/^    CarState car_state;$/;"	m	class:Brain	file:
center_point	vision_unit/src/detect_factory/image_utility.cpp	/^T center_point(const T &point1, const T &point2)$/;"	f	namespace:autocar::vision_mul
checkExpressScanSupported	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::checkExpressScanSupported(bool & support, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
checkMotorCtrlSupport	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::checkMotorCtrlSupport(bool & support, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
checkRPLIDARHealth	rplidar_ros/src/node.cpp	/^bool checkRPLIDARHealth(RPlidarDriver * drv)$/;"	f
classAngleLocalParameterization	doc/html/classAngleLocalParameterization.js	/^var classAngleLocalParameterization =$/;"	v
classBriefExtractor	doc/html/classBriefExtractor.js	/^var classBriefExtractor =$/;"	v
classCameraPoseVisualization	doc/html/classCameraPoseVisualization.js	/^var classCameraPoseVisualization =$/;"	v
classDBoW2_1_1BowVector	doc/html/classDBoW2_1_1BowVector.js	/^var classDBoW2_1_1BowVector =$/;"	v
classDBoW2_1_1FBrief	doc/html/classDBoW2_1_1FBrief.js	/^var classDBoW2_1_1FBrief =$/;"	v
classDBoW2_1_1FeatureVector	doc/html/classDBoW2_1_1FeatureVector.js	/^var classDBoW2_1_1FeatureVector =$/;"	v
classDBoW2_1_1GeneralScoring	doc/html/classDBoW2_1_1GeneralScoring.js	/^var classDBoW2_1_1GeneralScoring =$/;"	v
classDBoW2_1_1QueryResults	doc/html/classDBoW2_1_1QueryResults.js	/^var classDBoW2_1_1QueryResults =$/;"	v
classDBoW2_1_1Result	doc/html/classDBoW2_1_1Result.js	/^var classDBoW2_1_1Result =$/;"	v
classDBoW2_1_1TemplatedDatabase	doc/html/classDBoW2_1_1TemplatedDatabase.js	/^var classDBoW2_1_1TemplatedDatabase =$/;"	v
classDBoW2_1_1TemplatedVocabulary	doc/html/classDBoW2_1_1TemplatedVocabulary.js	/^var classDBoW2_1_1TemplatedVocabulary =$/;"	v
classDLoopDetector_1_1TemplatedLoopDetector	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.js	/^var classDLoopDetector_1_1TemplatedLoopDetector =$/;"	v
classDUtils_1_1DException	doc/html/classDUtils_1_1DException.js	/^var classDUtils_1_1DException =$/;"	v
classDUtils_1_1Random	doc/html/classDUtils_1_1Random.js	/^var classDUtils_1_1Random =$/;"	v
classDUtils_1_1Random_1_1UnrepeatedRandomizer	doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.js	/^var classDUtils_1_1Random_1_1UnrepeatedRandomizer =$/;"	v
classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#ae1bf6a140e322962f65b2c98dc07a3ac	doc/html/navtreeindex1.js	/^"classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#ae1bf6a140e322962f65b2c98dc07a3ac":[2,0,5,1,0,5],$/;"	p	class:NAVTREEINDEX1
classDUtils_1_1Timestamp	doc/html/classDUtils_1_1Timestamp.js	/^var classDUtils_1_1Timestamp =$/;"	v
classDVision_1_1BRIEF	doc/html/classDVision_1_1BRIEF.js	/^var classDVision_1_1BRIEF =$/;"	v
classEstimator	doc/html/classEstimator.js	/^var classEstimator =$/;"	v
classFeatureExtractor	doc/html/classFeatureExtractor.js	/^var classFeatureExtractor =$/;"	v
classFeatureManager	doc/html/classFeatureManager.js	/^var classFeatureManager =$/;"	v
classFeaturePerFrame	doc/html/classFeaturePerFrame.js	/^var classFeaturePerFrame =$/;"	v
classFeaturePerId	doc/html/classFeaturePerId.js	/^var classFeaturePerId =$/;"	v
classFeatureTracker	doc/html/classFeatureTracker.js	/^var classFeatureTracker =$/;"	v
classGlobalSFM	doc/html/classGlobalSFM.js	/^var classGlobalSFM =$/;"	v
classIMUFactor	doc/html/classIMUFactor.js	/^var classIMUFactor =$/;"	v
classImageFrame	doc/html/classImageFrame.js	/^var classImageFrame =$/;"	v
classInitialEXRotation	doc/html/classInitialEXRotation.js	/^var classInitialEXRotation =$/;"	v
classIntegrationBase	doc/html/classIntegrationBase.js	/^var classIntegrationBase =$/;"	v
classKeyFrame	doc/html/classKeyFrame.js	/^var classKeyFrame =$/;"	v
classKeyFrame.html#a24f40f8b54c3b1be6b5bde3e8f6b682f	doc/html/navtreeindex2.js	/^"classKeyFrame.html#a24f40f8b54c3b1be6b5bde3e8f6b682f":[2,0,24,10],$/;"	p	class:NAVTREEINDEX2
classKeyFrameDatabase	doc/html/classKeyFrameDatabase.js	/^var classKeyFrameDatabase =$/;"	v
classLoopClosure	doc/html/classLoopClosure.js	/^var classLoopClosure =$/;"	v
classMarginalizationFactor	doc/html/classMarginalizationFactor.js	/^var classMarginalizationFactor =$/;"	v
classMarginalizationInfo	doc/html/classMarginalizationInfo.js	/^var classMarginalizationInfo =$/;"	v
classMotionEstimator	doc/html/classMotionEstimator.js	/^var classMotionEstimator =$/;"	v
classProjectionFactor	doc/html/classProjectionFactor.js	/^var classProjectionFactor =$/;"	v
classSpline	doc/html/classSpline.js	/^var classSpline =$/;"	v
classTicToc	doc/html/classTicToc.js	/^var classTicToc =$/;"	v
classUtility	doc/html/classUtility.js	/^var classUtility =$/;"	v
classautocar_1_1odom__mul_1_1vel2odom	doc/html/classautocar_1_1odom__mul_1_1vel2odom.js	/^var classautocar_1_1odom__mul_1_1vel2odom =$/;"	v
classautocar_1_1param__mul_1_1param__manager	doc/html/classautocar_1_1param__mul_1_1param__manager.js	/^var classautocar_1_1param__mul_1_1param__manager =$/;"	v
classautocar_1_1serial__mul_1_1comm__read	doc/html/classautocar_1_1serial__mul_1_1comm__read.js	/^var classautocar_1_1serial__mul_1_1comm__read =$/;"	v
classautocar_1_1serial__mul_1_1comm__write	doc/html/classautocar_1_1serial__mul_1_1comm__write.js	/^var classautocar_1_1serial__mul_1_1comm__write =$/;"	v
classautocar_1_1serial__mul_1_1serial__param	doc/html/classautocar_1_1serial__mul_1_1serial__param.js	/^var classautocar_1_1serial__mul_1_1serial__param =$/;"	v
classautocar_1_1tf__mul_1_1tf__factory	doc/html/classautocar_1_1tf__mul_1_1tf__factory.js	/^var classautocar_1_1tf__mul_1_1tf__factory =$/;"	v
classautocar_1_1tf__mul_1_1tf__param	doc/html/classautocar_1_1tf__mul_1_1tf__param.js	/^var classautocar_1_1tf__mul_1_1tf__param =$/;"	v
classautocar_1_1thread__operation	doc/html/classautocar_1_1thread__operation.js	/^var classautocar_1_1thread__operation =$/;"	v
classautocar_1_1vision__mul_1_1armor__detect__node	doc/html/classautocar_1_1vision__mul_1_1armor__detect__node.js	/^var classautocar_1_1vision__mul_1_1armor__detect__node =$/;"	v
classautocar_1_1vision__mul_1_1armor__detecter	doc/html/classautocar_1_1vision__mul_1_1armor__detecter.js	/^var classautocar_1_1vision__mul_1_1armor__detecter =$/;"	v
classautocar_1_1vision__mul_1_1armor__info	doc/html/classautocar_1_1vision__mul_1_1armor__info.js	/^var classautocar_1_1vision__mul_1_1armor__info =$/;"	v
classautocar_1_1vision__mul_1_1detect__factory	doc/html/classautocar_1_1vision__mul_1_1detect__factory.js	/^var classautocar_1_1vision__mul_1_1detect__factory =$/;"	v
classautocar_1_1vision__mul_1_1labeler	doc/html/classautocar_1_1vision__mul_1_1labeler.js	/^var classautocar_1_1vision__mul_1_1labeler =$/;"	v
classautocar_1_1vision__mul_1_1rune__detect	doc/html/classautocar_1_1vision__mul_1_1rune__detect.js	/^var classautocar_1_1vision__mul_1_1rune__detect =$/;"	v
classautocar_1_1vision__mul_1_1thread__operation	doc/html/classautocar_1_1vision__mul_1_1thread__operation.js	/^var classautocar_1_1vision__mul_1_1thread__operation =$/;"	v
classautocar_1_1vision__mul_1_1video__recoder	doc/html/classautocar_1_1vision__mul_1_1video__recoder.js	/^var classautocar_1_1vision__mul_1_1video__recoder =$/;"	v
classautocar_1_1vision__mul_1_1vision__param	doc/html/classautocar_1_1vision__mul_1_1vision__param.js	/^var classautocar_1_1vision__mul_1_1vision__param =$/;"	v
classcamodocal_1_1Camera	doc/html/classcamodocal_1_1Camera.js	/^var classcamodocal_1_1Camera =$/;"	v
classcamodocal_1_1CameraCalibration	doc/html/classcamodocal_1_1CameraCalibration.js	/^var classcamodocal_1_1CameraCalibration =$/;"	v
classcamodocal_1_1CameraCalibration.html#a2ad9de73fb24b25deca80bccde408af7	doc/html/navtreeindex3.js	/^"classcamodocal_1_1CameraCalibration.html#a2ad9de73fb24b25deca80bccde408af7":[2,0,1,1,4],$/;"	p	class:NAVTREEINDEX3
classcamodocal_1_1CameraFactory	doc/html/classcamodocal_1_1CameraFactory.js	/^var classcamodocal_1_1CameraFactory =$/;"	v
classcamodocal_1_1Camera_1_1Parameters	doc/html/classcamodocal_1_1Camera_1_1Parameters.js	/^var classcamodocal_1_1Camera_1_1Parameters =$/;"	v
classcamodocal_1_1CataCamera	doc/html/classcamodocal_1_1CataCamera.js	/^var classcamodocal_1_1CataCamera =$/;"	v
classcamodocal_1_1CataCamera_1_1Parameters	doc/html/classcamodocal_1_1CataCamera_1_1Parameters.js	/^var classcamodocal_1_1CataCamera_1_1Parameters =$/;"	v
classcamodocal_1_1Chessboard	doc/html/classcamodocal_1_1Chessboard.js	/^var classcamodocal_1_1Chessboard =$/;"	v
classcamodocal_1_1ChessboardCorner	doc/html/classcamodocal_1_1ChessboardCorner.js	/^var classcamodocal_1_1ChessboardCorner =$/;"	v
classcamodocal_1_1ChessboardQuad	doc/html/classcamodocal_1_1ChessboardQuad.js	/^var classcamodocal_1_1ChessboardQuad =$/;"	v
classcamodocal_1_1CostFunctionFactory	doc/html/classcamodocal_1_1CostFunctionFactory.js	/^var classcamodocal_1_1CostFunctionFactory =$/;"	v
classcamodocal_1_1EigenQuaternionParameterization	doc/html/classcamodocal_1_1EigenQuaternionParameterization.js	/^var classcamodocal_1_1EigenQuaternionParameterization =$/;"	v
classcamodocal_1_1EquidistantCamera	doc/html/classcamodocal_1_1EquidistantCamera.js	/^var classcamodocal_1_1EquidistantCamera =$/;"	v
classcamodocal_1_1EquidistantCamera_1_1Parameters	doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.js	/^var classcamodocal_1_1EquidistantCamera_1_1Parameters =$/;"	v
classcamodocal_1_1OCAMCamera	doc/html/classcamodocal_1_1OCAMCamera.js	/^var classcamodocal_1_1OCAMCamera =$/;"	v
classcamodocal_1_1OCAMCamera_1_1Parameters	doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.js	/^var classcamodocal_1_1OCAMCamera_1_1Parameters =$/;"	v
classcamodocal_1_1PinholeCamera	doc/html/classcamodocal_1_1PinholeCamera.js	/^var classcamodocal_1_1PinholeCamera =$/;"	v
classcamodocal_1_1PinholeCamera_1_1Parameters	doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.js	/^var classcamodocal_1_1PinholeCamera_1_1Parameters =$/;"	v
classcamodocal_1_1PinholeCamera_1_1Parameters.html#a4b274f65825261daf6ca34ac94a0e168	doc/html/navtreeindex4.js	/^"classcamodocal_1_1PinholeCamera_1_1Parameters.html#a4b274f65825261daf6ca34ac94a0e168":[2,0,1,11,0,14],$/;"	p	class:NAVTREEINDEX4
classcamodocal_1_1Transform	doc/html/classcamodocal_1_1Transform.js	/^var classcamodocal_1_1Transform =$/;"	v
classcv__bridge_1_1CvImage	doc/html/classcv__bridge_1_1CvImage.js	/^var classcv__bridge_1_1CvImage =$/;"	v
classcv__bridge_1_1Exception	doc/html/classcv__bridge_1_1Exception.js	/^var classcv__bridge_1_1Exception =$/;"	v
classdemoDetector	doc/html/classdemoDetector.js	/^var classdemoDetector =$/;"	v
classdetect__factory	doc/html/classdetect__factory.js	/^var classdetect__factory =$/;"	v
classtf__factory	doc/html/classtf__factory.js	/^var classtf__factory =$/;"	v
clearDTR	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
close	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
cmd_flag	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 cmd_flag; $/;"	m	struct:_rplidar_cmd_packet_t
cols	vision_unit/include/vision_unit/detect_factory/labeler.h	/^        int cols;$/;"	m	class:autocar::vision_mul::labeler
cols	vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^        int cols;$/;"	m	class:autocar::vision_mul::video_recoder
comm_read	serial_comm/include/comm_read.h	/^class comm_read{$/;"	c	namespace:autocar::serial_mul
comm_read	serial_comm/src/comm_read.cpp	/^comm_read::comm_read()$/;"	f	class:autocar::serial_mul::comm_read
comm_write	serial_comm/include/comm_write.h	/^class comm_write{$/;"	c	namespace:autocar::serial_mul
comm_write	serial_comm/src/comm_write.cpp	/^comm_write::comm_write()$/;"	f	class:autocar::serial_mul::comm_write
compass	serial_comm/include/comm_read.h	/^  uint32_t compass;$/;"	m	struct:autocar::serial_mul::__anon2
connect	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::connect(const char * port_path, _u32 baudrate, _u32 flag)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
console_log	vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	30;"	d
convertToId	doc/html/search/search.js	/^function convertToId(search)$/;"	f
cookie_namespace	doc/html/resize.js	/^var cookie_namespace = 'doxygen'; $/;"	v
count	vision_unit/include/vision_unit/detect_factory/labeler.h	/^        int count;$/;"	m	class:autocar::vision_mul::labeler
create	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
createIndent	doc/html/navtree.js	/^function createIndent(o,domNode,node,level)$/;"	f
createResults	doc/html/search/search.js	/^function createResults()$/;"	f
create_member	rplidar_ros/sdk/src/hal/thread.h	/^    static Thread create_member(T * pthis)$/;"	f	class:rp::hal::Thread
create_tf	tf_tree/src/tf_factory.cpp	/^void tf_factory::create_tf()$/;"	f	class:autocar::tf_mul::tf_factory
current_time	odometry/include/odometry/vel2odom.h	/^  ros::Time current_time;$/;"	m	class:autocar::odom_mul::vel2odom
data	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 data[0];$/;"	m	struct:_rplidar_cmd_packet_t
data	serial_comm/include/comm_read.h	/^  data_t data;$/;"	m	class:autocar::serial_mul::comm_read
data	serial_comm/include/comm_write.h	/^  data_t data;$/;"	m	class:autocar::serial_mul::comm_write
data	serial_comm/src/comm_write_node.cpp	/^autocar::serial_mul::data_t data;$/;"	v
data_len	serial_comm/include/comm_read.h	/^  int data_len;$/;"	m	class:autocar::serial_mul::comm_read
data_len	serial_comm/include/comm_write.h	/^  int data_len;$/;"	m	class:autocar::serial_mul::comm_write
data_status	serial_comm/include/comm_read.h	/^  uint8_t data_status;$/;"	m	struct:autocar::serial_mul::__anon2
data_t	serial_comm/include/comm_read.h	/^}__attribute__((packed)) data_t;$/;"	t	namespace:autocar::serial_mul	typeref:struct:autocar::serial_mul::__anon2
data_t	serial_comm/include/comm_write.h	/^}__attribute__((packed)) data_t;$/;"	t	namespace:autocar::serial_mul	typeref:struct:autocar::serial_mul::__anon1
debug_vision	vision_unit/src/detect_factory/armor_detect.cpp	/^void armor_detecter::debug_vision()$/;"	f	class:autocar::vision_mul::armor_detecter
def_v	console/src/console.cpp	/^float def_v = 0.3;$/;"	v
delay	rplidar_ros/sdk/src/arch/linux/timer.h	/^static inline void delay(_word_size_t ms){$/;"	f
delay	rplidar_ros/sdk/src/arch/macOS/timer.h	/^static inline void delay(_word_size_t ms){$/;"	f
delay	rplidar_ros/sdk/src/arch/win32/timer.h	39;"	d
deleteLink	doc/html/navtree.js	/^function deleteLink()$/;"	f
details	doc/html/classDBoW2_1_1BowVector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1FBrief.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1FClass.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1FeatureVector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1GeneralScoring.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1QueryResults.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1Result.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDUtils_1_1DException.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDUtils_1_1Random.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDUtils_1_1Timestamp.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classDVision_1_1BRIEF.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classFeatureExtractor.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classcamodocal_1_1CataCamera.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classcamodocal_1_1EquidistantCamera.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classcamodocal_1_1OCAMCamera.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classcv__bridge_1_1CvImage.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/classdemoDetector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/namespaceDBoW2.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/namespaceDLoopDetector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/namespaceDUtils.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/namespaceDVision.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structDLoopDetector_1_1DetectionResult.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
detect	vision_unit/src/detect_factory/armor_detect.cpp	/^bool armor_detecter::detect(const cv::Mat &image, bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
detect	vision_unit/src/detect_factory/rune_detect.cpp	/^void rune_detect::detect()$/;"	f	class:autocar::vision_mul::rune_detect
detect_factory	vision_unit/include/vision_unit/detect_factory/detect_factory.h	/^class detect_factory$/;"	c	namespace:autocar::vision_mul
detect_lights	vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<cv::RotatedRect> armor_detecter::detect_lights(bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
detected_armor	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    bool detected_armor;$/;"	m	class:autocar::vision_mul::armor_detect_node
dev	serial_comm/include/comm_read.h	/^  std::string dev;$/;"	m	class:autocar::serial_mul::comm_read
dev	serial_comm/include/comm_write.h	/^  std::string dev;$/;"	m	class:autocar::serial_mul::comm_write
dir_125e7f126f10d6d82b7727e2eff633b9	doc/html/dir_125e7f126f10d6d82b7727e2eff633b9.js	/^var dir_125e7f126f10d6d82b7727e2eff633b9 =$/;"	v
dir_178510db1be2a7db789ad3a16c560bb0	doc/html/dir_178510db1be2a7db789ad3a16c560bb0.js	/^var dir_178510db1be2a7db789ad3a16c560bb0 =$/;"	v
dir_1c86866f58725cbc8a8f650f634c1b21	doc/html/dir_1c86866f58725cbc8a8f650f634c1b21.js	/^var dir_1c86866f58725cbc8a8f650f634c1b21 =$/;"	v
dir_1ce5266766058a56db2573afb763b0aa	doc/html/dir_1ce5266766058a56db2573afb763b0aa.js	/^var dir_1ce5266766058a56db2573afb763b0aa =$/;"	v
dir_21bdf9efc55dbdf1c7a01a5eabaeccb8	doc/html/dir_21bdf9efc55dbdf1c7a01a5eabaeccb8.js	/^var dir_21bdf9efc55dbdf1c7a01a5eabaeccb8 =$/;"	v
dir_22f04675140458f12f752464d75b29ad	doc/html/dir_22f04675140458f12f752464d75b29ad.js	/^var dir_22f04675140458f12f752464d75b29ad =$/;"	v
dir_2bb129e7572810fca886dae68ff69a2d	doc/html/dir_2bb129e7572810fca886dae68ff69a2d.js	/^var dir_2bb129e7572810fca886dae68ff69a2d =$/;"	v
dir_2c95bba08f7f326697602ead8870d96e	doc/html/dir_2c95bba08f7f326697602ead8870d96e.js	/^var dir_2c95bba08f7f326697602ead8870d96e =$/;"	v
dir_2d88a95eaf792b93d8dec6cb3cf8eb68	doc/html/dir_2d88a95eaf792b93d8dec6cb3cf8eb68.js	/^var dir_2d88a95eaf792b93d8dec6cb3cf8eb68 =$/;"	v
dir_31eaaf881da50199d59a94e947ea09d5	doc/html/dir_31eaaf881da50199d59a94e947ea09d5.js	/^var dir_31eaaf881da50199d59a94e947ea09d5 =$/;"	v
dir_320fe6d286df73fc981311a902a07d31	doc/html/dir_320fe6d286df73fc981311a902a07d31.js	/^var dir_320fe6d286df73fc981311a902a07d31 =$/;"	v
dir_3774b78f742e86463f186103299b33c9	doc/html/dir_3774b78f742e86463f186103299b33c9.js	/^var dir_3774b78f742e86463f186103299b33c9 =$/;"	v
dir_39903b13293b03099f869299802630f2	doc/html/dir_39903b13293b03099f869299802630f2.js	/^var dir_39903b13293b03099f869299802630f2 =$/;"	v
dir_3cff172a548866d15f45a5d74df3690d	doc/html/dir_3cff172a548866d15f45a5d74df3690d.js	/^var dir_3cff172a548866d15f45a5d74df3690d =$/;"	v
dir_3d75f7bea507c05bdccef4eecb546379	doc/html/dir_3d75f7bea507c05bdccef4eecb546379.js	/^var dir_3d75f7bea507c05bdccef4eecb546379 =$/;"	v
dir_42cb5db3f120f5eca9d021e3f70e81f6	doc/html/dir_42cb5db3f120f5eca9d021e3f70e81f6.js	/^var dir_42cb5db3f120f5eca9d021e3f70e81f6 =$/;"	v
dir_42e0a74288423937a6d783277b641c4e	doc/html/dir_42e0a74288423937a6d783277b641c4e.js	/^var dir_42e0a74288423937a6d783277b641c4e =$/;"	v
dir_53ac1b8e7cb4cf6a35b6d485fd55775b	doc/html/dir_53ac1b8e7cb4cf6a35b6d485fd55775b.js	/^var dir_53ac1b8e7cb4cf6a35b6d485fd55775b =$/;"	v
dir_5feeefd5aff41c940a705f28e2f7b4d1	doc/html/dir_5feeefd5aff41c940a705f28e2f7b4d1.js	/^var dir_5feeefd5aff41c940a705f28e2f7b4d1 =$/;"	v
dir_632d0589b82df931c46f0fd2ca768715	doc/html/dir_632d0589b82df931c46f0fd2ca768715.js	/^var dir_632d0589b82df931c46f0fd2ca768715 =$/;"	v
dir_6b93e9efbe231040aa932a74170c7ed6	doc/html/dir_6b93e9efbe231040aa932a74170c7ed6.js	/^var dir_6b93e9efbe231040aa932a74170c7ed6 =$/;"	v
dir_6e85067a9f65d8721eb9d0ae7e3b8b02	doc/html/dir_6e85067a9f65d8721eb9d0ae7e3b8b02.js	/^var dir_6e85067a9f65d8721eb9d0ae7e3b8b02 =$/;"	v
dir_6f335e227b6f4587f8caa6f6971bdd1f	doc/html/dir_6f335e227b6f4587f8caa6f6971bdd1f.js	/^var dir_6f335e227b6f4587f8caa6f6971bdd1f =$/;"	v
dir_7538059cdcff22e7e3c1f1d8f09563f5	doc/html/dir_7538059cdcff22e7e3c1f1d8f09563f5.js	/^var dir_7538059cdcff22e7e3c1f1d8f09563f5 =$/;"	v
dir_76433691e77e9eb1884f75d25ab2ceb7	doc/html/dir_76433691e77e9eb1884f75d25ab2ceb7.js	/^var dir_76433691e77e9eb1884f75d25ab2ceb7 =$/;"	v
dir_78bd6ff603a4e7a886075eaa2bc7aa1d	doc/html/dir_78bd6ff603a4e7a886075eaa2bc7aa1d.js	/^var dir_78bd6ff603a4e7a886075eaa2bc7aa1d =$/;"	v
dir_7cef61e006ffab1102b624e0f68f12af	doc/html/dir_7cef61e006ffab1102b624e0f68f12af.js	/^var dir_7cef61e006ffab1102b624e0f68f12af =$/;"	v
dir_819ee5dbf222308ee69c59d4c1bb6efa	doc/html/dir_819ee5dbf222308ee69c59d4c1bb6efa.js	/^var dir_819ee5dbf222308ee69c59d4c1bb6efa =$/;"	v
dir_8adc25141e02ebb8b2a2682caaec5a6c	doc/html/dir_8adc25141e02ebb8b2a2682caaec5a6c.js	/^var dir_8adc25141e02ebb8b2a2682caaec5a6c =$/;"	v
dir_8fa1f859b2f210d40eee8c0b93403892	doc/html/dir_8fa1f859b2f210d40eee8c0b93403892.js	/^var dir_8fa1f859b2f210d40eee8c0b93403892 =$/;"	v
dir_941c1786eb1aa1d366208c95a3435d32	doc/html/dir_941c1786eb1aa1d366208c95a3435d32.js	/^var dir_941c1786eb1aa1d366208c95a3435d32 =$/;"	v
dir_97fcdfbdeedbfe8fea1533b76877713c	doc/html/dir_97fcdfbdeedbfe8fea1533b76877713c.js	/^var dir_97fcdfbdeedbfe8fea1533b76877713c =$/;"	v
dir_9b844149ba6d7058420c6a91bd5802cd	doc/html/dir_9b844149ba6d7058420c6a91bd5802cd.js	/^var dir_9b844149ba6d7058420c6a91bd5802cd =$/;"	v
dir_9cf2f5a20d4216a00ddbaafe1985cc3f	doc/html/dir_9cf2f5a20d4216a00ddbaafe1985cc3f.js	/^var dir_9cf2f5a20d4216a00ddbaafe1985cc3f =$/;"	v
dir_a46eddeb623ec0e49e82572f668574ce	doc/html/dir_a46eddeb623ec0e49e82572f668574ce.js	/^var dir_a46eddeb623ec0e49e82572f668574ce =$/;"	v
dir_b7013225dcc7d0a6522e73cde7f45cc1	doc/html/dir_b7013225dcc7d0a6522e73cde7f45cc1.js	/^var dir_b7013225dcc7d0a6522e73cde7f45cc1 =$/;"	v
dir_b96ec28c57991c70ca3fe794ec6dea2d	doc/html/dir_b96ec28c57991c70ca3fe794ec6dea2d.js	/^var dir_b96ec28c57991c70ca3fe794ec6dea2d =$/;"	v
dir_bb6dc18ce3effbc13de7245017d598a9	doc/html/dir_bb6dc18ce3effbc13de7245017d598a9.js	/^var dir_bb6dc18ce3effbc13de7245017d598a9 =$/;"	v
dir_bd6308583a59b667b7c3bf18085fc557	doc/html/dir_bd6308583a59b667b7c3bf18085fc557.js	/^var dir_bd6308583a59b667b7c3bf18085fc557 =$/;"	v
dir_bedba83ae136e8d2cdd7f7d78a788823	doc/html/dir_bedba83ae136e8d2cdd7f7d78a788823.js	/^var dir_bedba83ae136e8d2cdd7f7d78a788823 =$/;"	v
dir_c71ce13486d53e237b3d6327ea865ee8	doc/html/dir_c71ce13486d53e237b3d6327ea865ee8.js	/^var dir_c71ce13486d53e237b3d6327ea865ee8 =$/;"	v
dir_c85daa479f1bda18639ed32774ca9257	doc/html/dir_c85daa479f1bda18639ed32774ca9257.js	/^var dir_c85daa479f1bda18639ed32774ca9257 =$/;"	v
dir_cb499c4cc22744134db869a9eb142e51	doc/html/dir_cb499c4cc22744134db869a9eb142e51.js	/^var dir_cb499c4cc22744134db869a9eb142e51 =$/;"	v
dir_cf7c12eb188b066a47dd4501c72ce69e	doc/html/dir_cf7c12eb188b066a47dd4501c72ce69e.js	/^var dir_cf7c12eb188b066a47dd4501c72ce69e =$/;"	v
dir_d285ad54adf05f3c92ef90a6d99a8da9	doc/html/dir_d285ad54adf05f3c92ef90a6d99a8da9.js	/^var dir_d285ad54adf05f3c92ef90a6d99a8da9 =$/;"	v
dir_d77c21bb48471e8bb4b4c55b65f4558b	doc/html/dir_d77c21bb48471e8bb4b4c55b65f4558b.js	/^var dir_d77c21bb48471e8bb4b4c55b65f4558b =$/;"	v
dir_d9c295ee68a7ce9d9f516b0a75440cd9	doc/html/dir_d9c295ee68a7ce9d9f516b0a75440cd9.js	/^var dir_d9c295ee68a7ce9d9f516b0a75440cd9 =$/;"	v
dir_e2a8f84382fbd5fbf8d354e6600a5cc7	doc/html/dir_e2a8f84382fbd5fbf8d354e6600a5cc7.js	/^var dir_e2a8f84382fbd5fbf8d354e6600a5cc7 =$/;"	v
dir_e48b3836b4d643c4df50382a8cad09f0	doc/html/dir_e48b3836b4d643c4df50382a8cad09f0.js	/^var dir_e48b3836b4d643c4df50382a8cad09f0 =$/;"	v
dir_e8f682ed1d0bb9523fd3c2d0b01524b6	doc/html/dir_e8f682ed1d0bb9523fd3c2d0b01524b6.js	/^var dir_e8f682ed1d0bb9523fd3c2d0b01524b6 =$/;"	v
dir_fbf7e5f07368d25b39c492563af5539e	doc/html/dir_fbf7e5f07368d25b39c492563af5539e.js	/^var dir_fbf7e5f07368d25b39c492563af5539e =$/;"	v
disconnect	rplidar_ros/sdk/src/rplidar_driver.cpp	/^void RPlidarDriverSerialImpl::disconnect()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
dist_c	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    double dist_c[5] = {0.082613, 0.043275, 0.002486, -0.000823, 0.0};$/;"	m	class:autocar::vision_mul::armor_detect_node
dist_coeffs	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat dist_coeffs;$/;"	m	class:autocar::vision_mul::armor_detect_node
dist_coeffs	vision_unit/include/vision_unit/detect_factory/vision_param.h	/^  cv::Mat dist_coeffs;$/;"	m	class:autocar::vision_mul::vision_param
distance	vision_unit/src/detect_factory/image_utility.cpp	/^double distance(T x1, T y1, T x2, T y2)$/;"	f	namespace:autocar::vision_mul
distance	vision_unit/src/detect_factory/image_utility.cpp	/^double distance(const cv::Point_<T> &point1, const cv::Point_<T> &point2)$/;"	f	namespace:autocar::vision_mul
distance_angle_1	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   distance_angle_1; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_angle_2	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   distance_angle_2; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_q2	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   distance_q2;$/;"	m	struct:_rplidar_response_measurement_node_t
draw_circle	vision_unit/src/detect_factory/draw.cpp	/^void draw_circle(const cv::Mat &img, const cv::Point &center, int radius, const cv::Scalar &color, int thickness)$/;"	f
draw_rotated_rect	vision_unit/src/detect_factory/draw.cpp	/^void draw_rotated_rect(const cv::Mat &img, const cv::RotatedRect &rect, const cv::Scalar &color, int thickness)$/;"	f
draw_rotated_rects	vision_unit/src/detect_factory/draw.cpp	/^void draw_rotated_rects(const cv::Mat &img, const std::vector<cv::RotatedRect> &rects, const cv::Scalar &color, int thickness, bool tab, const cv::Scalar &text_color)$/;"	f
drive_mode	logical_core/src/logical_core_node.cpp	/^    AutoDrive drive_mode;$/;"	m	class:Brain	file:
end	serial_comm/include/comm_read.h	/^  uint8_t end;$/;"	m	struct:autocar::serial_mul::__anon2
end	serial_comm/include/comm_write.h	/^    uint8_t end;$/;"	m	struct:autocar::serial_mul::__anon1
enum-members	doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"><\/a>$/;"	a
enum-members	doc/html/namespaceDLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"><\/a>$/;"	a
error_code	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  error_code;$/;"	m	struct:_rplidar_response_device_health_t
expandNode	doc/html/navtree.js	/^function expandNode(o, node, imm, showRoot)$/;"	f
express_sample_duration_us	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  express_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
fd	serial_comm/include/comm_read.h	/^  int fd;$/;"	m	class:autocar::serial_mul::comm_read
fd	serial_comm/include/comm_write.h	/^  int fd;$/;"	m	class:autocar::serial_mul::comm_write
files	doc/html/dir_178510db1be2a7db789ad3a16c560bb0.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_1ce5266766058a56db2573afb763b0aa.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_2c95bba08f7f326697602ead8870d96e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_320fe6d286df73fc981311a902a07d31.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_39903b13293b03099f869299802630f2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_3cff172a548866d15f45a5d74df3690d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_53ac1b8e7cb4cf6a35b6d485fd55775b.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_6b93e9efbe231040aa932a74170c7ed6.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_6e85067a9f65d8721eb9d0ae7e3b8b02.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_6f335e227b6f4587f8caa6f6971bdd1f.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_7538059cdcff22e7e3c1f1d8f09563f5.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_78bd6ff603a4e7a886075eaa2bc7aa1d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_7cef61e006ffab1102b624e0f68f12af.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_819ee5dbf222308ee69c59d4c1bb6efa.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_97fcdfbdeedbfe8fea1533b76877713c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_9b844149ba6d7058420c6a91bd5802cd.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_a46eddeb623ec0e49e82572f668574ce.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_b7013225dcc7d0a6522e73cde7f45cc1.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_b96ec28c57991c70ca3fe794ec6dea2d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_bedba83ae136e8d2cdd7f7d78a788823.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_c71ce13486d53e237b3d6327ea865ee8.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_cb499c4cc22744134db869a9eb142e51.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_cf7c12eb188b066a47dd4501c72ce69e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_d285ad54adf05f3c92ef90a6d99a8da9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_d77c21bb48471e8bb4b4c55b65f4558b.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_d9c295ee68a7ce9d9f516b0a75440cd9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_e2a8f84382fbd5fbf8d354e6600a5cc7.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_e48b3836b4d643c4df50382a8cad09f0.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_fbf7e5f07368d25b39c492563af5539e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/files.js	/^var files =$/;"	v
fill_patrol_list	logical_core/src/logical_core_node.cpp	/^    void fill_patrol_list()$/;"	f	class:Brain
filter_by_features	vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<armor_info> armor_detecter::filter_by_features(std::vector<armor_info> &armors)$/;"	f	class:autocar::vision_mul::armor_detecter
filter_lights	vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<cv::RotatedRect> armor_detecter::filter_lights(const std::vector<cv::RotatedRect> &lights, float thresh_max_angle, float thresh_min_area)$/;"	f	class:autocar::vision_mul::armor_detecter
find_contours	vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<std::vector<cv::Point>> armor_detecter::find_contours(const cv::Mat &binary)$/;"	f	class:autocar::vision_mul::armor_detecter
firmware_version	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  firmware_version;$/;"	m	struct:_rplidar_response_device_info_t
flag	serial_comm/include/comm_read.h	/^  uint8_t flag;$/;"	m	struct:autocar::serial_mul::__anon2
flush	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
for_each	vision_unit/src/detect_factory/image_utility.cpp	/^void for_each(const cv::RotatedRect &rect, const std::function<void(int, int)> &func, int xstep, int ystep)$/;"	f	namespace:autocar::vision_mul
for_each	vision_unit/src/detect_factory/image_utility.cpp	/^void for_each(const cv::RotatedRect &rect, float xmin, float ymin, float xmax, float ymax, const std::function<void(int, int)> &func, int xstep, int ystep)$/;"	f	namespace:autocar::vision_mul
forceUnlock	rplidar_ros/sdk/src/hal/locker.h	/^    void forceUnlock() {$/;"	f	class:rp::hal::AutoLocker
forward_back	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    bool forward_back = true;$/;"	m	class:autocar::vision_mul::armor_detect_node
friends	doc/html/classDBoW2_1_1BowVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classDBoW2_1_1FeatureVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classDBoW2_1_1QueryResults.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classcamodocal_1_1CataCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
func-members	doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
functions_dup	doc/html/functions_dup.js	/^var functions_dup =$/;"	v
functions_func	doc/html/functions_func.js	/^var functions_func =$/;"	v
fusionLidarCam	vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^void VisionLidarFusion::fusionLidarCam(const vision_unit::transformed_scanConstPtr transformed_scan)$/;"	f	class:VisionLidarFusion
gen_sample	vision_unit/src/detect_factory/labeler.cpp	/^void labeler::gen_sample(const cv::Mat &image, std::vector<armor_info> armors) {$/;"	f	class:autocar::vision_mul::labeler
getCameraGoal	logical_core/src/logical_core_node.cpp	/^    void getCameraGoal(const move_base_msgs::MoveBaseGoal::ConstPtr &msg)$/;"	f	class:Brain
getData	doc/html/navtree.js	/^function getData(varName)$/;"	f
getData	rplidar_ros/sdk/src/hal/thread.h	/^    void *getData() { return _data;}$/;"	f	class:rp::hal::Thread
getDeviceInfo	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getDeviceInfo(rplidar_response_device_info_t & info, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getFrequency	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getFrequency(bool inExpressMode, size_t count, float & frequency, bool & is4kmode)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getHDTimer	rplidar_ros/sdk/src/arch/win32/timer.cpp	/^_u32 getHDTimer()$/;"	f	namespace:rp::arch
getHandle	rplidar_ros/sdk/src/hal/thread.h	/^    _word_size_t getHandle(){ return _handle;}$/;"	f	class:rp::hal::Thread
getHealth	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getHealth(rplidar_response_device_health_t & healthinfo, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getLockHandle	rplidar_ros/sdk/src/hal/locker.h	/^    HANDLE getLockHandle()$/;"	f	class:rp::hal::Locker
getLockHandle	rplidar_ros/sdk/src/hal/locker.h	/^    pthread_mutex_t *getLockHandle()$/;"	f	class:rp::hal::Locker
getNode	doc/html/navtree.js	/^function getNode(o, po)$/;"	f
getPriority	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getPriority	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getPriority	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getRPLIDARDeviceInfo	rplidar_ros/src/node.cpp	/^bool getRPLIDARDeviceInfo(RPlidarDriver * drv)$/;"	f
getRcDegree	vision_unit/src/detect_factory/image_utility.cpp	/^double getRcDegree(const cv::RotatedRect &box)$/;"	f	namespace:autocar::vision_mul
getSampleDuration_uS	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getSampleDuration_uS(rplidar_response_sample_rate_t & rateInfo, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getScript	doc/html/navtree.js	/^function getScript(scriptName,func,show)$/;"	f
getTermBaudBitmap	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^_u32 raw_serial::getTermBaudBitmap(_u32 baud)$/;"	f	class:rp::arch::net::raw_serial
getTermBaudBitmap	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^_u32 raw_serial::getTermBaudBitmap(_u32 baud)$/;"	f	class:rp::arch::net::raw_serial
getXPos	doc/html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	doc/html/search/search.js	/^function getYPos(item)$/;"	f
get_armor	vision_unit/src/detect_factory/armor_detect.cpp	/^armor_info* armor_detecter::get_armor()$/;"	f	class:autocar::vision_mul::armor_detecter
get_armor	vision_unit/src/detect_factory/armor_detect_node.cpp	/^armor_info* armor_detect_node::get_armor()$/;"	f	class:autocar::vision_mul::armor_detect_node
get_camera_num	vision_unit/src/detect_factory/armor_detect_node.cpp	/^bool armor_detect_node::get_camera_num()$/;"	f	class:autocar::vision_mul::armor_detect_node
get_linear_parameters	vision_unit/src/detect_factory/image_utility.cpp	/^std::pair<double, double> get_linear_parameters(T point1, T point2)$/;"	f	namespace:autocar::vision_mul
get_linear_parameters	vision_unit/src/detect_factory/image_utility.cpp	/^std::pair<double, double> get_linear_parameters(T x1, T y1, T x2, T y2)$/;"	f	namespace:autocar::vision_mul
get_linear_x	vision_unit/src/detect_factory/image_utility.cpp	/^T get_linear_x(double coefficient, double intercept, T y)$/;"	f	namespace:autocar::vision_mul
get_linear_y	vision_unit/src/detect_factory/image_utility.cpp	/^T get_linear_y(double coefficient, double intercept, T x)$/;"	f	namespace:autocar::vision_mul
get_rotate	tf_tree/src/tf_factory.cpp	/^tf::Quaternion tf_factory::get_rotate()$/;"	f	class:autocar::tf_mul::tf_factory
get_rotate_matrix	tf_tree/src/tf_param.cpp	/^cv::Mat tf_param::get_rotate_matrix()$/;"	f	class:autocar::tf_mul::tf_param
get_transf	tf_tree/src/tf_factory.cpp	/^tf::Vector3 tf_factory::get_transf()$/;"	f	class:autocar::tf_mul::tf_factory
get_transf_matrix	tf_tree/src/tf_param.cpp	/^cv::Mat tf_param::get_transf_matrix()$/;"	f	class:autocar::tf_mul::tf_param
getms	rplidar_ros/sdk/src/arch/linux/timer.h	57;"	d
getms	rplidar_ros/sdk/src/arch/macOS/timer.h	57;"	d
getms	rplidar_ros/sdk/src/arch/win32/timer.h	46;"	d
getus	rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^_u64 getus()$/;"	f	namespace:rp::arch
glowEffect	doc/html/navtree.js	/^function glowEffect(n,duration)$/;"	f
goal	logical_core/src/logical_core_node.cpp	/^    move_base_msgs::MoveBaseGoal goal;$/;"	m	class:Brain	file:
goal	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    move_base_msgs::MoveBaseGoal goal;$/;"	m	class:autocar::vision_mul::armor_detect_node
goal_pose	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    move_base_msgs::MoveBaseGoal goal_pose;$/;"	m	class:autocar::vision_mul::armor_detect_node
gotoAnchor	doc/html/navtree.js	/^function gotoAnchor(anchor,aname,updateLocation)$/;"	f
gotoNode	doc/html/navtree.js	/^function gotoNode(o,subIndex,root,hash,relpath)$/;"	f
grabScanData	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::grabScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
hal	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	rplidar_ros/sdk/src/hal/event.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	rplidar_ros/sdk/src/hal/locker.h	/^namespace rp{ namespace hal{ $/;"	n	namespace:rp
hal	rplidar_ros/sdk/src/hal/thread.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hardware_version	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   hardware_version;$/;"	m	struct:_rplidar_response_device_info_t
hashUrl	doc/html/navtree.js	/^function hashUrl()$/;"	f
hashValue	doc/html/navtree.js	/^function hashValue()$/;"	f
hierarchy	doc/html/hierarchy.js	/^var hierarchy =$/;"	v
highlightAnchor	doc/html/navtree.js	/^function highlightAnchor()$/;"	f
highlight_blue_or_red	vision_unit/src/detect_factory/armor_detect.cpp	/^cv::Mat armor_detecter::highlight_blue_or_red(const cv::Mat &image, bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
if_detected_armor	vision_unit/src/detect_factory/armor_detect_node.cpp	/^bool armor_detect_node::if_detected_armor()$/;"	f	class:autocar::vision_mul::armor_detect_node
if_less_equal	vision_unit/include/vision_unit/detect_factory/image_utility.h	9;"	d
if_more_equal	vision_unit/include/vision_unit/detect_factory/image_utility.h	10;"	d
if_more_swap	vision_unit/include/vision_unit/detect_factory/image_utility.h	11;"	d
img_dir	vision_unit/include/vision_unit/detect_factory/labeler.h	/^        std::string img_dir;$/;"	m	class:autocar::vision_mul::labeler
img_p	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    std::vector<cv::Point2f> img_p;$/;"	m	class:autocar::vision_mul::armor_detect_node
img_points	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat img_points;$/;"	m	class:autocar::vision_mul::armor_detect_node
imshowd	vision_unit/src/detect_factory/draw.cpp	/^void imshowd(const cv::String &winname, const cv::Mat &img)$/;"	f
inherited	doc/html/classautocar_1_1serial__mul_1_1serial__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classautocar_1_1tf__mul_1_1tf__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classautocar_1_1vision__mul_1_1vision__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1CataCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
init	rplidar_ros/sdk/src/hal/locker.h	/^    void    init()$/;"	f	class:rp::hal::Locker
initNavTree	doc/html/navtree.js	/^function initNavTree(toroot,relpath)$/;"	f
initResizable	doc/html/resize.js	/^function initResizable()$/;"	f
init_data	console/src/console.cpp	/^void init_data()$/;"	f
init_search	doc/html/search/search.js	/^function init_search()$/;"	f
init_yaw	serial_comm/include/comm_read.h	/^  int16_t init_yaw;$/;"	m	class:autocar::serial_mul::comm_read
int16_t	rplidar_ros/sdk/include/rptypes.h	/^typedef __int16           int16_t;$/;"	t
int32_t	rplidar_ros/sdk/include/rptypes.h	/^typedef __int32           int32_t;$/;"	t
int64_t	rplidar_ros/sdk/include/rptypes.h	/^typedef __int64           int64_t;$/;"	t
int8_t	rplidar_ros/sdk/include/rptypes.h	/^typedef signed   char     int8_t;$/;"	t
isConnected	rplidar_ros/sdk/src/rplidar_driver.cpp	/^bool RPlidarDriverSerialImpl::isConnected()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
isOpened	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    virtual bool isOpened()$/;"	f	class:rp::hal::serial_rxtx
join	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
kbhit	console/src/console.cpp	/^void kbhit()  $/;"	f
l00001	doc/html/BRIEF_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#ifndef __D_BRIEF__<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#define __D_BRIEF__<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;boost\/dynamic_bitset.hpp&gt;<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="namespaceDVision.html">   36<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDVision.html">DVision<\/a> {<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDVision_1_1BRIEF.html">BRIEF<\/a><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;{<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">   44<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> boost::dynamic_bitset&lt;&gt; <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">bitset<\/a>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">   47<\/a><\/span>&#160;  <span class="keyword">enum<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    RANDOM, <span class="comment">\/\/ random pairs (Calonder&#39;s original version)<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    RANDOM_CLOSE, <span class="comment">\/\/ random but close pairs (used in GalvezIROS11)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  };<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;  <a class="code" href="classDVision_1_1BRIEF.html#ac2324e7a976fad44f6bbe0ab6ac71051">BRIEF<\/a>(<span class="keywordtype">int<\/span> nbits = 256, <span class="keywordtype">int<\/span> patch_size = 48, <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a> type = RANDOM_CLOSE);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;  <span class="keyword">virtual<\/span> ~<a class="code" href="classDVision_1_1BRIEF.html">BRIEF<\/a>();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  <\/div><div class="line"><a name="l00068"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a836e6bfb9cb5516b4a35d4306c31a873">   68<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a836e6bfb9cb5516b4a35d4306c31a873">getDescriptorLengthInBits<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">m_bit_length<\/a>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  }<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  <\/div><div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a429931d892784a03fd672c1d5ed053e3">   76<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a> <a class="code" href="classDVision_1_1BRIEF.html#a429931d892784a03fd672c1d5ed053e3">getType<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDVision_1_1BRIEF.html#aaf2f0e2289b6924b32ecafb7b94bd9ff">m_type<\/a>;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;  }<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;  <\/div><div class="line"><a name="l00084"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#ae5b1a84fee8a3319628685030801491a">   84<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#ae5b1a84fee8a3319628685030801491a">getPatchSize<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a73fca9548bbf58380cacedc73e4b5c0b">m_patch_size<\/a>;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;  }<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;  <\/div><div class="line"><a name="l00099"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#aca31078b105868653a6acf98a30b1f2b">   99<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#aca31078b105868653a6acf98a30b1f2b">operator() <\/a>(<span class="keyword">const<\/span> cv::Mat &amp;image, <\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;points,<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    std::vector&lt;bitset&gt; &amp;descriptors,<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keywordtype">bool<\/span> treat_image = <span class="keyword">true<\/span>)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <a class="code" href="classDVision_1_1BRIEF.html#a8790bd315606da9fab9b796a4baf6c52">compute<\/a>(image, points, descriptors, treat_image);<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  }<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  <\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a8790bd315606da9fab9b796a4baf6c52">compute<\/a>(<span class="keyword">const<\/span> cv::Mat &amp;image,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;points,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    std::vector&lt;bitset&gt; &amp;descriptors,<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">bool<\/span> treat_image = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <\/div><div class="line"><a name="l00129"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#aaa011b79e2a32cb4e1398f513ec148d3">  129<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#aaa011b79e2a32cb4e1398f513ec148d3">exportPairs<\/a>(std::vector&lt;int&gt; &amp;x1, std::vector&lt;int&gt; &amp;y1,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    std::vector&lt;int&gt; &amp;x2, std::vector&lt;int&gt; &amp;y2)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    x1 = <a class="code" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">m_x1<\/a>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    y1 = m_y1;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    x2 = m_x2;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    y2 = m_y2;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;  }<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  <\/div><div class="line"><a name="l00145"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a019cd2ef2f6757da94fdb1f74d20b581">  145<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a019cd2ef2f6757da94fdb1f74d20b581">importPairs<\/a>(<span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;x1, <\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;y1, <span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;x2, <\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;y2)<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;  {<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <a class="code" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">m_x1<\/a> = x1;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    m_y1 = y1;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    m_x2 = x2;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    m_y2 = y2;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    <a class="code" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">m_bit_length<\/a> = x1.size();<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;  }<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;  <\/div><div class="line"><a name="l00162"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a78718071fcf2700e3a0cc304dd4e1dcc">  162<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a78718071fcf2700e3a0cc304dd4e1dcc">distance<\/a>(<span class="keyword">const<\/span> bitset &amp;a, <span class="keyword">const<\/span> bitset &amp;b)<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;  {<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    <span class="keywordflow">return<\/span> (a^b).count();<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;  }<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a421ccdcf5f526a09b843bfcc8227ae5c">generateTestPoints<\/a>();<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;  <\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">  178<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">m_bit_length<\/a>;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a73fca9548bbf58380cacedc73e4b5c0b">  181<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a73fca9548bbf58380cacedc73e4b5c0b">m_patch_size<\/a>;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;  <\/div><div class="line"><a name="l00184"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#aaf2f0e2289b6924b32ecafb7b94bd9ff">  184<\/a><\/span>&#160;  <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a> <a class="code" href="classDVision_1_1BRIEF.html#aaf2f0e2289b6924b32ecafb7b94bd9ff">m_type<\/a>;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">  187<\/a><\/span>&#160;  std::vector&lt;int&gt; <a class="code" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">m_x1<\/a>, m_x2;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;  std::vector&lt;int&gt; m_y1, m_y2;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;};<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;} <span class="comment">\/\/ namespace DVision<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div><div class="ttc" id="classDVision_1_1BRIEF_html_aaa011b79e2a32cb4e1398f513ec148d3"><div class="ttname"><a href="classDVision_1_1BRIEF.html#aaa011b79e2a32cb4e1398f513ec148d3">DVision::BRIEF::exportPairs<\/a><\/div><div class="ttdeci">void exportPairs(std::vector&lt; int &gt; &amp;x1, std::vector&lt; int &gt; &amp;y1, std::vector&lt; int &gt; &amp;x2, std::vector&lt; int &gt; &amp;y2) const <\/div><div class="ttdef"><b>Definition:<\/b> BRIEF.h:129<\/div><\/div>$/;"	a
l00001	doc/html/BowVector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_BOW_VECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_BOW_VECTOR__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html">   17<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">   20<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">   23<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">double<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">   26<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">   29<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;{<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  L1,<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  L2<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">   36<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;{<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  TF_IDF,<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  TF,<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  IDF,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  BINARY<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">   45<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  L1_NORM,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  L2_NORM,<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  CHI_SQUARE,<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  KL,<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  BHATTACHARYYA,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  DOT_PRODUCT<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;};<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1BowVector.html">   56<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a>: <\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">public<\/span> std::map&lt;WordId, WordValue&gt;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;{<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html#ac4da23e700adc4ee083d66b23ce86e90">BowVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html#a7210cac6ce006c7232f4d097faa338d0">~BowVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#a3ac92a805b252c93dc6535240d02df47">addWeight<\/a>(WordId <span class="keywordtype">id<\/span>, WordValue v);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#a5ddf10e444d10425e5bd3568dc7ffe5e">addIfNotExist<\/a>(WordId <span class="keywordtype">id<\/span>, WordValue v);<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#acd2dd34023e3053a4cc75d70c8b6ac13">normalize<\/a>(<a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> norm_type);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keyword">friend<\/span> std::ostream&amp; <a class="code" href="classDBoW2_1_1BowVector.html#a1a7d9ac0f9128538859adfea38453ae1">operator&lt;&lt;<\/a>(std::ostream &amp;out, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#af15c4fde81b89e0f76a00337883b6b4a">saveM<\/a>(<span class="keyword">const<\/span> std::string &amp;filename, <span class="keywordtype">size_t<\/span> W) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;};<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDBoW2_1_1BowVector_html_ac4da23e700adc4ee083d66b23ce86e90"><div class="ttname"><a href="classDBoW2_1_1BowVector.html#ac4da23e700adc4ee083d66b23ce86e90">DBoW2::BowVector::BowVector<\/a><\/div><div class="ttdeci">BowVector(void)<\/div><\/div>$/;"	a
l00001	doc/html/CameraCalibration_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CAMERACALIBRATION_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CAMERACALIBRATION_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/Camera.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CameraCalibration.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CameraCalibration.html">CameraCalibration<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <a class="code" href="classcamodocal_1_1CameraCalibration.html">CameraCalibration<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    CameraCalibration(Camera::ModelType modelType,<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;                      <span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;                      <span class="keyword">const<\/span> cv::Size&amp; imageSize,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;                      <span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                      <span class="keywordtype">float<\/span> squareSize);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> clear(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> addChessboardData(<span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt;&amp; corners);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">bool<\/span> calibrate(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">int<\/span> sampleCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point3f&gt; &gt;&amp; scenePoints(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point3f&gt; &gt;&amp; scenePoints(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    CameraPtr&amp; camera(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">const<\/span> CameraConstPtr camera(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    Eigen::Matrix2d&amp; measurementCovariance(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Matrix2d&amp; measurementCovariance(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    cv::Mat&amp; cameraPoses(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">const<\/span> cv::Mat&amp; cameraPoses(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">void<\/span> drawResults(std::vector&lt;cv::Mat&gt;&amp; images) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">void<\/span> writeParams(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">bool<\/span> writeChessboardData(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">bool<\/span> readChessboardData(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">void<\/span> setVerbose(<span class="keywordtype">bool<\/span> verbose);<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordtype">bool<\/span> calibrateHelper(CameraPtr&amp; camera,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                         std::vector&lt;cv::Mat&gt;&amp; rvecs, std::vector&lt;cv::Mat&gt;&amp; tvecs) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> optimize(CameraPtr&amp; camera,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                  std::vector&lt;cv::Mat&gt;&amp; rvecs, std::vector&lt;cv::Mat&gt;&amp; tvecs) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">void<\/span> readData(std::ifstream&amp; ifs, T&amp; data) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">void<\/span> writeData(std::ofstream&amp; ofs, T data) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    cv::Size m_boardSize;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keywordtype">float<\/span> m_squareSize;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    CameraPtr m_camera;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    cv::Mat m_cameraPoses;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point2f&gt; &gt; m_imagePoints;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point3f&gt; &gt; m_scenePoints;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    Eigen::Matrix2d m_measurementCovariance;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">bool<\/span> m_verbose;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;};<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;}<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CameraCalibration_html"><div class="ttname"><a href="classcamodocal_1_1CameraCalibration.html">camodocal::CameraCalibration<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraCalibration.h:11<\/div><\/div>$/;"	a
l00001	doc/html/CameraFactory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CAMERAFACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CAMERAFACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/Camera.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CameraFactory.html">   12<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CameraFactory.html">CameraFactory<\/a><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classcamodocal_1_1CameraFactory.html">CameraFactory<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CameraFactory&gt; instance(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    CameraPtr generateCamera(Camera::ModelType modelType,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                             <span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;                             cv::Size imageSize) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    CameraPtr generateCameraFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CameraFactory&gt; m_instance;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;};<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CameraFactory_html"><div class="ttname"><a href="classcamodocal_1_1CameraFactory.html">camodocal::CameraFactory<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraFactory.h:12<\/div><\/div>$/;"	a
l00001	doc/html/CameraPoseVisualization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/ColorRGBA.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;visualization_msgs\/Marker.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;visualization_msgs\/MarkerArray.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;Eigen\/Geometry&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classCameraPoseVisualization.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a> {<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    std::string m_marker_ns;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>(<span class="keywordtype">float<\/span> r, <span class="keywordtype">float<\/span> g, <span class="keywordtype">float<\/span> b, <span class="keywordtype">float<\/span> a);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keywordtype">void<\/span> setImageBoundaryColor(<span class="keywordtype">float<\/span> r, <span class="keywordtype">float<\/span> g, <span class="keywordtype">float<\/span> b, <span class="keywordtype">float<\/span> a=1.0);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="keywordtype">void<\/span> setOpticalCenterConnectorColor(<span class="keywordtype">float<\/span> r, <span class="keywordtype">float<\/span> g, <span class="keywordtype">float<\/span> b, <span class="keywordtype">float<\/span> a=1.0);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">void<\/span> setScale(<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">void<\/span> setLineWidth(<span class="keywordtype">double<\/span> width);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">void<\/span> add_pose(<span class="keyword">const<\/span> Eigen::Vector3d&amp; p, <span class="keyword">const<\/span> Eigen::Quaterniond&amp; q);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">void<\/span> reset();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keywordtype">void<\/span> publish_by(ros::Publisher&amp; pub, <span class="keyword">const<\/span> std_msgs::Header&amp; header);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> add_edge(<span class="keyword">const<\/span> Eigen::Vector3d&amp; p0, <span class="keyword">const<\/span> Eigen::Vector3d&amp; p1);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">void<\/span> add_loopedge(<span class="keyword">const<\/span> Eigen::Vector3d&amp; p0, <span class="keyword">const<\/span> Eigen::Vector3d&amp; p1);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::vector&lt;visualization_msgs::Marker&gt; m_markers;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    std_msgs::ColorRGBA m_image_boundary_color;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    std_msgs::ColorRGBA m_optical_center_connector_color;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">double<\/span> m_scale;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">double<\/span> m_line_width;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imlt;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imlb;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imrt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imrb;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d oc  ;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d lt0 ;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d lt1 ;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d lt2 ;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div><div class="ttc" id="classCameraPoseVisualization_html"><div class="ttname"><a href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraPoseVisualization.h:10<\/div><\/div>$/;"	a
l00001	doc/html/Camera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Camera.html">   12<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">enum<\/span> ModelType<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        KANNALA_BRANDT,<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        MEI,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        PINHOLE,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        SCARAMUZZA<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    };<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Camera_1_1Parameters.html">   24<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Parameters<\/a><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    {<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Parameters<\/a>(ModelType modelType);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        Parameters(ModelType modelType, <span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        ModelType&amp; modelType(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        std::string&amp; cameraName(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">int<\/span>&amp; imageWidth(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">int<\/span>&amp; imageHeight(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">int<\/span> nIntrinsics(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) = 0;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        ModelType m_modelType;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordtype">int<\/span> m_nIntrinsics;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        std::string m_cameraName;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">int<\/span> m_imageWidth;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">int<\/span> m_imageHeight;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    };<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">virtual<\/span> ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keyword">virtual<\/span> cv::Mat&amp; mask(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> cv::Mat&amp; mask(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints) = 0;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> estimateExtrinsics(<span class="keyword">const<\/span> std::vector&lt;cv::Point3f&gt;&amp; objectPoints,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt;&amp; imagePoints,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                                    cv::Mat&amp; rvec, cv::Mat&amp; tvec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/virtual void spaceToPlane(const Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="comment">\/\/                          Eigen::Matrix&lt;double,2,3&gt;&amp; J) const = 0;<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/virtual void initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, double fScale = 1.0) const = 0;<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keyword">virtual<\/span> cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;                                            <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;                                            cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                                            <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                                            cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameters) = 0;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameters) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="keyword">virtual<\/span> std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="classcamodocal_1_1Camera.html#a0c2a6b65d09940418cf3513b065f754a">reprojectionDist<\/a>(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P1, <span class="keyword">const<\/span> Eigen::Vector3d&amp; P2) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordtype">double<\/span> reprojectionError(<span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                             <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints,<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                             <span class="keyword">const<\/span> std::vector&lt;cv::Mat&gt;&amp; rvecs,<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;                             <span class="keyword">const<\/span> std::vector&lt;cv::Mat&gt;&amp; tvecs,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                             cv::OutputArray perViewErrors = cv::noArray()) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordtype">double<\/span> reprojectionError(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P,<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Quaterniond&amp; camera_q,<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Vector3d&amp; camera_t,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keywordtype">void<\/span> projectPoints(<span class="keyword">const<\/span> std::vector&lt;cv::Point3f&gt;&amp; objectPoints,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                       <span class="keyword">const<\/span> cv::Mat&amp; rvec,<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;                       <span class="keyword">const<\/span> cv::Mat&amp; tvec,<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;                       std::vector&lt;cv::Point2f&gt;&amp; imagePoints) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    cv::Mat m_mask;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;};<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;Camera&gt; CameraPtr;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const Camera&gt; CameraConstPtr;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;}<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1Camera_html_a0c2a6b65d09940418cf3513b065f754a"><div class="ttname"><a href="classcamodocal_1_1Camera.html#a0c2a6b65d09940418cf3513b065f754a">camodocal::Camera::reprojectionDist<\/a><\/div><div class="ttdeci">double reprojectionDist(const Eigen::Vector3d &amp;P1, const Eigen::Vector3d &amp;P2) const <\/div><div class="ttdoc">Calculates the reprojection distance between points. <\/div><\/div>$/;"	a
l00001	doc/html/CataCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CATACAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CATACAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CataCamera.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CataCamera_1_1Parameters.html">   21<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                   <span class="keywordtype">double<\/span> xi,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                   <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                   <span class="keywordtype">double<\/span> gamma1, <span class="keywordtype">double<\/span> gamma2, <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; xi(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; gamma1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; gamma2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; u0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; v0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> xi(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> k1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">double<\/span> k2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">double<\/span> p1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">double<\/span> p2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keywordtype">double<\/span> gamma1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <span class="keywordtype">double<\/span> gamma2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordtype">double<\/span> u0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">double<\/span> v0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_xi;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">double<\/span> m_k1;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">double<\/span> m_k2;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordtype">double<\/span> m_p1;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">double<\/span> m_p2;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">double<\/span> m_gamma1;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">double<\/span> m_gamma2;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">double<\/span> m_u0;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keywordtype">double<\/span> m_v0;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    };<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>();<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;               <span class="keywordtype">int<\/span> imageWidth, <span class="keywordtype">int<\/span> imageHeight,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;               <span class="keywordtype">double<\/span> xi, <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;               <span class="keywordtype">double<\/span> gamma1, <span class="keywordtype">double<\/span> gamma2, <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                      Eigen::Matrix&lt;double,2,3&gt;&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                    Eigen::Matrix2d&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_K11, m_inv_K13, m_inv_K22, m_inv_K23;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordtype">bool<\/span> m_noDistortion;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;};<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;CataCamera&gt; CataCameraPtr;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const CataCamera&gt; CataCameraConstPtr;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;CataCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                         <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                         <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                         Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;{<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    T P_w[3];<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    P_w[0] = T(P(0));<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    P_w[1] = T(P(1));<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    P_w[2] = T(P(2));<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    P_c[0] += t[0];<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    P_c[1] += t[1];<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    P_c[2] += t[2];<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    <span class="comment">\/\/ project 3D object point to the image plane<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    T xi = params[0];<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    T k1 = params[1];<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    T k2 = params[2];<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    T p1 = params[3];<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    T p2 = params[4];<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    T gamma1 = params[5];<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    T gamma2 = params[6];<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    T alpha = T(0); <span class="comment">\/\/cameraParams.alpha();<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    T u0 = params[7];<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    T v0 = params[8];<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="comment">\/\/ Transform to model plane<\/span><\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    T len = sqrt(P_c[0] * P_c[0] + P_c[1] * P_c[1] + P_c[2] * P_c[2]);<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    P_c[0] \/= len;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    P_c[1] \/= len;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    P_c[2] \/= len;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    T u = P_c[0] \/ (P_c[2] + xi);<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    T v = P_c[1] \/ (P_c[2] + xi);<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    T rho_sqr = u * u + v * v;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    T L = T(1.0) + k1 * rho_sqr + k2 * rho_sqr * rho_sqr;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    T du = T(2.0) * p1 * u * v + p2 * (rho_sqr + T(2.0) * u * u);<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    T dv = p1 * (rho_sqr + T(2.0) * v * v) + T(2.0) * p2 * u * v;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    u = L * u + du;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    v = L * v + dv;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    p(0) = gamma1 * (u + alpha * v) + u0;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    p(1) = gamma2 * v + v0;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;}<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;}<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CataCamera_html"><div class="ttname"><a href="classcamodocal_1_1CataCamera.html">camodocal::CataCamera<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CataCamera.h:18<\/div><\/div>$/;"	a
l00001	doc/html/ChessboardCorner_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CHESSBOARDCORNER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CHESSBOARDCORNER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">class <\/span>ChessboardCorner;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardCorner&gt; ChessboardCornerPtr;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1ChessboardCorner.html">   13<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1ChessboardCorner.html">ChessboardCorner<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classcamodocal_1_1ChessboardCorner.html">ChessboardCorner<\/a>() : row(0), column(0), needsNeighbor(<span class="keyword">true<\/span>), count(0) {}<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">float<\/span> meanDist(<span class="keywordtype">int<\/span> &amp;n)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        <span class="keywordtype">float<\/span> sum = 0;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        n = 0;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 4; ++i)<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        {<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;            <span class="keywordflow">if<\/span> (neighbors[i].<span class="keyword">get<\/span>())<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;            {<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                <span class="keywordtype">float<\/span> dx = neighbors[i]-&gt;pt.x - pt.x;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                <span class="keywordtype">float<\/span> dy = neighbors[i]-&gt;pt.y - pt.y;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                sum += sqrt(dx*dx + dy*dy);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                n++;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;            }<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        }<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordflow">return<\/span> sum \/ std::max(n, 1);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    }<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    cv::Point2f pt;                     <span class="comment">\/\/ X and y coordinates<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keywordtype">int<\/span> row;                            <span class="comment">\/\/ Row and column of the corner<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">int<\/span> column;                         <span class="comment">\/\/ in the found pattern<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">bool<\/span> needsNeighbor;                 <span class="comment">\/\/ Does the corner require a neighbor?<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">int<\/span> count;                          <span class="comment">\/\/ number of corner neighbors<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    ChessboardCornerPtr neighbors[4];   <span class="comment">\/\/ pointer to all corner neighbors<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;};<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;}<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1ChessboardCorner_html"><div class="ttname"><a href="classcamodocal_1_1ChessboardCorner.html">camodocal::ChessboardCorner<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ChessboardCorner.h:13<\/div><\/div>$/;"	a
l00001	doc/html/ChessboardQuad_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CHESSBOARDQUAD_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CHESSBOARDQUAD_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/chessboard\/ChessboardCorner.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">class <\/span>ChessboardQuad;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardQuad&gt; ChessboardQuadPtr;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1ChessboardQuad.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1ChessboardQuad.html">ChessboardQuad<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="classcamodocal_1_1ChessboardQuad.html">ChessboardQuad<\/a>() : count(0), group_idx(-1), edge_len(FLT_MAX), labeled(<span class="keyword">false<\/span>) {}<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">int<\/span> count;                         <span class="comment">\/\/ Number of quad neighbors<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">int<\/span> group_idx;                     <span class="comment">\/\/ Quad group ID<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">float<\/span> edge_len;                    <span class="comment">\/\/ Smallest side length^2<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    ChessboardCornerPtr corners[4];    <span class="comment">\/\/ Coordinates of quad corners<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ChessboardQuadPtr neighbors[4];    <span class="comment">\/\/ Pointers of quad neighbors<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keywordtype">bool<\/span> labeled;                      <span class="comment">\/\/ Has this corner been labeled?<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;};<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;}<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1ChessboardQuad_html"><div class="ttname"><a href="classcamodocal_1_1ChessboardQuad.html">camodocal::ChessboardQuad<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ChessboardQuad.h:14<\/div><\/div>$/;"	a
l00001	doc/html/Chessboard_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CHESSBOARD_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CHESSBOARD_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">\/\/ forward declarations<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">class <\/span>ChessboardCorner;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardCorner&gt; ChessboardCornerPtr;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">class <\/span>ChessboardQuad;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardQuad&gt; ChessboardQuadPtr;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Chessboard.html">   16<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Chessboard.html">Chessboard<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <a class="code" href="classcamodocal_1_1Chessboard.html">Chessboard<\/a>(cv::Size boardSize, cv::Mat&amp; image);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">void<\/span> findCorners(<span class="keywordtype">bool<\/span> useOpenCV = <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt;&amp; getCorners(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">bool<\/span> cornersFound(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keyword">const<\/span> cv::Mat&amp; getImage(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">const<\/span> cv::Mat&amp; getSketch(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">bool<\/span> findChessboardCorners(<span class="keyword">const<\/span> cv::Mat&amp; image,<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;                               <span class="keyword">const<\/span> cv::Size&amp; patternSize,<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;                               std::vector&lt;cv::Point2f&gt;&amp; corners,<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;                               <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> useOpenCV);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordtype">bool<\/span> findChessboardCornersImproved(<span class="keyword">const<\/span> cv::Mat&amp; image,<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;                                       <span class="keyword">const<\/span> cv::Size&amp; patternSize,<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;                                       std::vector&lt;cv::Point2f&gt;&amp; corners,<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;                                       <span class="keywordtype">int<\/span> flags);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> cleanFoundConnectedQuads(std::vector&lt;ChessboardQuadPtr&gt;&amp; quadGroup, cv::Size patternSize);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">void<\/span> findConnectedQuads(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                            std::vector&lt;ChessboardQuadPtr&gt;&amp; group,<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;                            <span class="keywordtype">int<\/span> group_idx, <span class="keywordtype">int<\/span> dilation);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/\/    int checkQuadGroup(std::vector&lt;ChessboardQuadPtr&gt;&amp; quadGroup,<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/\/                       std::vector&lt;ChessboardCornerPtr&gt;&amp; outCorners,<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">\/\/                       cv::Size patternSize);<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keywordtype">void<\/span> labelQuadGroup(std::vector&lt;ChessboardQuadPtr&gt;&amp; quad_group,<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;                        cv::Size patternSize, <span class="keywordtype">bool<\/span> firstRun);<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">void<\/span> findQuadNeighbors(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads, <span class="keywordtype">int<\/span> dilation);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">int<\/span> augmentBestRun(std::vector&lt;ChessboardQuadPtr&gt;&amp; candidateQuads, <span class="keywordtype">int<\/span> candidateDilation,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;                       std::vector&lt;ChessboardQuadPtr&gt;&amp; existingQuads, <span class="keywordtype">int<\/span> existingDilation);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordtype">void<\/span> generateQuads(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                       cv::Mat&amp; image, <span class="keywordtype">int<\/span> flags,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                       <span class="keywordtype">int<\/span> dilation, <span class="keywordtype">bool<\/span> firstRun);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">bool<\/span> checkQuadGroup(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;                        std::vector&lt;ChessboardCornerPtr&gt;&amp; corners,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;                        cv::Size patternSize);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">void<\/span> getQuadrangleHypotheses(<span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point&gt; &gt;&amp; contours,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                 std::vector&lt; std::pair&lt;float, int&gt; &gt;&amp; quads,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                                 <span class="keywordtype">int<\/span> classId) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordtype">bool<\/span> checkChessboard(<span class="keyword">const<\/span> cv::Mat&amp; image, cv::Size patternSize) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordtype">bool<\/span> checkBoardMonotony(std::vector&lt;ChessboardCornerPtr&gt;&amp; corners,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                            cv::Size patternSize);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordtype">bool<\/span> matchCorners(ChessboardQuadPtr&amp; quad1, <span class="keywordtype">int<\/span> corner1,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                      ChessboardQuadPtr&amp; quad2, <span class="keywordtype">int<\/span> corner2) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    cv::Mat mImage;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    cv::Mat mSketch;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    std::vector&lt;cv::Point2f&gt; mCorners;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    cv::Size mBoardSize;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">bool<\/span> mCornersFound;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;};<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;}<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1Chessboard_html"><div class="ttname"><a href="classcamodocal_1_1Chessboard.html">camodocal::Chessboard<\/a><\/div><div class="ttdef"><b>Definition:<\/b> Chessboard.h:16<\/div><\/div>$/;"	a
l00001	doc/html/CostFunctionFactory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COSTFUNCTIONFACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COSTFUNCTIONFACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/Camera.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceceres.html">ceres<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">class <\/span>CostFunction;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;}<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">enum<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;{<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    CAMERA_INTRINSICS =         1 &lt;&lt; 0,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    CAMERA_POSE =               1 &lt;&lt; 1,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    POINT_3D =                  1 &lt;&lt; 2,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    ODOMETRY_INTRINSICS =       1 &lt;&lt; 3,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ODOMETRY_3D_POSE =          1 &lt;&lt; 4,<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    ODOMETRY_6D_POSE =          1 &lt;&lt; 5,<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    CAMERA_ODOMETRY_TRANSFORM = 1 &lt;&lt; 6<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;};<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CostFunctionFactory.html">   28<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CostFunctionFactory.html">CostFunctionFactory<\/a><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;{<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <a class="code" href="classcamodocal_1_1CostFunctionFactory.html">CostFunctionFactory<\/a>();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CostFunctionFactory&gt; instance(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; observed_P,<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; observed_P,<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Matrix2d&amp; sqrtPrecisionMat,<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> optimize_cam_odo_z = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Matrix2d&amp; sqrtPrecisionMat,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> optimize_cam_odo_z = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_pos,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_att,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> optimize_cam_odo_z = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Quaterniond&amp; cam_odo_q,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; cam_odo_t,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_pos,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_att,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; cameraLeft,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;                                              <span class="keyword">const<\/span> CameraConstPtr&amp; cameraRight,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; observed_P,<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p_left,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p_right) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CostFunctionFactory&gt; m_instance;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;};<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;}<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CostFunctionFactory_html"><div class="ttname"><a href="classcamodocal_1_1CostFunctionFactory.html">camodocal::CostFunctionFactory<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CostFunctionFactory.h:28<\/div><\/div>$/;"	a
l00001	doc/html/DBoW2_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DBoW2.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Date: November 2011<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Description: Generic include file for the DBoW2 classes and<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> *   the specialized vocabularies and databases<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#ifndef __D_T_DBOW2__<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define __D_T_DBOW2__<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;{<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;}<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedVocabulary.h&quot;<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedDatabase.h&quot;<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#include &quot;FeatureVector.h&quot;<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#include &quot;QueryResults.h&quot;<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#include &quot;FBrief.h&quot;<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">DBoW2::TemplatedVocabulary&lt;DBoW2::FBrief::TDescriptor, DBoW2::FBrief&gt;<\/a> <\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">BriefVocabulary<\/a>;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">DBoW2::TemplatedDatabase&lt;DBoW2::FBrief::TDescriptor, DBoW2::FBrief&gt;<\/a> <\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">BriefDatabase<\/a>;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1TemplatedVocabulary_html"><div class="ttname"><a href="classDBoW2_1_1TemplatedVocabulary.html">DBoW2::TemplatedVocabulary<\/a><\/div><div class="ttdoc">Generic Vocabulary. <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedVocabulary.h:39<\/div><\/div>$/;"	a
l00001	doc/html/DException_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*  <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DException.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DUtils library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: October 6, 2009<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: general exception of the library<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#ifndef __D_EXCEPTION__<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#define __D_EXCEPTION__<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="namespaceDUtils.html">   20<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a> {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1DException.html">DException<\/a> :<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keyword">public<\/span> exception<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;{<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a2a7b85153de7d01a46606271c32254ce">   30<\/a><\/span>&#160;    <a class="code" href="classDUtils_1_1DException.html#a2a7b85153de7d01a46606271c32254ce">DException<\/a>(<span class="keywordtype">void<\/span>) throw(): m_message(&quot;<a class="code" href="namespaceDUtils.html">DUtils<\/a> exception&quot;){}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#aba7bdd9f0c908590dc48cfacb50efc56">   36<\/a><\/span>&#160;    <a class="code" href="classDUtils_1_1DException.html#aba7bdd9f0c908590dc48cfacb50efc56">DException<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *msg) <span class="keywordflow">throw<\/span>(): m_message(msg){}<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <\/div><div class="line"><a name="l00042"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a611f325f78d0e79b3bac5234b3f9ff99">   42<\/a><\/span>&#160;    <a class="code" href="classDUtils_1_1DException.html#a611f325f78d0e79b3bac5234b3f9ff99">DException<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;msg) <span class="keywordflow">throw<\/span>(): m_message(msg){}<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a12deb785f50e9cb2db3541ffb60a20bb">   47<\/a><\/span>&#160;    <span class="keyword">virtual<\/span> <a class="code" href="classDUtils_1_1DException.html#a12deb785f50e9cb2db3541ffb60a20bb">~DException<\/a>(<span class="keywordtype">void<\/span>) throw(){}<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a88d1b57954fbf20051dc33764e1c9435">   52<\/a><\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* <a class="code" href="classDUtils_1_1DException.html#a88d1b57954fbf20051dc33764e1c9435">what<\/a>() <span class="keyword">const<\/span> throw()<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    {<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordflow">return<\/span> m_message.c_str();<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    }<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#ab31e6216df2034af61edb32632006bfb">   59<\/a><\/span>&#160;    <span class="keywordtype">string<\/span> <a class="code" href="classDUtils_1_1DException.html#ab31e6216df2034af61edb32632006bfb">m_message<\/a>;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;};<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;}<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="ttc" id="classDUtils_1_1DException_html"><div class="ttname"><a href="classDUtils_1_1DException.html">DUtils::DException<\/a><\/div><div class="ttdoc">General exception. <\/div><div class="ttdef"><b>Definition:<\/b> DException.h:23<\/div><\/div>$/;"	a
l00001	doc/html/DLoopDetector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DLoopDetector.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Date: November 2011<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Description: Generic include file for the DLoopDetector classes and<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> *   the specialized loop detectors<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#ifndef __D_T_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#define __D_T_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html">   60<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;{<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;}<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="comment">\/\/#include &quot;DBoW2.h&quot;<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedLoopDetector.h&quot;<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/FBrief.h&quot;<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">DLoopDetector::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  &lt;FBrief::TDescriptor, <a class="code" href="classDBoW2_1_1FBrief.html">FBrief<\/a>&gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">BriefLoopDetector<\/a>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1FBrief_html"><div class="ttname"><a href="classDBoW2_1_1FBrief.html">DBoW2::FBrief<\/a><\/div><div class="ttdoc">Functions to manipulate BRIEF descriptors. <\/div><div class="ttdef"><b>Definition:<\/b> FBrief.h:23<\/div><\/div>$/;"	a
l00001	doc/html/DUtils_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DUtils.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DUtils library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: October 6, 2009<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: include file for including all the library functionalities<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#ifndef __D_UTILS__<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#define __D_UTILS__<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;{<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;}<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/\/ Exception<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &quot;DException.h&quot;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &quot;Timestamp.h&quot;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment">\/\/ Random numbers<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#include &quot;Random.h&quot;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceDUtils_html"><div class="ttname"><a href="namespaceDUtils.html">DUtils<\/a><\/div><div class="ttdoc">Several utilities for C++ programs. <\/div><div class="ttdef"><b>Definition:<\/b> DException.h:20<\/div><\/div>$/;"	a
l00001	doc/html/DVision_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DVision.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DVision library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: October 4, 2010<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: several functions for computer vision<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#ifndef __D_VISION__<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#define __D_VISION__<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDVision.html">DVision<\/a><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;}<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &quot;BRIEF.h&quot;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceDVision_html"><div class="ttname"><a href="namespaceDVision.html">DVision<\/a><\/div><div class="ttdoc">Computer vision functions. <\/div><div class="ttdef"><b>Definition:<\/b> BRIEF.h:36<\/div><\/div>$/;"	a
l00001	doc/html/EigenQuaternionParameterization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef EIGENQUATERNIONPARAMETERIZATION_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define EIGENQUATERNIONPARAMETERIZATION_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/local_parameterization.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1EigenQuaternionParameterization.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1EigenQuaternionParameterization.html">EigenQuaternionParameterization<\/a> : <span class="keyword">public<\/span> ceres::LocalParameterization<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">virtual<\/span> ~<a class="code" href="classcamodocal_1_1EigenQuaternionParameterization.html">EigenQuaternionParameterization<\/a>() {}<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Plus(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* x,<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;                      <span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* delta,<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;                      <span class="keywordtype">double<\/span>* x_plus_delta) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> ComputeJacobian(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* x,<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;                                 <span class="keywordtype">double<\/span>* jacobian) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> GlobalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 4; }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> LocalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 3; }<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> EigenQuaternionProduct(<span class="keyword">const<\/span> T z[4], <span class="keyword">const<\/span> T w[4], T zw[4]) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;};<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;EigenQuaternionParameterization::EigenQuaternionProduct(<span class="keyword">const<\/span> T z[4], <span class="keyword">const<\/span> T w[4], T zw[4])<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    zw[0] = z[3] * w[0] + z[0] * w[3] + z[1] * w[2] - z[2] * w[1];<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    zw[1] = z[3] * w[1] - z[0] * w[2] + z[1] * w[3] + z[2] * w[0];<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    zw[2] = z[3] * w[2] + z[0] * w[1] - z[1] * w[0] + z[2] * w[3];<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    zw[3] = z[3] * w[3] - z[0] * w[0] - z[1] * w[1] - z[2] * w[2];<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;}<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;}<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="ttc" id="classcamodocal_1_1EigenQuaternionParameterization_html"><div class="ttname"><a href="classcamodocal_1_1EigenQuaternionParameterization.html">camodocal::EigenQuaternionParameterization<\/a><\/div><div class="ttdef"><b>Definition:<\/b> EigenQuaternionParameterization.h:9<\/div><\/div>$/;"	a
l00001	doc/html/EigenUtils_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef EIGENUTILS_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define EIGENUTILS_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/gpl\/gpl.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">\/\/ Returns the 3D cross product skew symmetric matrix of a given 3D vector<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; skew(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; vec)<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keywordflow">return<\/span> (Eigen::Matrix&lt;T, 3, 3&gt;() &lt;&lt; T(0), -vec(2), vec(1),<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;                                        vec(2), T(0), -vec(0),<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;                                        -vec(1), vec(0), T(0)).finished();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;}<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">typename<\/span> Eigen::MatrixBase&lt;Derived&gt;::PlainObject sqrtm(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt;&amp; A)<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;{<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    Eigen::SelfAdjointEigenSolver&lt;typename Derived::PlainObject&gt; es(A);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordflow">return<\/span> es.operatorSqrt();<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;}<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; AngleAxisToRotationMatrix(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec)<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    T angle = rvec.norm();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keywordflow">if<\/span> (angle == T(0))<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    {<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordflow">return<\/span> Eigen::Matrix&lt;T, 3, 3&gt;::Identity();<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    }<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; axis;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    axis = rvec.normalized();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    rmat = Eigen::AngleAxis&lt;T&gt;(angle, axis);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordflow">return<\/span> rmat;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;}<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;Eigen::Quaternion&lt;T&gt; AngleAxisToQuaternion(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec)<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;{<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat = AngleAxisToRotationMatrix&lt;T&gt;(rvec);<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordflow">return<\/span> Eigen::Quaternion&lt;T&gt;(rmat);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;}<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keywordtype">void<\/span> AngleAxisToQuaternion(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec, T* q)<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;{<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    Eigen::Quaternion&lt;T&gt; quat = AngleAxisToQuaternion&lt;T&gt;(rvec);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    q[0] = quat.x();<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    q[1] = quat.y();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    q[2] = quat.z();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    q[3] = quat.w();<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;}<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;Eigen::Matrix&lt;T, 3, 1&gt; RotationToAngleAxis(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt; &amp; rmat)<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;{<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    Eigen::AngleAxis&lt;T&gt; angleaxis; <\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    angleaxis.fromRotationMatrix(rmat); <\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordflow">return<\/span> angleaxis.angle() * angleaxis.axis(); <\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;}<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keywordtype">void<\/span> QuaternionToAngleAxis(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec)<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;{<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    Eigen::Quaternion&lt;T&gt; quat(q[3], q[0], q[1], q[2]);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat = quat.toRotationMatrix();<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    Eigen::AngleAxis&lt;T&gt; angleaxis;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    angleaxis.fromRotationMatrix(rmat);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    rvec = angleaxis.angle() * angleaxis.axis();<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; QuaternionToRotation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q)<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;{<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    T R[9];<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    ceres::QuaternionToRotation(q, R);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 3; ++i)<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    {<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> j = 0; j &lt; 3; ++j)<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        {<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            rmat(i,j) = R[i * 3 + j];<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        }<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    }<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keywordflow">return<\/span> rmat;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;}<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="keywordtype">void<\/span> QuaternionToRotation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, T* rot)<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;{<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    ceres::QuaternionToRotation(q, rot);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;}<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;Eigen::Matrix&lt;T,4,4&gt; QuaternionMultMatLeft(<span class="keyword">const<\/span> Eigen::Quaternion&lt;T&gt;&amp; q)<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;{<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keywordflow">return<\/span> (Eigen::Matrix&lt;T,4,4&gt;() &lt;&lt; q.w(), -q.z(), q.y(), q.x(),<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                                      q.z(), q.w(), -q.x(), q.y(),<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                                      -q.y(), q.x(), q.w(), q.z(),<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                                      -q.x(), -q.y(), -q.z(), q.w()).finished();<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;}<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;Eigen::Matrix&lt;T,4,4&gt; QuaternionMultMatRight(<span class="keyword">const<\/span> Eigen::Quaternion&lt;T&gt;&amp; q)<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;{<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordflow">return<\/span> (Eigen::Matrix&lt;T,4,4&gt;() &lt;&lt; q.w(), q.z(), -q.y(), q.x(),<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                                      -q.z(), q.w(), q.x(), q.y(),<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                                      q.y(), -q.x(), q.w(), q.z(),<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                                      -q.x(), -q.y(), -q.z(), q.w()).finished();<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;}<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keywordtype">void<\/span> AngleAxisAndTranslationToScrew(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec,<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;                                    <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; tvec,<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                                    T&amp; theta, T&amp; d,<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                                    Eigen::Matrix&lt;T, 3, 1&gt;&amp; l,<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;                                    Eigen::Matrix&lt;T, 3, 1&gt;&amp; m)<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;{<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    theta = rvec.norm();<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <span class="keywordflow">if<\/span> (theta == 0)<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    {<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        l.setZero(); <\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        m.setZero(); <\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Warning: Undefined screw! Returned 0. &quot;<\/span> &lt;&lt; std::endl; <\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    }<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    l = rvec.normalized();<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = tvec;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    d = t.transpose() * l;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    <span class="comment">\/\/ point on screw axis - projection of origin on screw axis<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; c;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    c = 0.5 * (t - d * l + (1.0 \/ tan(theta \/ 2.0) * l).cross(t));<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    <span class="comment">\/\/ c and hence the screw axis is not defined if theta is either 0 or M_PI<\/span><\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    m = c.cross(l);<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;}<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; RPY2mat(T roll, T pitch, T yaw)<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;{<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; m;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    T cr = cos(roll);<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    T sr = sin(roll);<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    T cp = cos(pitch);<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    T sp = sin(pitch);<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    T cy = cos(yaw);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    T sy = sin(yaw);<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    m(0,0) = cy * cp;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    m(0,1) = cy * sp * sr - sy * cr;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    m(0,2) = cy * sp * cr + sy * sr;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    m(1,0) = sy * cp;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    m(1,1) = sy * sp * sr + cy * cr;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    m(1,2) = sy * sp * cr - cy * sr;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    m(2,0) = - sp;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    m(2,1) = cp * sr;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    m(2,2) = cp * cr;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="keywordflow">return<\/span> m; <\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;}<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="keywordtype">void<\/span> mat2RPY(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; m, T&amp; roll, T&amp; pitch, T&amp; yaw)<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;{<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    roll = atan2(m(2,1), m(2,2));<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    pitch = atan2(-m(2,0), sqrt(m(2,1) * m(2,1) + m(2,2) * m(2,2)));<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    yaw = atan2(m(1,0), m(0,0));<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;}<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt; homogeneousTransform(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; R, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; t)<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;{<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    Eigen::Matrix&lt;T, 4, 4&gt; H;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    H.setIdentity();<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    H.block(0,0,3,3) = R;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    H.block(0,3,3,1) = t;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="keywordflow">return<\/span> H;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;}<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt; poseWithCartesianTranslation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> p)<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;{<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    Eigen::Matrix&lt;T, 4, 4&gt; pose = Eigen::Matrix&lt;T, 4, 4&gt;::Identity();<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;    T rotation[9];<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;    ceres::QuaternionToRotation(q, rotation);<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 3; ++i)<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;    {<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> j = 0; j &lt; 3; ++j)<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;        {<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;            pose(i,j) = rotation[i * 3 + j];<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;        }<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;    }<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;    pose(0,3) = p[0];<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;    pose(1,3) = p[1];<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;    pose(2,3) = p[2];<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;    <span class="keywordflow">return<\/span> pose;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;}<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt; poseWithSphericalTranslation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> p, <span class="keyword">const<\/span> T scale = T(1.0))<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;{<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;    Eigen::Matrix&lt;T, 4, 4&gt; pose = Eigen::Matrix&lt;T, 4, 4&gt;::Identity();<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;    T rotation[9];<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;    ceres::QuaternionToRotation(q, rotation);<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 3; ++i)<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;    {<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> j = 0; j &lt; 3; ++j)<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;        {<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;            pose(i,j) = rotation[i * 3 + j];<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        }<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    }<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;    T theta = p[0];<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;    T phi = p[1];<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    pose(0,3) = sin(theta) * cos(phi) * scale;<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    pose(1,3) = sin(theta) * sin(phi) * scale;<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;    pose(2,3) = cos(theta) * scale;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;    <span class="keywordflow">return<\/span> pose;<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;}<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="comment">\/\/ Returns the Sampson error of a given essential matrix and 2 image points<\/span><\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;T sampsonError(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; E,<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p1,<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p2)<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;{<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Ex1 = E * p1;<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Etx2 = E.transpose() * p2;<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    T x2tEx1 = p2.dot(Ex1);<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;    <span class="comment">\/\/ compute Sampson error<\/span><\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    T err = square(x2tEx1) \/ (square(Ex1(0,0)) + square(Ex1(1,0)) + square(Etx2(0,0)) + square(Etx2(1,0)));<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;    <span class="keywordflow">return<\/span> err;<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;}<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<span class="comment">\/\/ Returns the Sampson error of a given rotation\/translation and 2 image points<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;T sampsonError(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; R,<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; t,<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p1,<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p2)<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;{<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <span class="comment">\/\/ construct essential matrix<\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; E = skew(t) * R;<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Ex1 = E * p1;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Etx2 = E.transpose() * p2;<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;    T x2tEx1 = p2.dot(Ex1);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;    <span class="comment">\/\/ compute Sampson error<\/span><\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    T err = square(x2tEx1) \/ (square(Ex1(0,0)) + square(Ex1(1,0)) + square(Etx2(0,0)) + square(Etx2(1,0)));<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keywordflow">return<\/span> err;<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;}<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<span class="comment">\/\/ Returns the Sampson error of a given rotation\/translation and 2 image points<\/span><\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;T sampsonError(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 4, 4&gt;&amp; H,<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p1,<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p2)<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;{<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; R = H.block(0, 0, 3, 3);<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = H.block(0, 3, 3, 1);<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;    <span class="keywordflow">return<\/span> sampsonError(R, t, p1, p2);<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;}<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;Eigen::Matrix&lt;T, 3, 1&gt;<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;transformPoint(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 4, 4&gt;&amp; H, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P)<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;{<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; P_trans = H.block(0, 0, 3, 3) * P + H.block(0, 3, 3, 1);<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;    <span class="keywordflow">return<\/span> P_trans;<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;}<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;estimate3DRigidTransform(<span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points1,<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;                         <span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points2)<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;{<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;    <span class="comment">\/\/ compute centroids<\/span><\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; c1, c2;<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;    c1.setZero(); c2.setZero();<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;    {<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;        c1 += points1.at(i);<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        c2 += points2.at(i);<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;    }<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;    c1 \/= points1.size();<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;    c2 \/= points1.size();<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; X(3, points1.size());<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; Y(3, points1.size());<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;    {<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;        X.col(i) = points1.at(i) - c1;<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;        Y.col(i) = points2.at(i) - c2;<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;    }<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; H = X * Y.transpose();<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    Eigen::JacobiSVD&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; svd(H, Eigen::ComputeFullU | Eigen::ComputeFullV);<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; U = svd.matrixU();<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; V = svd.matrixV();<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;    <span class="keywordflow">if<\/span> (U.determinant() * V.determinant() &lt; 0.0)<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;    {<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;        V.col(2) *= -1.0;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;    }<\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; R = V * U.transpose();<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = c2 - R * c1;<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;    <span class="keywordflow">return<\/span> homogeneousTransform(R, t);<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;}<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;<\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt;<\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;estimate3DRigidSimilarityTransform(<span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points1,<\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;                                   <span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points2)<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;{<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;    <span class="comment">\/\/ compute centroids<\/span><\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; c1, c2;<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    c1.setZero(); c2.setZero();<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    {<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;        c1 += points1.at(i);<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;        c2 += points2.at(i);<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;    }<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;    c1 \/= points1.size();<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;    c2 \/= points1.size();<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; X(3, points1.size());<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; Y(3, points1.size());<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    {<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;        X.col(i) = points1.at(i) - c1;<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;        Y.col(i) = points2.at(i) - c2;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;    }<\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; H = X * Y.transpose();<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;    Eigen::JacobiSVD&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; svd(H, Eigen::ComputeFullU | Eigen::ComputeFullV);<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; U = svd.matrixU();<\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; V = svd.matrixV();<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;    <span class="keywordflow">if<\/span> (U.determinant() * V.determinant() &lt; 0.0)<\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;    {<\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;        V.col(2) *= -1.0;<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;    }<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; R = V * U.transpose();<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt; rotatedPoints1(points1.size());<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;    {<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;        rotatedPoints1.at(i) = R * (points1.at(i) - c1);<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;    }<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;    <span class="keywordtype">double<\/span> sum_ss = 0.0, sum_tt = 0.0;<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;    {<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;        sum_ss += (points1.at(i) - c1).squaredNorm();<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;        sum_tt += (points2.at(i) - c2).dot(rotatedPoints1.at(i));<\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;    }<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;    <span class="keywordtype">double<\/span> scale = sum_tt \/ sum_ss;<\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; sR = scale * R;<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = c2 - sR * c1;<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;    <span class="keywordflow">return<\/span> homogeneousTransform(sR, t);<\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;}<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;<\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;}<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacecamodocal_html"><div class="ttname"><a href="namespacecamodocal.html">camodocal<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraCalibration.h:8<\/div><\/div>$/;"	a
l00001	doc/html/EquidistantCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef EQUIDISTANTCAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define EQUIDISTANTCAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1EquidistantCamera.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">   21<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                   <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> k3, <span class="keywordtype">double<\/span> k4, <span class="keywordtype">double<\/span> k5,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                   <span class="keywordtype">double<\/span> mu, <span class="keywordtype">double<\/span> mv,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                   <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k3(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k4(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k5(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; mu(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; mv(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; u0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; v0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">double<\/span> k2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> k3(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> k4(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">double<\/span> k5(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">double<\/span> mu(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">double<\/span> mv(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keywordtype">double<\/span> u0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <span class="keywordtype">double<\/span> v0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="comment">\/\/ projection<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordtype">double<\/span> m_k2;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_k3;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">double<\/span> m_k4;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">double<\/span> m_k5;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">double<\/span> m_mu;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">double<\/span> m_mv;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">double<\/span> m_u0;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">double<\/span> m_v0;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    };<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                      <span class="keywordtype">int<\/span> imageWidth, <span class="keywordtype">int<\/span> imageHeight,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                      <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> k3, <span class="keywordtype">double<\/span> k4, <span class="keywordtype">double<\/span> k5,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;                      <span class="keywordtype">double<\/span> mu, <span class="keywordtype">double<\/span> mv,<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;                      <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                      Eigen::Matrix&lt;double,2,3&gt;&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <span class="keyword">static<\/span> T r(T k2, T k3, T k4, T k5, T theta);<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    <span class="keywordtype">void<\/span> fitOddPoly(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; x, <span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; y,<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                    <span class="keywordtype">int<\/span> n, std::vector&lt;double&gt;&amp; coeffs) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordtype">void<\/span> backprojectSymmetric(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u,<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;                              <span class="keywordtype">double<\/span>&amp; theta, <span class="keywordtype">double<\/span>&amp; phi) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_K11, m_inv_K13, m_inv_K22, m_inv_K23;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;};<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;EquidistantCamera&gt; EquidistantCameraPtr;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const EquidistantCamera&gt; EquidistantCameraConstPtr;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;T<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;EquidistantCamera::r(T k2, T k3, T k4, T k5, T theta)<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;{<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    <span class="comment">\/\/ k1 = 1<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    <span class="keywordflow">return<\/span> theta +<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;           k2 * theta * theta * theta +<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;           k3 * theta * theta * theta * theta * theta +<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;           k4 * theta * theta * theta * theta * theta * theta * theta +<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;           k5 * theta * theta * theta * theta * theta * theta * theta * theta * theta;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;}<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;EquidistantCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                                <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;                                <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;                                Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;{<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    T P_w[3];<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    P_w[0] = T(P(0));<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    P_w[1] = T(P(1));<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    P_w[2] = T(P(2));<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    P_c[0] += t[0];<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    P_c[1] += t[1];<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    P_c[2] += t[2];<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="comment">\/\/ project 3D object point to the image plane;<\/span><\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    T k2 = params[0];<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    T k3 = params[1];<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    T k4 = params[2];<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    T k5 = params[3];<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    T mu = params[4];<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    T mv = params[5];<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    T u0 = params[6];<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    T v0 = params[7];<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    T len = sqrt(P_c[0] * P_c[0] + P_c[1] * P_c[1] + P_c[2] * P_c[2]);<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    T theta = acos(P_c[2] \/ len);<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    T phi = atan2(P_c[1], P_c[0]);<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    Eigen::Matrix&lt;T,2,1&gt; p_u = r(k2, k3, k4, k5, theta) * Eigen::Matrix&lt;T,2,1&gt;(cos(phi), sin(phi));<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    p(0) = mu * p_u(0) + u0;<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    p(1) = mv * p_u(1) + v0;<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;}<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;}<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1EquidistantCamera_html"><div class="ttname"><a href="classcamodocal_1_1EquidistantCamera.html">camodocal::EquidistantCamera<\/a><\/div><div class="ttdef"><b>Definition:<\/b> EquidistantCamera.h:18<\/div><\/div>$/;"	a
l00001	doc/html/FBrief_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_F_BRIEF__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_F_BRIEF__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;FClass.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;..\/DVision\/DVision.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1FBrief.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1FBrief.html">FBrief<\/a>: <span class="keyword">protected<\/span> <a class="code" href="classDBoW2_1_1FClass.html">FClass<\/a><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;{<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">typedef<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">DVision::BRIEF::bitset<\/a> TDescriptor;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> TDescriptor *pDescriptor;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#a60a0a5143f4362666bd1b4bbac69a780">meanValue<\/a>(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    TDescriptor &amp;mean);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#a4ad4e20b0126bfff17c67e55568671d5">distance<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;a, <span class="keyword">const<\/span> TDescriptor &amp;b);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  <span class="keyword">static<\/span> std::string <a class="code" href="classDBoW2_1_1FBrief.html#ad692682949e1254e0bdd4d4b8295210b">toString<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;a);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#addb2ce6ad66fbe1106dd5c267205fd26">fromString<\/a>(TDescriptor &amp;a, <span class="keyword">const<\/span> std::string &amp;s);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;  <\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#ac0f3eca8514bfcc4fecf19e794ccdaf4">toMat32F<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    cv::Mat &amp;mat);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;};<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1FBrief_html_ad692682949e1254e0bdd4d4b8295210b"><div class="ttname"><a href="classDBoW2_1_1FBrief.html#ad692682949e1254e0bdd4d4b8295210b">DBoW2::FBrief::toString<\/a><\/div><div class="ttdeci">static std::string toString(const TDescriptor &amp;a)<\/div><\/div>$/;"	a
l00001	doc/html/FClass_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_FCLASS__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_FCLASS__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1FClass.html">   25<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1FClass.html">FClass<\/a><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;{<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">class <\/span>TDescriptor;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> TDescriptor *pDescriptor;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  <\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> meanValue(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    TDescriptor &amp;mean) = 0;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">double<\/span> distance(<span class="keyword">const<\/span> TDescriptor &amp;a, <span class="keyword">const<\/span> TDescriptor &amp;b);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  <span class="keyword">static<\/span> std::string toString(<span class="keyword">const<\/span> TDescriptor &amp;a);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> fromString(TDescriptor &amp;a, <span class="keyword">const<\/span> std::string &amp;s);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> toMat32F(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    cv::Mat &amp;mat);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;};<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceDBoW2_html"><div class="ttname"><a href="namespaceDBoW2.html">DBoW2<\/a><\/div><div class="ttdoc">Includes all the data structures to manage vocabularies and image databases. <\/div><div class="ttdef"><b>Definition:<\/b> BowVector.h:17<\/div><\/div>$/;"	a
l00001	doc/html/FeatureVector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_FEATURE_VECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_FEATURE_VECTOR__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1FeatureVector.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>: <\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="keyword">public<\/span> std::map&lt;NodeId, std::vector&lt;unsigned int&gt; &gt;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;{<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  <a class="code" href="classDBoW2_1_1FeatureVector.html#a66c069d269c8c98dcf3ae39cbc6f861b">FeatureVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  <a class="code" href="classDBoW2_1_1FeatureVector.html#a44514a020719b7e5ac552332a9922bd9">~FeatureVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html#ae9554bfcbebc85439616de08f47f2238">addFeature<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span>, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_feature);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keyword">friend<\/span> std::ostream&amp; <a class="code" href="classDBoW2_1_1FeatureVector.html#a34aa65c93dc5f6be269610e3f238d9b1">operator&lt;&lt;<\/a>(std::ostream &amp;out, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;v);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;};<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1FeatureVector_html_a66c069d269c8c98dcf3ae39cbc6f861b"><div class="ttname"><a href="classDBoW2_1_1FeatureVector.html#a66c069d269c8c98dcf3ae39cbc6f861b">DBoW2::FeatureVector::FeatureVector<\/a><\/div><div class="ttdeci">FeatureVector(void)<\/div><\/div>$/;"	a
l00001	doc/html/PinholeCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef PINHOLECAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define PINHOLECAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1PinholeCamera.html">   13<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">   16<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;                   <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;                   <span class="keywordtype">double<\/span> fx, <span class="keywordtype">double<\/span> fy, <span class="keywordtype">double<\/span> cx, <span class="keywordtype">double<\/span> cy);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; fx(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; fy(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; cx(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; cy(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keywordtype">double<\/span> xi(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span> k1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span> k2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keywordtype">double<\/span> p1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span> p2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keywordtype">double<\/span> fx(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">double<\/span> fy(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> cx(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> cy(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">double<\/span> m_k1;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">double<\/span> m_k2;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">double<\/span> m_p1;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordtype">double<\/span> m_p2;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordtype">double<\/span> m_fx;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">double<\/span> m_fy;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordtype">double<\/span> m_cx;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_cy;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    };<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                  <span class="keywordtype">int<\/span> imageWidth, <span class="keywordtype">int<\/span> imageHeight,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                  <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                  <span class="keywordtype">double<\/span> fx, <span class="keywordtype">double<\/span> fy, <span class="keywordtype">double<\/span> cx, <span class="keywordtype">double<\/span> cy);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;                      Eigen::Matrix&lt;double,2,3&gt;&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u,<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                    Eigen::Matrix2d&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_K11, m_inv_K13, m_inv_K22, m_inv_K23;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <span class="keywordtype">bool<\/span> m_noDistortion;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;};<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;PinholeCamera&gt; PinholeCameraPtr;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const PinholeCamera&gt; PinholeCameraConstPtr;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;PinholeCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;                            <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;                            Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;{<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    T P_w[3];<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    P_w[0] = T(P(0));<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    P_w[1] = T(P(1));<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    P_w[2] = T(P(2));<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;    T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    P_c[0] += t[0];<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    P_c[1] += t[1];<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    P_c[2] += t[2];<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    <span class="comment">\/\/ project 3D object point to the image plane<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    T k1 = params[0];<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    T k2 = params[1];<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    T p1 = params[2];<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    T p2 = params[3];<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    T fx = params[4];<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    T fy = params[5];<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    T alpha = T(0); <span class="comment">\/\/cameraParams.alpha();<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    T cx = params[6];<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    T cy = params[7];<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <span class="comment">\/\/ Transform to model plane<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    T u = P_c[0] \/ P_c[2];<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    T v = P_c[1] \/ P_c[2];<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    T rho_sqr = u * u + v * v;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    T L = T(1.0) + k1 * rho_sqr + k2 * rho_sqr * rho_sqr;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    T du = T(2.0) * p1 * u * v + p2 * (rho_sqr + T(2.0) * u * u);<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    T dv = p1 * (rho_sqr + T(2.0) * v * v) + T(2.0) * p2 * u * v;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    u = L * u + du;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    v = L * v + dv;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    p(0) = fx * (u + alpha * v) + cx;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    p(1) = fy * v + cy;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;}<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;}<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1PinholeCamera_1_1Parameters_html"><div class="ttname"><a href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">camodocal::PinholeCamera::Parameters<\/a><\/div><div class="ttdef"><b>Definition:<\/b> PinholeCamera.h:16<\/div><\/div>$/;"	a
l00001	doc/html/QueryResults_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_QUERY_RESULTS__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_QUERY_RESULTS__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">   18<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1Result.html">Result<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">   26<\/a><\/span>&#160;  EntryId <a class="code" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">Id<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">   29<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <\/div><div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#ad13eee018380c45ca2d69138f41607af">   32<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1Result.html#ad13eee018380c45ca2d69138f41607af">nWords<\/a>; <span class="comment">\/\/ words in common<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;  <span class="comment">\/\/ !!! this is filled only by Bhatt score!<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  <span class="comment">\/\/ (and for BCMatching, BCThresholding then)<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  <span class="keywordtype">double<\/span> bhatScore, chiScore;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  <\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="comment">\/\/ only done by ChiSq and BCThresholding <\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a82985e53f548cd26044dc2d7281d6b36">   40<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1Result.html#a82985e53f548cd26044dc2d7281d6b36">sumCommonVi<\/a>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keywordtype">double<\/span> sumCommonWi;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">double<\/span> expectedChiScore;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a3cd1ea537745f0f76042d08033629f4a">   48<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="classDBoW2_1_1Result.html#a3cd1ea537745f0f76042d08033629f4a">Result<\/a>(){}<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <\/div><div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a5ca2977e7a2646f886ef92cb7f64352a">   55<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="classDBoW2_1_1Result.html#a5ca2977e7a2646f886ef92cb7f64352a">Result<\/a>(EntryId _id, <span class="keywordtype">double<\/span> _score): Id(_id), Score(_score){}<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a55a1e40b299c525e4aad3fdbe61f8a33">   61<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a55a1e40b299c525e4aad3fdbe61f8a33">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;r)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &lt; r.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#aea5b5e52f1ebce9be7f35a22ef18a574">   70<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#aea5b5e52f1ebce9be7f35a22ef18a574">operator&gt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;r)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &gt; r.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;  }<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a504b0a516459692a0f8ffcc097c01732">   79<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a504b0a516459692a0f8ffcc097c01732">operator==<\/a>(EntryId <span class="keywordtype">id<\/span>)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Id == id;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;  }<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;  <\/div><div class="line"><a name="l00089"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a4b13db14e169e9df03b030b67e66d3b8">   89<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a4b13db14e169e9df03b030b67e66d3b8">operator&lt;<\/a>(<span class="keywordtype">double<\/span> s)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &lt; s;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;  }<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;  <\/div><div class="line"><a name="l00099"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#af9898c347504a5d3a9fd2a840c9b188c">   99<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#af9898c347504a5d3a9fd2a840c9b188c">operator&gt;<\/a>(<span class="keywordtype">double<\/span> s)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &gt; s;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;  }<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;  <\/div><div class="line"><a name="l00110"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">  110<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">gt<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;  {<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt; b.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;  }<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;  <\/div><div class="line"><a name="l00119"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#ab24992db21ed95d77fa5fc040d45940b">  119<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#ab24992db21ed95d77fa5fc040d45940b">ge<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;  {<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt; b.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;  }<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <\/div><div class="line"><a name="l00130"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#afe1567c5a010ebf492a558f60e0f7275">  130<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#afe1567c5a010ebf492a558f60e0f7275">geq<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;  {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt;= b.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  }<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;  <\/div><div class="line"><a name="l00141"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a2cb32089cbe5dffaa5b60fb1b410a713">  141<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a2cb32089cbe5dffaa5b60fb1b410a713">geqv<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keywordtype">double<\/span> s)<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  {<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt;= s;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;  }<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;  <\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;  <\/div><div class="line"><a name="l00153"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#ac8b4e2a21806b48a042168936c44e6bd">  153<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#ac8b4e2a21806b48a042168936c44e6bd">ltId<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;  {<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">Id<\/a> &lt; b.<a class="code" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">Id<\/a>;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;  }<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;  <\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;  <span class="keyword">friend<\/span> std::ostream &amp; <a class="code" href="classDBoW2_1_1Result.html#adcb074a444887749ca1ce08b25b73a48">operator&lt;&lt;<\/a>(std::ostream&amp; os, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a>&amp; ret );<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;};<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1QueryResults.html">  167<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a>: <span class="keyword">public<\/span> std::vector&lt;Result&gt;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;{<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> scaleScores(<span class="keywordtype">double<\/span> factor);<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;  <\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;  <span class="keyword">friend<\/span> std::ostream &amp; <a class="code" href="classDBoW2_1_1Result.html#adcb074a444887749ca1ce08b25b73a48">operator&lt;&lt;<\/a>(std::ostream&amp; os, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a>&amp; ret );<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;  <\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;  <span class="keywordtype">void<\/span> saveM(<span class="keyword">const<\/span> std::string &amp;filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;  <\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;};<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1QueryResults.html#aa47048267696191c070545c935e28b47">  194<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html#aa47048267696191c070545c935e28b47">QueryResults::scaleScores<\/a>(<span class="keywordtype">double<\/span> factor)<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;{<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;  <span class="keywordflow">for<\/span>(QueryResults::iterator qit = begin(); qit != end(); ++qit) <\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    qit-&gt;Score *= factor;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;}<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;} <span class="comment">\/\/ namespace TemplatedBoW<\/span><\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;  <\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1Result_html_a3cd1ea537745f0f76042d08033629f4a"><div class="ttname"><a href="classDBoW2_1_1Result.html#a3cd1ea537745f0f76042d08033629f4a">DBoW2::Result::Result<\/a><\/div><div class="ttdeci">Result()<\/div><div class="ttdoc">debug <\/div><div class="ttdef"><b>Definition:<\/b> QueryResults.h:48<\/div><\/div>$/;"	a
l00001	doc/html/Random_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*  <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: Random.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DUtils library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: April 2010, November 2011<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: manages pseudo-random numbers<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#ifndef __D_RANDOM__<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#define __D_RANDOM__<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a> {<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Random.html">Random<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#ab5fdbc0a1dec22ea1b3365ac16508b4d">SeedRand<\/a>();<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#a91926937ff5c31ca4aa3948de8b4d788">SeedRandOnce<\/a>();<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#ab5fdbc0a1dec22ea1b3365ac16508b4d">SeedRand<\/a>(<span class="keywordtype">int<\/span> seed);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#a91926937ff5c31ca4aa3948de8b4d788">SeedRandOnce<\/a>(<span class="keywordtype">int<\/span> seed);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html#ac5d2e4d977afdec30071c531a7a96d88">   56<\/a><\/span>&#160;    <span class="keyword">static<\/span> T <a class="code" href="classDUtils_1_1Random.html#ac5d2e4d977afdec30071c531a7a96d88">RandomValue<\/a>(){<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordflow">return<\/span> (T)rand()\/(T)RAND_MAX;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    }<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html#a13760f5d6d4b866fbcc350dbb0d39d02">   67<\/a><\/span>&#160;    <span class="keyword">static<\/span> T <a class="code" href="classDUtils_1_1Random.html#a13760f5d6d4b866fbcc350dbb0d39d02">RandomValue<\/a>(T min, T max){<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordflow">return<\/span> Random::RandomValue&lt;T&gt;() * (max - min) + min;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    }<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random.html#a39e456a640b660d7ef06460822685dc3">RandomInt<\/a>(<span class="keywordtype">int<\/span> min, <span class="keywordtype">int<\/span> max);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html#a2c769bcd60a08fc3eba3ef4abf9761d5">   85<\/a><\/span>&#160;    <span class="keyword">static<\/span> T <a class="code" href="classDUtils_1_1Random.html#a2c769bcd60a08fc3eba3ef4abf9761d5">RandomGaussianValue<\/a>(T mean, T sigma)<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    {<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="comment">\/\/ Box-Muller transformation<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    T x1, x2, w, y1;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordflow">do<\/span> {<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;      x1 = (T)2. * RandomValue&lt;T&gt;() - (T)1.;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;      x2 = (T)2. * RandomValue&lt;T&gt;() - (T)1.;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;      w = x1 * x1 + x2 * x2;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    } <span class="keywordflow">while<\/span> ( w &gt;= (T)1. || w == (T)0. );<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    w = sqrt( ((T)-2.0 * log( w ) ) \/ w );<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    y1 = x1 * w;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span>( mean + y1 * sigma );<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    }<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> m_already_seeded;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  <\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;};<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">  112<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">Random::UnrepeatedRandomizer<\/a><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;{<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>(<span class="keywordtype">int<\/span> min, <span class="keywordtype">int<\/span> max);<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;  ~<a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>(){}<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;  <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>&amp; rnd);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;  <\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;  <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>&amp; rnd);<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;  <\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  <span class="keywordtype">int<\/span> <span class="keyword">get<\/span>();<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  <\/div><div class="line"><a name="l00149"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a70d6ff7e510b11fde4640033963e8627">  149<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a70d6ff7e510b11fde4640033963e8627">empty<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_values.empty(); }<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;  <\/div><div class="line"><a name="l00155"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a29599dcd4c885298736d46086dad6485">  155<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a29599dcd4c885298736d46086dad6485">left<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_values.size(); }<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;  <\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;  <span class="keywordtype">void<\/span> reset();<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;  <\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;  <span class="keywordtype">void<\/span> createValues();<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a7b59cc2afb7d7db20aa048ea95365134">  172<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a7b59cc2afb7d7db20aa048ea95365134">m_min<\/a>;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a5c2d23ba34589d23ac131e37feac6f6b">  174<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a5c2d23ba34589d23ac131e37feac6f6b">m_max<\/a>;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#adbe23146bfc61994e361d356282ce6c4">  177<\/a><\/span>&#160;  std::vector&lt;int&gt; <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#adbe23146bfc61994e361d356282ce6c4">m_values<\/a>;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;};<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;}<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div><div class="ttc" id="classDUtils_1_1Random_html"><div class="ttname"><a href="classDUtils_1_1Random.html">DUtils::Random<\/a><\/div><div class="ttdoc">Functions to generate pseudo-random numbers. <\/div><div class="ttdef"><b>Definition:<\/b> Random.h:21<\/div><\/div>$/;"	a
l00001	doc/html/ScaramuzzaCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SCARAMUZZACAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SCARAMUZZACAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#define SCARAMUZZA_POLY_SIZE 5<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#define SCARAMUZZA_INV_POLY_SIZE 20<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#define SCARAMUZZA_CAMERA_NUM_PARAMS (SCARAMUZZA_POLY_SIZE + SCARAMUZZA_INV_POLY_SIZE + 2 <\/span><span class="comment">\/*center*\/<\/span><span class="preprocessor"> + 3 <\/span><span class="comment">\/*affine*\/<\/span><span class="preprocessor">)<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1OCAMCamera.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1OCAMCamera.html">OCAMCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;{<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">   26<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    {<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; C(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_C; }<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; D(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_D; }<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; E(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_E; }<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; center_x(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_center_x; }<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; center_y(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_center_y; }<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; poly(<span class="keywordtype">int<\/span> idx) { <span class="keywordflow">return<\/span> m_poly[idx]; }<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; inv_poly(<span class="keywordtype">int<\/span> idx) { <span class="keywordflow">return<\/span> m_inv_poly[idx]; }<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> C(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_C; }<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> D(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_D; }<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">double<\/span> E(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_E; }<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">double<\/span> center_x(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_center_x; }<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keywordtype">double<\/span> center_y(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_center_y; }<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordtype">double<\/span> poly(<span class="keywordtype">int<\/span> idx)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_poly[idx]; }<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">double<\/span> inv_poly(<span class="keywordtype">int<\/span> idx)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_inv_poly[idx]; }<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_poly[SCARAMUZZA_POLY_SIZE];<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">double<\/span> m_inv_poly[SCARAMUZZA_INV_POLY_SIZE];<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">double<\/span> m_C;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordtype">double<\/span> m_D;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">double<\/span> m_E;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">double<\/span> m_center_x;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">double<\/span> m_center_y;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    };<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <a class="code" href="classcamodocal_1_1OCAMCamera.html">OCAMCamera<\/a>();<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <a class="code" href="classcamodocal_1_1OCAMCamera.html">OCAMCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/void spaceToPlane(const Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/                  Eigen::Matrix&lt;double,2,3&gt;&amp; J) const;<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;                              <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;                              <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                              Eigen::Matrix&lt;T, 3, 1&gt;&amp; P_s);<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> LiftToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                              <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 2, 1&gt;&amp; p,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                              Eigen::Matrix&lt;T, 3, 1&gt;&amp; P);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> SphereToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                               Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_scale;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;};<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;OCAMCamera&gt; OCAMCameraPtr;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const OCAMCamera&gt; OCAMCameraConstPtr;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;OCAMCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                         <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                         <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                         Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;{<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    {<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        T P_w[3];<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        P_w[0] = T(P(0));<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        P_w[1] = T(P(1));<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        P_w[2] = T(P(2));<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        P_c[0] += t[0];<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        P_c[1] += t[1];<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        P_c[2] += t[2];<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    }<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    T c = params[0];<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    T d = params[1];<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    T e = params[2];<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    T xc[2] = { params[3], params[4] };<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <span class="comment">\/\/T poly[SCARAMUZZA_POLY_SIZE];<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    <span class="comment">\/\/for (int i=0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="comment">\/\/    poly[i] = params[5+i];<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    T inv_poly[SCARAMUZZA_INV_POLY_SIZE];<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i=0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++)<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;        inv_poly[i] = params[5 + SCARAMUZZA_POLY_SIZE + i];<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    T norm_sqr = P_c[0] * P_c[0] + P_c[1] * P_c[1];<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    T norm = T(0.0);<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="keywordflow">if<\/span> (norm_sqr &gt; T(0.0))<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        norm = sqrt(norm_sqr);<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    T theta = atan2(-P_c[2], norm);<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    T rho = T(0.0);<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    T theta_i = T(1.0);<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++)<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    {<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        rho += theta_i * inv_poly[i];<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        theta_i *= theta;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    }<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    T invNorm = T(1.0) \/ norm;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    T xn[2] = {<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        P_c[0] * invNorm * rho,<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        P_c[1] * invNorm * rho<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    };<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    p(0) = xn[0] * c + xn[1] * d + xc[0];<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;    p(1) = xn[0] * e + xn[1]     + xc[1];<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;}<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;OCAMCamera::spaceToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;                          <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;                          <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;                          Eigen::Matrix&lt;T, 3, 1&gt;&amp; P_s)<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;{<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;    {<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;        T P_w[3];<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;        P_w[0] = T(P(0));<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;        P_w[1] = T(P(1));<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;        P_w[2] = T(P(2));<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;        <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;        T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;        ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        P_c[0] += t[0];<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;        P_c[1] += t[1];<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;        P_c[2] += t[2];<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;    }<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    <span class="comment">\/\/T poly[SCARAMUZZA_POLY_SIZE];<\/span><\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;    <span class="comment">\/\/for (int i=0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/span><\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    <span class="comment">\/\/    poly[i] = params[5+i];<\/span><\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;    T norm_sqr = P_c[0] * P_c[0] + P_c[1] * P_c[1] + P_c[2] * P_c[2];<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;    T norm = T(0.0);<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    <span class="keywordflow">if<\/span> (norm_sqr &gt; T(0.0))<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;        norm = sqrt(norm_sqr);<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;    P_s(0) = P_c[0] \/ norm;<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;    P_s(1) = P_c[1] \/ norm;<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    P_s(2) = P_c[2] \/ norm;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;}<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;OCAMCamera::LiftToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;                          <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 2, 1&gt;&amp; p,<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;                          Eigen::Matrix&lt;T, 3, 1&gt;&amp; P)<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;{<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;    T c = params[0];<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;    T d = params[1];<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    T e = params[2];<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;    T cc[2] = { params[3], params[4] };<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;    T poly[SCARAMUZZA_POLY_SIZE];<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i=0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;       poly[i] = params[5+i];<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;    <span class="comment">\/\/ Relative to Center<\/span><\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;    T p_2d[2];<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;    p_2d[0] = T(p(0));<\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;    p_2d[1] = T(p(1));<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;    T xc[2] = { p_2d[0] - cc[0], p_2d[1] - cc[1]};<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;    T inv_scale = T(1.0) \/ (c - d * e);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <span class="comment">\/\/ Affine Transformation<\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;    T xc_a[2];<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;    xc_a[0] = inv_scale * (xc[0] - d * xc[1]);<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;    xc_a[1] = inv_scale * (-e * xc[0] + c * xc[1]);<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;    T norm_sqr = xc_a[0] * xc_a[0] + xc_a[1] * xc_a[1];<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;    T phi = sqrt(norm_sqr);<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;    T phi_i = T(1.0);<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    T z = T(0.0);<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;    {<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;        <span class="keywordflow">if<\/span> (i!=1) {<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;            z += phi_i * poly[i];<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;        }<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        phi_i *= phi;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;    }<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;    T p_3d[3];<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;    p_3d[0] = xc[0];<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    p_3d[1] = xc[1];<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;    p_3d[2] = -z;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;    T p_3d_norm_sqr = p_3d[0] * p_3d[0] + p_3d[1] * p_3d[1] + p_3d[2] * p_3d[2];<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;    T p_3d_norm = sqrt(p_3d_norm_sqr);<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;    P &lt;&lt; p_3d[0] \/ p_3d_norm, p_3d[1] \/ p_3d_norm, p_3d[2] \/ p_3d_norm;<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;}<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<span class="keywordtype">void<\/span> OCAMCamera::SphereToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;                               Eigen::Matrix&lt;T, 2, 1&gt;&amp; p) {<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;    {<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;        P_c[0] = T(P(0));<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        P_c[1] = T(P(1));<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        P_c[2] = T(P(2));<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;    }<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;    T c = params[0];<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;    T d = params[1];<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;    T e = params[2];<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;    T xc[2] = {params[3], params[4]};<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;    T inv_poly[SCARAMUZZA_INV_POLY_SIZE];<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++)<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        inv_poly[i] = params[5 + SCARAMUZZA_POLY_SIZE + i];<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;    T norm_sqr = P_c[0] * P_c[0] + P_c[1] * P_c[1];<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;    T norm = T(0.0);<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;    <span class="keywordflow">if<\/span> (norm_sqr &gt; T(0.0)) norm = sqrt(norm_sqr);<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    T theta = atan2(-P_c[2], norm);<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    T rho = T(0.0);<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;    T theta_i = T(1.0);<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++) {<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;        rho += theta_i * inv_poly[i];<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;        theta_i *= theta;<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;    }<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;    T invNorm = T(1.0) \/ norm;<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    T xn[2] = {P_c[0] * invNorm * rho, P_c[1] * invNorm * rho};<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    p(0) = xn[0] * c + xn[1] * d + xc[0];<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    p(1) = xn[0] * e + xn[1] + xc[1];<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;}<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;}<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1OCAMCamera_1_1Parameters_html"><div class="ttname"><a href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">camodocal::OCAMCamera::Parameters<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ScaramuzzaCamera.h:26<\/div><\/div>$/;"	a
l00001	doc/html/ScoringObject_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_SCORING_OBJECT__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_SCORING_OBJECT__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1GeneralScoring.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1GeneralScoring.html">GeneralScoring<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#a43b3f5fedb19e6a19e17b9813efd17e8">score<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;w) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#ab0cadafd50b0f2f559f6325a6944f72f">mustNormalize<\/a>(<a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> &amp;norm) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1GeneralScoring.html#a4e9388752852ebc9e247ad50bf6d128e">   39<\/a><\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#a4e9388752852ebc9e247ad50bf6d128e">LOG_EPS<\/a>; <\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="comment">\/\/ If you change the type of WordValue, make sure you change also the<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="comment">\/\/ epsilon value (this is needed by the KL method)<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <\/div><div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1GeneralScoring.html#a1796812280a5188e06d8137baa977776">   43<\/a><\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#a1796812280a5188e06d8137baa977776">~GeneralScoring<\/a>() {} <\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;};<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#define __SCORING_CLASS(NAME, MUSTNORMALIZE, NORM) \\<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">  NAME: public GeneralScoring \\<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">  { public: \\<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor"> \\<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">    virtual double score(const BowVector &amp;v, const BowVector &amp;w) const; \\<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">    \\<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor"> \\<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">    virtual inline bool mustNormalize(LNorm &amp;norm) const  \\<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">      { norm = NORM; return MUSTNORMALIZE; } \\<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">  }<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  <\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(L1Scoring, true, L1);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(L2Scoring, true, L2);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(ChiSquareScoring, true, L1);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(KLScoring, true, L1);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(BhattacharyyaScoring, true, L1);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(DotProductScoring, false, L1);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#undef __SCORING_CLASS<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;  <\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1GeneralScoring_html_a1796812280a5188e06d8137baa977776"><div class="ttname"><a href="classDBoW2_1_1GeneralScoring.html#a1796812280a5188e06d8137baa977776">DBoW2::GeneralScoring::~GeneralScoring<\/a><\/div><div class="ttdeci">virtual ~GeneralScoring()<\/div><div class="ttdoc">Required for virtual base classes. <\/div><div class="ttdef"><b>Definition:<\/b> ScoringObject.h:43<\/div><\/div>$/;"	a
l00001	doc/html/Spline_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*  dynamo:- Event driven molecular dynamics simulator<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">    http:\/\/www.marcusbannerman.co.uk\/dynamo<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">    Copyright (C) 2011  Marcus N Campbell Bannerman &lt;m.bannerman@gmail.com&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">    This program is free software: you can redistribute it and\/or<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">    modify it under the terms of the GNU General Public License<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">    version 3 as published by the Free Software Foundation.<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment">    This program is distributed in the hope that it will be useful,<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">    GNU General Public License for more details.<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">    along with this program.  If not, see &lt;http:\/\/www.gnu.org\/licenses\/&gt;.<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/vector.hpp&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/vector_proxy.hpp&gt;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/matrix.hpp&gt;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/triangular.hpp&gt;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/lu.hpp&gt;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;exception&gt;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">namespace <\/span>ublas = boost::numeric::ublas;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="classSpline.html">   29<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSpline.html">Spline<\/a> : <span class="keyword">private<\/span> std::vector&lt;std::pair&lt;double, double&gt; &gt;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;{<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="comment">\/\/The boundary conditions available<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;  <span class="keyword">enum<\/span> BC_type {<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    FIXED_1ST_DERIV_BC,<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    FIXED_2ND_DERIV_BC,<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    PARABOLIC_RUNOUT_BC<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  };<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keyword">enum<\/span> Spline_type {<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    LINEAR,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    CUBIC<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  };<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="comment">\/\/Constructor takes the boundary conditions as arguments, this<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <span class="comment">\/\/sets the first derivative (gradient) at the lower and upper<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;  <span class="comment">\/\/end points<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <a class="code" href="classSpline.html">Spline<\/a>():<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    _valid(<span class="keyword">false<\/span>),<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    _BCLow(FIXED_2ND_DERIV_BC), _BCHigh(FIXED_2ND_DERIV_BC),<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    _BCLowVal(0), _BCHighVal(0),<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    _type(CUBIC)<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  {}<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keyword">typedef<\/span> std::vector&lt;std::pair&lt;double, double&gt; &gt; base;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keyword">typedef<\/span> base::const_iterator const_iterator;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <span class="comment">\/\/Standard STL read-only container stuff<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  const_iterator begin()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::begin(); }<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;  const_iterator end()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::end(); }<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;  <span class="keywordtype">void<\/span> clear() { _valid = <span class="keyword">false<\/span>; base::clear(); _data.clear(); }<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;  <span class="keywordtype">size_t<\/span> size()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::size(); }<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;  <span class="keywordtype">size_t<\/span> max_size()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::max_size(); }<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  <span class="keywordtype">size_t<\/span> capacity()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::capacity(); }<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  <span class="keywordtype">bool<\/span> empty()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::empty(); }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;  <span class="comment">\/\/Add a point to the spline, and invalidate it so its<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;  <span class="comment">\/\/recalculated on the next access<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> addPoint(<span class="keywordtype">double<\/span> x, <span class="keywordtype">double<\/span> y)<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  {<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    _valid = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    base::push_back(std::pair&lt;double, double&gt;(x,y));<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  }<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  <span class="comment">\/\/Reset the boundary conditions<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setLowBC(BC_type BC, <span class="keywordtype">double<\/span> val = 0)<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  { _BCLow = BC; _BCLowVal = val; _valid = <span class="keyword">false<\/span>; }<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setHighBC(BC_type BC, <span class="keywordtype">double<\/span> val = 0)<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;  { _BCHigh = BC; _BCHighVal = val; _valid = <span class="keyword">false<\/span>; }<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;  <span class="keywordtype">void<\/span> setType(Spline_type type) { _type = type; _valid = <span class="keyword">false<\/span>; }<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;  <span class="comment">\/\/Check if the spline has been calculated, then generate the<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;  <span class="comment">\/\/spline interpolated value<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;  <span class="keywordtype">double<\/span> operator()(<span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;  {<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keywordflow">if<\/span> (!_valid) generate();<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="comment">\/\/Special cases when we&#39;re outside the range of the spline points<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordflow">if<\/span> (xval &lt;= x(0)) <span class="keywordflow">return<\/span> lowCalc(xval);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keywordflow">if<\/span> (xval &gt;= x(size()-1)) <span class="keywordflow">return<\/span> highCalc(xval);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/Check all intervals except the last one<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keywordflow">for<\/span> (std::vector&lt;SplineData&gt;::const_iterator iPtr = _data.begin();<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;         iPtr != _data.end()-1; ++iPtr)<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordflow">if<\/span> ((xval &gt;= iPtr-&gt;x) &amp;&amp; (xval &lt;= (iPtr+1)-&gt;x))<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;          <span class="keywordflow">return<\/span> splineCalc(iPtr, xval);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span> splineCalc(_data.end() - 1, xval);<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  }<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  <span class="keyword">struct <\/span>SplineData { <span class="keywordtype">double<\/span> x,a,b,c,d; };<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  <span class="comment">\/\/vector of calculated spline data<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;  std::vector&lt;SplineData&gt; _data;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;  <span class="comment">\/\/Second derivative at each point<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;  ublas::vector&lt;double&gt; _ddy;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;  <span class="comment">\/\/Tracks whether the spline parameters have been calculated for<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;  <span class="comment">\/\/the current set of points<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  <span class="keywordtype">bool<\/span> _valid;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;  <span class="comment">\/\/The boundary conditions<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;  BC_type _BCLow, _BCHigh;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;  <span class="comment">\/\/The values of the boundary conditions<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;  <span class="keywordtype">double<\/span> _BCLowVal, _BCHighVal;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  Spline_type _type;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <span class="comment">\/\/Function to calculate the value of a given spline at a point xval<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> splineCalc(std::vector&lt;SplineData&gt;::const_iterator i, <span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  {<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> lx = xval - i-&gt;x;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordflow">return<\/span> ((i-&gt;a * lx + i-&gt;b) * lx + i-&gt;c) * lx + i-&gt;d;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;  }<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> lowCalc(<span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;  {<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> lx = xval - x(0);<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordflow">if<\/span> (_type == LINEAR)<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;      <span class="keywordflow">return<\/span> lx * _BCHighVal + y(0);<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> firstDeriv = (y(1) - y(0)) \/ h(0) - 2 * h(0) * (_data[0].b + 2 * _data[1].b) \/ 6;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keywordflow">switch<\/span>(_BCLow)<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;      {<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;        <span class="keywordflow">return<\/span> lx * _BCLowVal + y(0);<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;          <span class="keywordflow">return<\/span> lx * lx * _BCLowVal + firstDeriv * lx + y(0);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;      <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <span class="keywordflow">return<\/span> lx * lx * _ddy[0] + lx * firstDeriv  + y(0);<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;      }<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Unknown BC&quot;<\/span>);<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;  }<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> highCalc(<span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;  {<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> lx = xval - x(size() - 1);<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    <span class="keywordflow">if<\/span> (_type == LINEAR)<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;      <span class="keywordflow">return<\/span> lx * _BCHighVal + y(size() - 1);<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> firstDeriv = 2 * h(size() - 2) * (_ddy[size() - 2] + 2 * _ddy[size() - 1]) \/ 6 + (y(size() - 1) - y(size() - 2)) \/ h(size() - 2);<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <span class="keywordflow">switch<\/span>(_BCHigh)<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;      {<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        <span class="keywordflow">return<\/span> lx * _BCHighVal + y(size() - 1);<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        <span class="keywordflow">return<\/span> lx * lx * _BCHighVal + firstDeriv * lx + y(size() - 1);<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;      <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="keywordflow">return<\/span> lx * lx * _ddy[size()-1] + lx * firstDeriv  + y(size() - 1);<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;      }<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Unknown BC&quot;<\/span>);<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;  }<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;  <span class="comment">\/\/These just provide access to the point data in a clean way<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> x(<span class="keywordtype">size_t<\/span> i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> operator[](i).first; }<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> y(<span class="keywordtype">size_t<\/span> i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> operator[](i).second; }<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> h(<span class="keywordtype">size_t<\/span> i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> x(i+1) - x(i); }<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="comment">\/\/Invert a arbitrary matrix using the boost ublas library<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;  <span class="keywordtype">bool<\/span> InvertMatrix(ublas::matrix&lt;T&gt; A,<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        ublas::matrix&lt;T&gt;&amp; inverse)<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;  {<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    <span class="keyword">using namespace <\/span>ublas;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="comment">\/\/ create a permutation matrix for the LU-factorization<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    permutation_matrix&lt;std::size_t&gt; pm(A.size1());<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="comment">\/\/ perform LU-factorization<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    <span class="keywordtype">int<\/span> res = lu_factorize(A,pm);<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        <span class="keywordflow">if<\/span>( res != 0 ) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    <span class="comment">\/\/ create identity matrix of &quot;inverse&quot;<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    inverse.assign(ublas::identity_matrix&lt;T&gt;(A.size1()));<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <span class="comment">\/\/ backsubstitute to get the inverse<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    lu_substitute(A, pm, inverse);<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;  }<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;  <span class="comment">\/\/This function will recalculate the spline parameters and store<\/span><\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <span class="comment">\/\/them in _data, ready for spline interpolation<\/span><\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;  <span class="keywordtype">void<\/span> generate()<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;  {<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    <span class="keywordflow">if<\/span> (size() &lt; 2)<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;      <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Spline requires at least 2 points&quot;<\/span>);<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="comment">\/\/If any spline points are at the same x location, we have to<\/span><\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    <span class="comment">\/\/just slightly seperate them<\/span><\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    {<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;      <span class="keywordtype">bool<\/span> testPassed(<span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;      <span class="keywordflow">while<\/span> (!testPassed)<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;        {<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;          testPassed = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;          std::sort(base::begin(), base::end());<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;          <span class="keywordflow">for<\/span> (base::iterator iPtr = base::begin(); iPtr != base::end() - 1; ++iPtr)<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;        <span class="keywordflow">if<\/span> (iPtr-&gt;first == (iPtr+1)-&gt;first)<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;          {<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;            <span class="keywordflow">if<\/span> ((iPtr+1)-&gt;first != 0)<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;              (iPtr+1)-&gt;first += (iPtr+1)-&gt;first<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;            * std::numeric_limits&lt;double&gt;::epsilon() * 10;<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;            <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;              (iPtr+1)-&gt;first = std::numeric_limits&lt;double&gt;::epsilon() * 10;<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;            testPassed = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;            <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;          }<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;        }<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;    }<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">size_t<\/span> e = size() - 1;<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;    <span class="keywordflow">switch<\/span> (_type)<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;      {<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;      <span class="keywordflow">case<\/span> LINEAR:<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;        {<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;          _data.resize(e);<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(0); i &lt; e; ++i)<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        {<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;          _data[i].x = x(i);<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;          _data[i].a = 0;<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;          _data[i].b = 0;<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;          _data[i].c = (y(i+1) - y(i)) \/ (x(i+1) - x(i));<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;          _data[i].d = y(i);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        }<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        }<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;      <span class="keywordflow">case<\/span> CUBIC:<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        {<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;          ublas::matrix&lt;double&gt; A(size(), size());<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> yv(0); yv &lt;= e; ++yv)<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> xv(0); xv &lt;= e; ++xv)<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;          A(xv,yv) = 0;<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(1); i &lt; e; ++i)<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;        {<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;          A(i-1,i) = h(i-1);<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;          A(i,i) = 2 * (h(i-1) + h(i));<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;          A(i+1,i) = h(i);<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        }<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;          ublas::vector&lt;double&gt; C(size());<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> xv(0); xv &lt;= e; ++xv)<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;        C(xv) = 0;<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(1); i &lt; e; ++i)<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;        C(i) = 6 *<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;          ((y(i+1) - y(i)) \/ h(i)<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;           - (y(i) - y(i-1)) \/ h(i-1));<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;          <span class="comment">\/\/Boundary conditions<\/span><\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;          <span class="keywordflow">switch<\/span>(_BCLow)<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;        {<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;          C(0) = 6 * ((y(1) - y(0)) \/ h(0) - _BCLowVal);<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;          A(0,0) = 2 * h(0);<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;          A(1,0) = h(0);<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;          C(0) = _BCLowVal;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;          A(0,0) = 1;<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;          C(0) = 0; A(0,0) = 1; A(1,0) = -1;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        }<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;          <span class="keywordflow">switch<\/span>(_BCHigh)<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        {<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;          C(e) = 6 * (_BCHighVal - (y(e) - y(e-1)) \/ h(e-1));<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;          A(e,e) = 2 * h(e - 1);<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;          A(e-1,e) = h(e - 1);<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;          C(e) = _BCHighVal;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;          A(e,e) = 1;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;        <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;          C(e) = 0; A(e,e) = 1; A(e-1,e) = -1;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;        }<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;          ublas::matrix&lt;double&gt; AInv(size(), size());<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;          InvertMatrix(A,AInv);<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;          _ddy = ublas::prod(C, AInv);<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;          _data.resize(size()-1);<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(0); i &lt; e; ++i)<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;        {<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;          _data[i].x = x(i);<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;          _data[i].a = (_ddy(i+1) - _ddy(i)) \/ (6 * h(i));<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;          _data[i].b = _ddy(i) \/ 2;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;          _data[i].c = (y(i+1) - y(i)) \/ h(i) - _ddy(i+1) * h(i) \/ 6 - _ddy(i) * h(i) \/ 3;<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;          _data[i].d = y(i);<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        }<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        }<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;      }<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;    _valid = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;  }<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;};<\/div><div class="ttc" id="classSpline_html"><div class="ttname"><a href="classSpline.html">Spline<\/a><\/div><div class="ttdef"><b>Definition:<\/b> Spline.h:29<\/div><\/div>$/;"	a
l00001	doc/html/TemplatedDatabase_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_TEMPLATED_DATABASE__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_TEMPLATED_DATABASE__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;set&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedVocabulary.h&quot;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &quot;QueryResults.h&quot;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;ScoringObject.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &quot;FeatureVector.h&quot;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;..\/DUtils\/DUtils.h&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">\/\/ For query functions<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">static<\/span> <span class="keywordtype">int<\/span> MIN_COMMON_WORDS = 5;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html">   37<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase<\/a><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <span class="keyword">explicit<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keywordtype">bool<\/span> use_di = <span class="keyword">true<\/span>, <span class="keywordtype">int<\/span> di_levels = 0);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keyword">explicit<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> T &amp;voc, <span class="keywordtype">bool<\/span> use_di = <span class="keyword">true<\/span>, <\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordtype">int<\/span> di_levels = 0);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a> &amp;db);<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aca2f045e0974babd7ef5b491b5e24c25">~TemplatedDatabase<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a654d8d3c7f80172be1e091663e47535d">operator=<\/a>(<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db);<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(<span class="keyword">const<\/span> T &amp;voc);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;  <\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(<span class="keyword">const<\/span> T&amp; voc, <span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels = 0);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;  <\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;<\/a>* <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">getVocabulary<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a5b410217ede05dc0920e2adc1e20b4b5">allocate<\/a>(<span class="keywordtype">int<\/span> nd = 0, <span class="keywordtype">int<\/span> ni = 0);<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features,<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> *bowvec = NULL, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> *fvec = NULL);<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fec = <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>() );<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;  <span class="keywordtype">void<\/span> delete_entry(<span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id);<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">size<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;  <\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">usingDirectIndex<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;  <\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">getDirectIndexLevels<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;  <\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">query<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret,<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <span class="keywordtype">int<\/span> max_results = 1, <span class="keywordtype">int<\/span> max_id = -1) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;  <\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">query<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    <span class="keywordtype">int<\/span> max_results = 1, <span class="keywordtype">int<\/span> max_id = -1) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa2517a2f5b946741bd6a9932c60f75a1">retrieveFeatures<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <span class="keywordtype">id<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;  <\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;  <\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">save<\/a>(cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;database&quot;<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;database&quot;<\/span>);<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;  <\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">queryL1<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;  <\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">queryL2<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">queryChiSquare<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;  <\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a">queryBhattacharyya<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;  <\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">queryKL<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d">queryDotProduct<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;  <span class="comment">\/* Inverted file declaration *\/<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <\/div><div class="line"><a name="l00259"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html">  259<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html">IFPair<\/a><\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  {<\/div><div class="line"><a name="l00262"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">  262<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    <\/div><div class="line"><a name="l00265"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#adf30c55dc6ff22de69c360bcb8961a0c">  265<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#adf30c55dc6ff22de69c360bcb8961a0c">word_weight<\/a>;<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    <\/div><div class="line"><a name="l00270"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">  270<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">IFPair<\/a>(){}<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;    <\/div><div class="line"><a name="l00277"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4d449ba7e48cab711302bd5752d65b1e">  277<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4d449ba7e48cab711302bd5752d65b1e">IFPair<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid, <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> wv): entry_id(eid), word_weight(wv) {}<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <\/div><div class="line"><a name="l00284"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#acb96ccc36e3791518163cac1537800a1">  284<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#acb96ccc36e3791518163cac1537800a1">operator==<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> entry_id == eid; }<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;  };<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;  <\/div><div class="line"><a name="l00288"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">  288<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> std::list&lt;IFPair&gt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;  <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;  <\/div><div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ad16f54a326cfb827de3af1d979c52768">  292<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> std::vector&lt;IFRow&gt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad16f54a326cfb827de3af1d979c52768">InvertedFile<\/a>; <\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;  <span class="comment">\/\/ InvertedFile[word_id] --&gt; inverted file of that word<\/span><\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;  <\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;  <span class="comment">\/* Direct file declaration *\/<\/span><\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa74effa19eeb016d54e256861938aac9">  298<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> std::vector&lt;FeatureVector&gt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa74effa19eeb016d54e256861938aac9">DirectFile<\/a>;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;  <span class="comment">\/\/ DirectFile[entry_id] --&gt; [ directentry, ... ]<\/span><\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<\/div><div class="line"><a name="l00304"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">  304<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> *<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;  <\/div><div class="line"><a name="l00307"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">  307<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>;<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;  <\/div><div class="line"><a name="l00311"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">  311<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;  <\/div><div class="line"><a name="l00314"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">  314<\/a><\/span>&#160;  InvertedFile <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;  <\/div><div class="line"><a name="l00318"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">  318<\/a><\/span>&#160;  DirectFile <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>;<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;  <\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;  std::vector&lt;BowVector&gt; m_dBowfile;<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">  323<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;  <\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;};<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00331"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">  331<\/a><\/span>&#160;  (<span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels)<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>(use_di), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>(di_levels), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>(0)<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;{<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;}<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00341"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a00022acf352915aa913488fb56fb3506">  341<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T &amp;voc, <span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels)<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>(use_di), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>(di_levels)<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;{<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(voc);<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;}<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor,F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00352"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a8ae59817af3251f63c0345d9b814b23f">  352<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db)<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL)<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;{<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;  *<span class="keyword">this<\/span> = db;<\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;}<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00362"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a811328512cdcb50220ca4f38a8982132">  362<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;filename)<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL)<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;{<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(filename);<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;}<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00372"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a4e93c45263abda6bd1870e1baae820b0">  372<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename)<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL)<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;{<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(filename);<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;}<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00381"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aca2f045e0974babd7ef5b491b5e24c25">  381<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aca2f045e0974babd7ef5b491b5e24c25">TemplatedDatabase&lt;TDescriptor, F&gt;::~TemplatedDatabase<\/a>(<span class="keywordtype">void<\/span>)<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;{<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;}<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;::operator<\/a>=<\/div><div class="line"><a name="l00390"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a654d8d3c7f80172be1e091663e47535d">  390<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db)<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;{<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;  <span class="keywordflow">if<\/span>(<span class="keyword">this<\/span> != &amp;db)<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;  {<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    m_dBowfile = db.m_dBowfile;<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>;<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>;<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(*db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>);<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;  }<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;  <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;}<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00408"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">  408<\/a><\/span>&#160;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">TemplatedDatabase&lt;TDescriptor, F&gt;::add<\/a>(<\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features,<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> *bowvec, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> *fvec)<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;{<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> aux;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a>&amp; v = (bowvec ? *bowvec : aux);<\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;  <\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> &amp;&amp; fvec != NULL)<\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;  {<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v, *fvec, <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v, *fvec);<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;  }<\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>)<\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;  {<\/div><div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;    <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> fv;<\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v, fv, <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v, fv);<\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;  }<\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(fvec != NULL)<\/div><div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;  {<\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v, *fvec, <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v);<\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;  }<\/div><div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;  {<\/div><div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v);<\/div><div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;  }<\/div><div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;}<\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<\/div><div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00441"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa4e2521632542181e40930faffc8fee9">  441<\/a><\/span>&#160;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">TemplatedDatabase&lt;TDescriptor, F&gt;::add<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v,<\/div><div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fv)<\/div><div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;{<\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a> = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>++;<\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;  std::vector&lt;unsigned int&gt;::const_iterator iit;<\/div><div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;<\/div><div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>)<\/div><div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;  {<\/div><div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;    <span class="comment">\/\/ update direct file<\/span><\/div><div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;    <span class="keywordflow">if<\/span>(entry_id == <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.size())<\/div><div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;    {<\/div><div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.push_back(fv);<\/div><div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;      m_dBowfile.push_back(v);<\/div><div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;    }<\/div><div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;    {<\/div><div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>] = fv;<\/div><div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;      m_dBowfile[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>] = v;<\/div><div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;    }<\/div><div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;  }<\/div><div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;  <\/div><div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;  <span class="comment">\/\/ update inverted file<\/span><\/div><div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = v.begin(); vit != v.end(); ++vit)<\/div><div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;  {<\/div><div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a>&amp; word_id = vit-&gt;first;<\/div><div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#adf30c55dc6ff22de69c360bcb8961a0c">word_weight<\/a> = vit-&gt;second;<\/div><div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;    <\/div><div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; ifrow = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;    ifrow.push_back(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">IFPair<\/a>(entry_id, word_weight));<\/div><div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;  }<\/div><div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;  <\/div><div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>;<\/div><div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;}<\/div><div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;<\/div><div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;<\/div><div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;::delete_entry<\/a>(<span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>)<\/div><div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;{<\/div><div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> v = m_dBowfile[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>];<\/div><div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;<\/div><div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;<\/div><div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;  <span class="keywordflow">for<\/span> (vit = v.begin(); vit != v.end(); ++vit)<\/div><div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;  {<\/div><div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a>&amp; word_id = vit-&gt;first;<\/div><div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; ifrow = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;    <span class="keyword">typename<\/span> IFRow::iterator rit;<\/div><div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;    <span class="keywordflow">for<\/span> (rit = ifrow.begin(); rit != ifrow.end(); ++rit)<\/div><div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;    {<\/div><div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;      <span class="keywordflow">if<\/span> (rit-&gt;entry_id == entry_id)<\/div><div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;      {<\/div><div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;        ifrow.erase(rit);<\/div><div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;        <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;      }<\/div><div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;    }<\/div><div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;  }<\/div><div class="line"><a name="l00500"><\/a><span class="lineno">  500<\/span>&#160;  m_dBowfile[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>].clear();<\/div><div class="line"><a name="l00501"><\/a><span class="lineno">  501<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>].clear();<\/div><div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;}<\/div><div class="line"><a name="l00503"><\/a><span class="lineno">  503<\/span>&#160;<\/div><div class="line"><a name="l00504"><\/a><span class="lineno">  504<\/span>&#160;<\/div><div class="line"><a name="l00505"><\/a><span class="lineno">  505<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00506"><\/a><span class="lineno">  506<\/span>&#160;<\/div><div class="line"><a name="l00507"><\/a><span class="lineno">  507<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00509"><\/a><span class="lineno">  509<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">TemplatedDatabase&lt;TDescriptor, F&gt;::setVocabulary<\/a><\/div><div class="line"><a name="l00510"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">  510<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T&amp; voc)<\/div><div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;{<\/div><div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00513"><\/a><span class="lineno">  513<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a> = <span class="keyword">new<\/span> T(voc);<\/div><div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;}<\/div><div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;<\/div><div class="line"><a name="l00517"><\/a><span class="lineno">  517<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;<\/div><div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">TemplatedDatabase&lt;TDescriptor, F&gt;::setVocabulary<\/a><\/div><div class="line"><a name="l00522"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aaf1d0ecfdab16ff0609386e2638e76b6">  522<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T&amp; voc, <span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels)<\/div><div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;{<\/div><div class="line"><a name="l00524"><\/a><span class="lineno">  524<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> = use_di;<\/div><div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a> = di_levels;<\/div><div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00527"><\/a><span class="lineno">  527<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a> = <span class="keyword">new<\/span> T(voc);<\/div><div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;}<\/div><div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;<\/div><div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;<\/div><div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00534"><\/a><span class="lineno">  534<\/span>&#160;<span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;<\/a>* <\/div><div class="line"><a name="l00535"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">  535<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">TemplatedDatabase&lt;TDescriptor, F&gt;::getVocabulary<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;}<\/div><div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;<\/div><div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;<\/div><div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00543"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">  543<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">TemplatedDatabase&lt;TDescriptor, F&gt;::clear<\/a>()<\/div><div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;{<\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;  <span class="comment">\/\/ resize vectors<\/span><\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.resize(0);<\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.resize(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;size());<\/div><div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.resize(0);<\/div><div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;  m_dBowfile.resize(0);<\/div><div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> = 0;<\/div><div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;}<\/div><div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;<\/div><div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;<\/div><div class="line"><a name="l00555"><\/a><span class="lineno">  555<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00556"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a5b410217ede05dc0920e2adc1e20b4b5">  556<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a5b410217ede05dc0920e2adc1e20b4b5">TemplatedDatabase&lt;TDescriptor, F&gt;::allocate<\/a>(<span class="keywordtype">int<\/span> nd, <span class="keywordtype">int<\/span> ni)<\/div><div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;{<\/div><div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;  <span class="comment">\/\/ m_ifile already contains |words| items<\/span><\/div><div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;  <span class="keywordflow">if<\/span>(ni &gt; 0)<\/div><div class="line"><a name="l00560"><\/a><span class="lineno">  560<\/span>&#160;  {<\/div><div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;IFRow&gt;::iterator rit;<\/div><div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.begin(); rit != <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.end(); ++rit)<\/div><div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;    {<\/div><div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;      <span class="keywordtype">int<\/span> n = (int)rit-&gt;size();<\/div><div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;      <span class="keywordflow">if<\/span>(ni &gt; n)<\/div><div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;      {<\/div><div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;        rit-&gt;resize(ni);<\/div><div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;        rit-&gt;resize(n);<\/div><div class="line"><a name="l00569"><\/a><span class="lineno">  569<\/span>&#160;      }<\/div><div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;    }<\/div><div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;  }<\/div><div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;  <\/div><div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> &amp;&amp; (<span class="keywordtype">int<\/span>)<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.size() &lt; nd)<\/div><div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;  {<\/div><div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.resize(nd);<\/div><div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;    m_dBowfile.resize(nd);<\/div><div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;  }<\/div><div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;}<\/div><div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;<\/div><div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;<\/div><div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00583"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">  583<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">TemplatedDatabase&lt;TDescriptor, F&gt;::size<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00584"><\/a><span class="lineno">  584<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;}<\/div><div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;<\/div><div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00589"><\/a><span class="lineno">  589<\/span>&#160;<\/div><div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00591"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">  591<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">TemplatedDatabase&lt;TDescriptor, F&gt;::usingDirectIndex<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>;<\/div><div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;}<\/div><div class="line"><a name="l00595"><\/a><span class="lineno">  595<\/span>&#160;<\/div><div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;<\/div><div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00599"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">  599<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">TemplatedDatabase&lt;TDescriptor, F&gt;::getDirectIndexLevels<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l00602"><\/a><span class="lineno">  602<\/span>&#160;}<\/div><div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;<\/div><div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;<\/div><div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00607"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">  607<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">TemplatedDatabase&lt;TDescriptor, F&gt;::query<\/a>(<\/div><div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features,<\/div><div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> vec;<\/div><div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, vec);<\/div><div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">query<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;}<\/div><div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;<\/div><div class="line"><a name="l00616"><\/a><span class="lineno">  616<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;<\/div><div class="line"><a name="l00618"><\/a><span class="lineno">  618<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00619"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a5f7e3a3f5a63e9cb75ca37c4f1729296">  619<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">TemplatedDatabase&lt;TDescriptor, F&gt;::query<\/a>(<\/div><div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;  ret.resize(0);<\/div><div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;  <\/div><div class="line"><a name="l00625"><\/a><span class="lineno">  625<\/span>&#160;  <span class="keywordflow">switch<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;getScoringType())<\/div><div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;  {<\/div><div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;    <span class="keywordflow">case<\/span> L1_NORM:<\/div><div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">queryL1<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;      <\/div><div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;    <span class="keywordflow">case<\/span> L2_NORM:<\/div><div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">queryL2<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;      <\/div><div class="line"><a name="l00635"><\/a><span class="lineno">  635<\/span>&#160;    <span class="keywordflow">case<\/span> CHI_SQUARE:<\/div><div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">queryChiSquare<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;      <\/div><div class="line"><a name="l00639"><\/a><span class="lineno">  639<\/span>&#160;    <span class="keywordflow">case<\/span> KL:<\/div><div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">queryKL<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;      <\/div><div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;    <span class="keywordflow">case<\/span> BHATTACHARYYA:<\/div><div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a">queryBhattacharyya<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00645"><\/a><span class="lineno">  645<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;      <\/div><div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;    <span class="keywordflow">case<\/span> DOT_PRODUCT:<\/div><div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d">queryDotProduct<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;  }<\/div><div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;}<\/div><div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;<\/div><div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;<\/div><div class="line"><a name="l00655"><\/a><span class="lineno">  655<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00656"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">  656<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">TemplatedDatabase&lt;TDescriptor, F&gt;::queryL1<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;    <\/div><div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;  <\/div><div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;  {<\/div><div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;        <\/div><div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00671"><\/a><span class="lineno">  671<\/span>&#160;    <\/div><div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;    <\/div><div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;    {<\/div><div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;      <\/div><div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00680"><\/a><span class="lineno">  680<\/span>&#160;      {<\/div><div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;        <span class="keywordtype">double<\/span> value = fabs(qvalue - dvalue) - fabs(qvalue) - fabs(dvalue);<\/div><div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;        <\/div><div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;        {<\/div><div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;          pit-&gt;second += value;<\/div><div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;        }<\/div><div class="line"><a name="l00688"><\/a><span class="lineno">  688<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;        {<\/div><div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;        }<\/div><div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;      }<\/div><div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;      <\/div><div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;    <\/div><div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;  {<\/div><div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<\/div><div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;  }<\/div><div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;    <\/div><div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-2 best .. 0 worst] <\/span><\/div><div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;  <\/div><div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order of score<\/span><\/div><div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;  <span class="comment">\/\/ (ret is inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;<\/div><div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;  <\/div><div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;  <span class="comment">\/\/ complete and scale score to [0 worst .. 1 best]<\/span><\/div><div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;  <span class="comment">\/\/ ||v - w||_{L1} = 2 + Sum(|v_i - w_i| - |v_i| - |w_i|) <\/span><\/div><div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;  <span class="comment">\/\/        for all i | v_i != 0 and w_i != 0 <\/span><\/div><div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;  <span class="comment">\/\/ (Nister, 2006)<\/span><\/div><div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;  <span class="comment">\/\/ scaled_||v - w||_{L1} = 1 - 0.5 * ||v - w||_{L1}<\/span><\/div><div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;  QueryResults::iterator qit;<\/div><div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;  <span class="keywordflow">for<\/span>(qit = ret.begin(); qit != ret.end(); qit++) <\/div><div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;    qit-&gt;Score = -qit-&gt;Score\/2.0;<\/div><div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;}<\/div><div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;<\/div><div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;<\/div><div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00728"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">  728<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">TemplatedDatabase&lt;TDescriptor, F&gt;::queryL2<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;  <\/div><div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;  <\/div><div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, int&gt; counters;<\/span><\/div><div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, int&gt;::iterator cit;<\/span><\/div><div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;  <\/div><div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;  {<\/div><div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;    <\/div><div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;    <\/div><div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;    <\/div><div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;    {<\/div><div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;      <\/div><div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;      {<\/div><div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;        <span class="keywordtype">double<\/span> value = - qvalue * dvalue; <span class="comment">\/\/ minus sign for sorting trick<\/span><\/div><div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;        <\/div><div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;        <span class="comment">\/\/cit = counters.lower_bound(entry_id);<\/span><\/div><div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;        {<\/div><div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;          pit-&gt;second += value; <\/div><div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;          <span class="comment">\/\/cit-&gt;second += 1;<\/span><\/div><div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;        }<\/div><div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;        {<\/div><div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;          <\/div><div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;          <span class="comment">\/\/counters.insert(cit, <\/span><\/div><div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;          <span class="comment">\/\/  map&lt;EntryId, int&gt;::value_type(entry_id, 1));<\/span><\/div><div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;        }<\/div><div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;      }<\/div><div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;      <\/div><div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;    <\/div><div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;  <span class="comment">\/\/cit = counters.begin();<\/span><\/div><div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<span class="comment">\/\/, ++cit)<\/span><\/div><div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;  {<\/div><div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<span class="comment">\/\/ \/ cit-&gt;second));<\/span><\/div><div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;  }<\/div><div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;    <\/div><div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-1 best .. 0 worst] <\/span><\/div><div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;  <\/div><div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order of score<\/span><\/div><div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;  <span class="comment">\/\/ (ret is inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;<\/div><div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;<\/div><div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;  <span class="comment">\/\/ complete and scale score to [0 worst .. 1 best]<\/span><\/div><div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;  <span class="comment">\/\/ ||v - w||_{L2} = sqrt( 2 - 2 * Sum(v_i * w_i) <\/span><\/div><div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;    <span class="comment">\/\/      for all i | v_i != 0 and w_i != 0 )<\/span><\/div><div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;    <span class="comment">\/\/ (Nister, 2006)<\/span><\/div><div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;    QueryResults::iterator qit;<\/div><div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;  <span class="keywordflow">for<\/span>(qit = ret.begin(); qit != ret.end(); qit++) <\/div><div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;  {<\/div><div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;    <span class="keywordflow">if<\/span>(qit-&gt;Score &lt;= -1.0) <span class="comment">\/\/ rounding error<\/span><\/div><div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;      qit-&gt;Score = 1.0;<\/div><div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;      qit-&gt;Score = 1.0 - sqrt(1.0 + qit-&gt;Score); <span class="comment">\/\/ [0..1]<\/span><\/div><div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;      <span class="comment">\/\/ the + sign is ok, it is due to - sign in <\/span><\/div><div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;      <span class="comment">\/\/ value = - qvalue * dvalue<\/span><\/div><div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;  }<\/div><div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;  <\/div><div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;}<\/div><div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;<\/div><div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;<\/div><div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00816"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">  816<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">TemplatedDatabase&lt;TDescriptor, F&gt;::queryChiSquare<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;  <\/div><div class="line"><a name="l00822"><\/a><span class="lineno">  822<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt; pairs;<\/div><div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt;::iterator pit;<\/div><div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;  <\/div><div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, double&gt; &gt; sums; <span class="comment">\/\/ &lt; sum vi, sum wi &gt;<\/span><\/div><div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, double&gt; &gt;::iterator sit;<\/div><div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;  <\/div><div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;  <span class="comment">\/\/ In the current implementation, we suppose vec is not normalized<\/span><\/div><div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;  <\/div><div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt; expected;<\/span><\/div><div class="line"><a name="l00831"><\/a><span class="lineno">  831<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt;::iterator eit;<\/span><\/div><div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;  <\/div><div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;  {<\/div><div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;    <\/div><div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;    <\/div><div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;    <\/div><div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00843"><\/a><span class="lineno">  843<\/span>&#160;    {<\/div><div class="line"><a name="l00844"><\/a><span class="lineno">  844<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00845"><\/a><span class="lineno">  845<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l00846"><\/a><span class="lineno">  846<\/span>&#160;      <\/div><div class="line"><a name="l00847"><\/a><span class="lineno">  847<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00848"><\/a><span class="lineno">  848<\/span>&#160;      {<\/div><div class="line"><a name="l00849"><\/a><span class="lineno">  849<\/span>&#160;        <span class="comment">\/\/ (v-w)^2\/(v+w) - v - w = -4 vw\/(v+w)<\/span><\/div><div class="line"><a name="l00850"><\/a><span class="lineno">  850<\/span>&#160;        <span class="comment">\/\/ we move the 4 out<\/span><\/div><div class="line"><a name="l00851"><\/a><span class="lineno">  851<\/span>&#160;        <span class="keywordtype">double<\/span> value = 0;<\/div><div class="line"><a name="l00852"><\/a><span class="lineno">  852<\/span>&#160;        <span class="keywordflow">if<\/span>(qvalue + dvalue != 0.0) <span class="comment">\/\/ words may have weight zero<\/span><\/div><div class="line"><a name="l00853"><\/a><span class="lineno">  853<\/span>&#160;          value = - qvalue * dvalue \/ (qvalue + dvalue);<\/div><div class="line"><a name="l00854"><\/a><span class="lineno">  854<\/span>&#160;        <\/div><div class="line"><a name="l00855"><\/a><span class="lineno">  855<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00856"><\/a><span class="lineno">  856<\/span>&#160;        sit = sums.lower_bound(entry_id);<\/div><div class="line"><a name="l00857"><\/a><span class="lineno">  857<\/span>&#160;        <span class="comment">\/\/eit = expected.lower_bound(entry_id);<\/span><\/div><div class="line"><a name="l00858"><\/a><span class="lineno">  858<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00859"><\/a><span class="lineno">  859<\/span>&#160;        {<\/div><div class="line"><a name="l00860"><\/a><span class="lineno">  860<\/span>&#160;          pit-&gt;second.first += value;<\/div><div class="line"><a name="l00861"><\/a><span class="lineno">  861<\/span>&#160;          pit-&gt;second.second += 1;<\/div><div class="line"><a name="l00862"><\/a><span class="lineno">  862<\/span>&#160;          <span class="comment">\/\/eit-&gt;second += dvalue;<\/span><\/div><div class="line"><a name="l00863"><\/a><span class="lineno">  863<\/span>&#160;          sit-&gt;second.first += qvalue;<\/div><div class="line"><a name="l00864"><\/a><span class="lineno">  864<\/span>&#160;          sit-&gt;second.second += dvalue;<\/div><div class="line"><a name="l00865"><\/a><span class="lineno">  865<\/span>&#160;        }<\/div><div class="line"><a name="l00866"><\/a><span class="lineno">  866<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00867"><\/a><span class="lineno">  867<\/span>&#160;        {<\/div><div class="line"><a name="l00868"><\/a><span class="lineno">  868<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00869"><\/a><span class="lineno">  869<\/span>&#160;            std::map&lt;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>, std::pair&lt;double, int&gt; &gt;::value_type(entry_id,<\/div><div class="line"><a name="l00870"><\/a><span class="lineno">  870<\/span>&#160;              std::make_pair(value, 1) ));<\/div><div class="line"><a name="l00871"><\/a><span class="lineno">  871<\/span>&#160;          <span class="comment">\/\/expected.insert(eit, <\/span><\/div><div class="line"><a name="l00872"><\/a><span class="lineno">  872<\/span>&#160;          <span class="comment">\/\/  map&lt;EntryId, double&gt;::value_type(entry_id, dvalue));<\/span><\/div><div class="line"><a name="l00873"><\/a><span class="lineno">  873<\/span>&#160;          <\/div><div class="line"><a name="l00874"><\/a><span class="lineno">  874<\/span>&#160;          sums.insert(sit, <\/div><div class="line"><a name="l00875"><\/a><span class="lineno">  875<\/span>&#160;            std::map&lt;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>, std::pair&lt;double, double&gt; &gt;::value_type(entry_id,<\/div><div class="line"><a name="l00876"><\/a><span class="lineno">  876<\/span>&#160;              std::make_pair(qvalue, dvalue) ));<\/div><div class="line"><a name="l00877"><\/a><span class="lineno">  877<\/span>&#160;        }<\/div><div class="line"><a name="l00878"><\/a><span class="lineno">  878<\/span>&#160;      }<\/div><div class="line"><a name="l00879"><\/a><span class="lineno">  879<\/span>&#160;      <\/div><div class="line"><a name="l00880"><\/a><span class="lineno">  880<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00881"><\/a><span class="lineno">  881<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00882"><\/a><span class="lineno">  882<\/span>&#160;    <\/div><div class="line"><a name="l00883"><\/a><span class="lineno">  883<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l00884"><\/a><span class="lineno">  884<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00885"><\/a><span class="lineno">  885<\/span>&#160;  sit = sums.begin();<\/div><div class="line"><a name="l00886"><\/a><span class="lineno">  886<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit, ++sit)<\/div><div class="line"><a name="l00887"><\/a><span class="lineno">  887<\/span>&#160;  {<\/div><div class="line"><a name="l00888"><\/a><span class="lineno">  888<\/span>&#160;    <span class="keywordflow">if<\/span>(pit-&gt;second.second &gt;= MIN_COMMON_WORDS)<\/div><div class="line"><a name="l00889"><\/a><span class="lineno">  889<\/span>&#160;    {<\/div><div class="line"><a name="l00890"><\/a><span class="lineno">  890<\/span>&#160;      ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second.first));<\/div><div class="line"><a name="l00891"><\/a><span class="lineno">  891<\/span>&#160;      ret.back().nWords = pit-&gt;second.second;<\/div><div class="line"><a name="l00892"><\/a><span class="lineno">  892<\/span>&#160;      ret.back().sumCommonVi = sit-&gt;second.first;<\/div><div class="line"><a name="l00893"><\/a><span class="lineno">  893<\/span>&#160;      ret.back().sumCommonWi = sit-&gt;second.second;<\/div><div class="line"><a name="l00894"><\/a><span class="lineno">  894<\/span>&#160;      ret.back().expectedChiScore = <\/div><div class="line"><a name="l00895"><\/a><span class="lineno">  895<\/span>&#160;        2 * sit-&gt;second.second \/ (1 + sit-&gt;second.second);<\/div><div class="line"><a name="l00896"><\/a><span class="lineno">  896<\/span>&#160;    }<\/div><div class="line"><a name="l00897"><\/a><span class="lineno">  897<\/span>&#160;  <\/div><div class="line"><a name="l00898"><\/a><span class="lineno">  898<\/span>&#160;    <span class="comment">\/\/ret.push_back(Result(pit-&gt;first, pit-&gt;second));<\/span><\/div><div class="line"><a name="l00899"><\/a><span class="lineno">  899<\/span>&#160;  }<\/div><div class="line"><a name="l00900"><\/a><span class="lineno">  900<\/span>&#160;    <\/div><div class="line"><a name="l00901"><\/a><span class="lineno">  901<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-2 best .. 0 worst] <\/span><\/div><div class="line"><a name="l00902"><\/a><span class="lineno">  902<\/span>&#160;  <span class="comment">\/\/ we have to add +2 to the scores to obtain the chi square score<\/span><\/div><div class="line"><a name="l00903"><\/a><span class="lineno">  903<\/span>&#160;  <\/div><div class="line"><a name="l00904"><\/a><span class="lineno">  904<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order of score<\/span><\/div><div class="line"><a name="l00905"><\/a><span class="lineno">  905<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l00906"><\/a><span class="lineno">  906<\/span>&#160;  <span class="comment">\/\/ (ret is inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l00907"><\/a><span class="lineno">  907<\/span>&#160;<\/div><div class="line"><a name="l00908"><\/a><span class="lineno">  908<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l00909"><\/a><span class="lineno">  909<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l00910"><\/a><span class="lineno">  910<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l00911"><\/a><span class="lineno">  911<\/span>&#160;<\/div><div class="line"><a name="l00912"><\/a><span class="lineno">  912<\/span>&#160;  <span class="comment">\/\/ complete and scale score to [0 worst .. 1 best]<\/span><\/div><div class="line"><a name="l00913"><\/a><span class="lineno">  913<\/span>&#160;  QueryResults::iterator qit;<\/div><div class="line"><a name="l00914"><\/a><span class="lineno">  914<\/span>&#160;  <span class="keywordflow">for<\/span>(qit = ret.begin(); qit != ret.end(); qit++)<\/div><div class="line"><a name="l00915"><\/a><span class="lineno">  915<\/span>&#160;  {<\/div><div class="line"><a name="l00916"><\/a><span class="lineno">  916<\/span>&#160;    <span class="comment">\/\/ this takes the 4 into account<\/span><\/div><div class="line"><a name="l00917"><\/a><span class="lineno">  917<\/span>&#160;    qit-&gt;Score = - 2. * qit-&gt;Score; <span class="comment">\/\/ [0..1]<\/span><\/div><div class="line"><a name="l00918"><\/a><span class="lineno">  918<\/span>&#160;    <\/div><div class="line"><a name="l00919"><\/a><span class="lineno">  919<\/span>&#160;    qit-&gt;chiScore = qit-&gt;Score;<\/div><div class="line"><a name="l00920"><\/a><span class="lineno">  920<\/span>&#160;  }<\/div><div class="line"><a name="l00921"><\/a><span class="lineno">  921<\/span>&#160;  <\/div><div class="line"><a name="l00922"><\/a><span class="lineno">  922<\/span>&#160;}<\/div><div class="line"><a name="l00923"><\/a><span class="lineno">  923<\/span>&#160;<\/div><div class="line"><a name="l00924"><\/a><span class="lineno">  924<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00925"><\/a><span class="lineno">  925<\/span>&#160;<\/div><div class="line"><a name="l00926"><\/a><span class="lineno">  926<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00927"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">  927<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">TemplatedDatabase&lt;TDescriptor, F&gt;::queryKL<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00928"><\/a><span class="lineno">  928<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00929"><\/a><span class="lineno">  929<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00930"><\/a><span class="lineno">  930<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00931"><\/a><span class="lineno">  931<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00932"><\/a><span class="lineno">  932<\/span>&#160;  <\/div><div class="line"><a name="l00933"><\/a><span class="lineno">  933<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l00934"><\/a><span class="lineno">  934<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l00935"><\/a><span class="lineno">  935<\/span>&#160;  <\/div><div class="line"><a name="l00936"><\/a><span class="lineno">  936<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00937"><\/a><span class="lineno">  937<\/span>&#160;  {<\/div><div class="line"><a name="l00938"><\/a><span class="lineno">  938<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00939"><\/a><span class="lineno">  939<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; vi = vit-&gt;second;<\/div><div class="line"><a name="l00940"><\/a><span class="lineno">  940<\/span>&#160;    <\/div><div class="line"><a name="l00941"><\/a><span class="lineno">  941<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00942"><\/a><span class="lineno">  942<\/span>&#160;    <\/div><div class="line"><a name="l00943"><\/a><span class="lineno">  943<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00944"><\/a><span class="lineno">  944<\/span>&#160;    <\/div><div class="line"><a name="l00945"><\/a><span class="lineno">  945<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00946"><\/a><span class="lineno">  946<\/span>&#160;    {    <\/div><div class="line"><a name="l00947"><\/a><span class="lineno">  947<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00948"><\/a><span class="lineno">  948<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; wi = rit-&gt;word_weight;<\/div><div class="line"><a name="l00949"><\/a><span class="lineno">  949<\/span>&#160;      <\/div><div class="line"><a name="l00950"><\/a><span class="lineno">  950<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00951"><\/a><span class="lineno">  951<\/span>&#160;      {<\/div><div class="line"><a name="l00952"><\/a><span class="lineno">  952<\/span>&#160;        <span class="keywordtype">double<\/span> value = 0;<\/div><div class="line"><a name="l00953"><\/a><span class="lineno">  953<\/span>&#160;        <span class="keywordflow">if<\/span>(vi != 0 &amp;&amp; wi != 0) value = vi * log(vi\/wi);<\/div><div class="line"><a name="l00954"><\/a><span class="lineno">  954<\/span>&#160;        <\/div><div class="line"><a name="l00955"><\/a><span class="lineno">  955<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00956"><\/a><span class="lineno">  956<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00957"><\/a><span class="lineno">  957<\/span>&#160;        {<\/div><div class="line"><a name="l00958"><\/a><span class="lineno">  958<\/span>&#160;          pit-&gt;second += value;<\/div><div class="line"><a name="l00959"><\/a><span class="lineno">  959<\/span>&#160;        }<\/div><div class="line"><a name="l00960"><\/a><span class="lineno">  960<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00961"><\/a><span class="lineno">  961<\/span>&#160;        {<\/div><div class="line"><a name="l00962"><\/a><span class="lineno">  962<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00963"><\/a><span class="lineno">  963<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l00964"><\/a><span class="lineno">  964<\/span>&#160;        }<\/div><div class="line"><a name="l00965"><\/a><span class="lineno">  965<\/span>&#160;      }<\/div><div class="line"><a name="l00966"><\/a><span class="lineno">  966<\/span>&#160;      <\/div><div class="line"><a name="l00967"><\/a><span class="lineno">  967<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00968"><\/a><span class="lineno">  968<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00969"><\/a><span class="lineno">  969<\/span>&#160;    <\/div><div class="line"><a name="l00970"><\/a><span class="lineno">  970<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-X worst .. 0 best .. X worst]<\/span><\/div><div class="line"><a name="l00971"><\/a><span class="lineno">  971<\/span>&#160;  <span class="comment">\/\/ but we cannot make sure which ones are better without calculating<\/span><\/div><div class="line"><a name="l00972"><\/a><span class="lineno">  972<\/span>&#160;  <span class="comment">\/\/ the complete score<\/span><\/div><div class="line"><a name="l00973"><\/a><span class="lineno">  973<\/span>&#160;<\/div><div class="line"><a name="l00974"><\/a><span class="lineno">  974<\/span>&#160;  <span class="comment">\/\/ complete scores and move to vector<\/span><\/div><div class="line"><a name="l00975"><\/a><span class="lineno">  975<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00976"><\/a><span class="lineno">  976<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l00977"><\/a><span class="lineno">  977<\/span>&#160;  {<\/div><div class="line"><a name="l00978"><\/a><span class="lineno">  978<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid = pit-&gt;first;<\/div><div class="line"><a name="l00979"><\/a><span class="lineno">  979<\/span>&#160;    <span class="keywordtype">double<\/span> value = 0.0;<\/div><div class="line"><a name="l00980"><\/a><span class="lineno">  980<\/span>&#160;<\/div><div class="line"><a name="l00981"><\/a><span class="lineno">  981<\/span>&#160;    <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00982"><\/a><span class="lineno">  982<\/span>&#160;    {<\/div><div class="line"><a name="l00983"><\/a><span class="lineno">  983<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> &amp;vi = vit-&gt;second;<\/div><div class="line"><a name="l00984"><\/a><span class="lineno">  984<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[vit-&gt;first];<\/div><div class="line"><a name="l00985"><\/a><span class="lineno">  985<\/span>&#160;<\/div><div class="line"><a name="l00986"><\/a><span class="lineno">  986<\/span>&#160;      <span class="keywordflow">if<\/span>(vi != 0)<\/div><div class="line"><a name="l00987"><\/a><span class="lineno">  987<\/span>&#160;      {<\/div><div class="line"><a name="l00988"><\/a><span class="lineno">  988<\/span>&#160;        <span class="keywordflow">if<\/span>(row.end() == find(row.begin(), row.end(), eid ))<\/div><div class="line"><a name="l00989"><\/a><span class="lineno">  989<\/span>&#160;        {<\/div><div class="line"><a name="l00990"><\/a><span class="lineno">  990<\/span>&#160;          value += vi * (log(vi) - <a class="code" href="classDBoW2_1_1GeneralScoring.html#a4e9388752852ebc9e247ad50bf6d128e">GeneralScoring::LOG_EPS<\/a>);<\/div><div class="line"><a name="l00991"><\/a><span class="lineno">  991<\/span>&#160;        }<\/div><div class="line"><a name="l00992"><\/a><span class="lineno">  992<\/span>&#160;      }<\/div><div class="line"><a name="l00993"><\/a><span class="lineno">  993<\/span>&#160;    }<\/div><div class="line"><a name="l00994"><\/a><span class="lineno">  994<\/span>&#160;    <\/div><div class="line"><a name="l00995"><\/a><span class="lineno">  995<\/span>&#160;    pit-&gt;second += value;<\/div><div class="line"><a name="l00996"><\/a><span class="lineno">  996<\/span>&#160;    <\/div><div class="line"><a name="l00997"><\/a><span class="lineno">  997<\/span>&#160;    <span class="comment">\/\/ to vector<\/span><\/div><div class="line"><a name="l00998"><\/a><span class="lineno">  998<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<\/div><div class="line"><a name="l00999"><\/a><span class="lineno">  999<\/span>&#160;  }<\/div><div class="line"><a name="l01000"><\/a><span class="lineno"> 1000<\/span>&#160;  <\/div><div class="line"><a name="l01001"><\/a><span class="lineno"> 1001<\/span>&#160;  <span class="comment">\/\/ real scores are now in [0 best .. X worst]<\/span><\/div><div class="line"><a name="l01002"><\/a><span class="lineno"> 1002<\/span>&#160;<\/div><div class="line"><a name="l01003"><\/a><span class="lineno"> 1003<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order<\/span><\/div><div class="line"><a name="l01004"><\/a><span class="lineno"> 1004<\/span>&#160;  <span class="comment">\/\/ (scores are inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l01005"><\/a><span class="lineno"> 1005<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l01006"><\/a><span class="lineno"> 1006<\/span>&#160;<\/div><div class="line"><a name="l01007"><\/a><span class="lineno"> 1007<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l01008"><\/a><span class="lineno"> 1008<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l01009"><\/a><span class="lineno"> 1009<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l01010"><\/a><span class="lineno"> 1010<\/span>&#160;<\/div><div class="line"><a name="l01011"><\/a><span class="lineno"> 1011<\/span>&#160;  <span class="comment">\/\/ cannot scale scores<\/span><\/div><div class="line"><a name="l01012"><\/a><span class="lineno"> 1012<\/span>&#160;    <\/div><div class="line"><a name="l01013"><\/a><span class="lineno"> 1013<\/span>&#160;}<\/div><div class="line"><a name="l01014"><\/a><span class="lineno"> 1014<\/span>&#160;<\/div><div class="line"><a name="l01015"><\/a><span class="lineno"> 1015<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01016"><\/a><span class="lineno"> 1016<\/span>&#160;<\/div><div class="line"><a name="l01017"><\/a><span class="lineno"> 1017<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01018"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a"> 1018<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a">TemplatedDatabase&lt;TDescriptor, F&gt;::queryBhattacharyya<\/a>(<\/div><div class="line"><a name="l01019"><\/a><span class="lineno"> 1019<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01020"><\/a><span class="lineno"> 1020<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01021"><\/a><span class="lineno"> 1021<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l01022"><\/a><span class="lineno"> 1022<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l01023"><\/a><span class="lineno"> 1023<\/span>&#160;  <\/div><div class="line"><a name="l01024"><\/a><span class="lineno"> 1024<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt; pairs;<\/span><\/div><div class="line"><a name="l01025"><\/a><span class="lineno"> 1025<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt;::iterator pit;<\/span><\/div><div class="line"><a name="l01026"><\/a><span class="lineno"> 1026<\/span>&#160;  <\/div><div class="line"><a name="l01027"><\/a><span class="lineno"> 1027<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt; pairs; <span class="comment">\/\/ &lt;eid, &lt;score, counter&gt; &gt;<\/span><\/div><div class="line"><a name="l01028"><\/a><span class="lineno"> 1028<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt;::iterator pit;<\/div><div class="line"><a name="l01029"><\/a><span class="lineno"> 1029<\/span>&#160;  <\/div><div class="line"><a name="l01030"><\/a><span class="lineno"> 1030<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l01031"><\/a><span class="lineno"> 1031<\/span>&#160;  {<\/div><div class="line"><a name="l01032"><\/a><span class="lineno"> 1032<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l01033"><\/a><span class="lineno"> 1033<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l01034"><\/a><span class="lineno"> 1034<\/span>&#160;    <\/div><div class="line"><a name="l01035"><\/a><span class="lineno"> 1035<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l01036"><\/a><span class="lineno"> 1036<\/span>&#160;    <\/div><div class="line"><a name="l01037"><\/a><span class="lineno"> 1037<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l01038"><\/a><span class="lineno"> 1038<\/span>&#160;    <\/div><div class="line"><a name="l01039"><\/a><span class="lineno"> 1039<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l01040"><\/a><span class="lineno"> 1040<\/span>&#160;    {<\/div><div class="line"><a name="l01041"><\/a><span class="lineno"> 1041<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l01042"><\/a><span class="lineno"> 1042<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l01043"><\/a><span class="lineno"> 1043<\/span>&#160;      <\/div><div class="line"><a name="l01044"><\/a><span class="lineno"> 1044<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l01045"><\/a><span class="lineno"> 1045<\/span>&#160;      {<\/div><div class="line"><a name="l01046"><\/a><span class="lineno"> 1046<\/span>&#160;        <span class="keywordtype">double<\/span> value = sqrt(qvalue * dvalue);<\/div><div class="line"><a name="l01047"><\/a><span class="lineno"> 1047<\/span>&#160;        <\/div><div class="line"><a name="l01048"><\/a><span class="lineno"> 1048<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l01049"><\/a><span class="lineno"> 1049<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l01050"><\/a><span class="lineno"> 1050<\/span>&#160;        {<\/div><div class="line"><a name="l01051"><\/a><span class="lineno"> 1051<\/span>&#160;          pit-&gt;second.first += value;<\/div><div class="line"><a name="l01052"><\/a><span class="lineno"> 1052<\/span>&#160;          pit-&gt;second.second += 1;<\/div><div class="line"><a name="l01053"><\/a><span class="lineno"> 1053<\/span>&#160;        }<\/div><div class="line"><a name="l01054"><\/a><span class="lineno"> 1054<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01055"><\/a><span class="lineno"> 1055<\/span>&#160;        {<\/div><div class="line"><a name="l01056"><\/a><span class="lineno"> 1056<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l01057"><\/a><span class="lineno"> 1057<\/span>&#160;            std::map&lt;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>, std::pair&lt;double, int&gt; &gt;::value_type(entry_id,<\/div><div class="line"><a name="l01058"><\/a><span class="lineno"> 1058<\/span>&#160;              std::make_pair(value, 1)));<\/div><div class="line"><a name="l01059"><\/a><span class="lineno"> 1059<\/span>&#160;        }<\/div><div class="line"><a name="l01060"><\/a><span class="lineno"> 1060<\/span>&#160;      }<\/div><div class="line"><a name="l01061"><\/a><span class="lineno"> 1061<\/span>&#160;      <\/div><div class="line"><a name="l01062"><\/a><span class="lineno"> 1062<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l01063"><\/a><span class="lineno"> 1063<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l01064"><\/a><span class="lineno"> 1064<\/span>&#160;    <\/div><div class="line"><a name="l01065"><\/a><span class="lineno"> 1065<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l01066"><\/a><span class="lineno"> 1066<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l01067"><\/a><span class="lineno"> 1067<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l01068"><\/a><span class="lineno"> 1068<\/span>&#160;  {<\/div><div class="line"><a name="l01069"><\/a><span class="lineno"> 1069<\/span>&#160;    <span class="keywordflow">if<\/span>(pit-&gt;second.second &gt;= MIN_COMMON_WORDS)<\/div><div class="line"><a name="l01070"><\/a><span class="lineno"> 1070<\/span>&#160;    {<\/div><div class="line"><a name="l01071"><\/a><span class="lineno"> 1071<\/span>&#160;      ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second.first));<\/div><div class="line"><a name="l01072"><\/a><span class="lineno"> 1072<\/span>&#160;      ret.back().nWords = pit-&gt;second.second;<\/div><div class="line"><a name="l01073"><\/a><span class="lineno"> 1073<\/span>&#160;      ret.back().bhatScore = pit-&gt;second.first;<\/div><div class="line"><a name="l01074"><\/a><span class="lineno"> 1074<\/span>&#160;    }<\/div><div class="line"><a name="l01075"><\/a><span class="lineno"> 1075<\/span>&#160;  }<\/div><div class="line"><a name="l01076"><\/a><span class="lineno"> 1076<\/span>&#160;    <\/div><div class="line"><a name="l01077"><\/a><span class="lineno"> 1077<\/span>&#160;  <span class="comment">\/\/ scores are already in [0..1]<\/span><\/div><div class="line"><a name="l01078"><\/a><span class="lineno"> 1078<\/span>&#160;<\/div><div class="line"><a name="l01079"><\/a><span class="lineno"> 1079<\/span>&#160;  <span class="comment">\/\/ sort vector in descending order<\/span><\/div><div class="line"><a name="l01080"><\/a><span class="lineno"> 1080<\/span>&#160;  std::sort(ret.begin(), ret.end(), <a class="code" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">Result::gt<\/a>);<\/div><div class="line"><a name="l01081"><\/a><span class="lineno"> 1081<\/span>&#160;<\/div><div class="line"><a name="l01082"><\/a><span class="lineno"> 1082<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l01083"><\/a><span class="lineno"> 1083<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l01084"><\/a><span class="lineno"> 1084<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l01085"><\/a><span class="lineno"> 1085<\/span>&#160;<\/div><div class="line"><a name="l01086"><\/a><span class="lineno"> 1086<\/span>&#160;}<\/div><div class="line"><a name="l01087"><\/a><span class="lineno"> 1087<\/span>&#160;<\/div><div class="line"><a name="l01088"><\/a><span class="lineno"> 1088<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01089"><\/a><span class="lineno"> 1089<\/span>&#160;<\/div><div class="line"><a name="l01090"><\/a><span class="lineno"> 1090<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01091"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d"> 1091<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d">TemplatedDatabase&lt;TDescriptor, F&gt;::queryDotProduct<\/a>(<\/div><div class="line"><a name="l01092"><\/a><span class="lineno"> 1092<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01093"><\/a><span class="lineno"> 1093<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01094"><\/a><span class="lineno"> 1094<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l01095"><\/a><span class="lineno"> 1095<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l01096"><\/a><span class="lineno"> 1096<\/span>&#160;  <\/div><div class="line"><a name="l01097"><\/a><span class="lineno"> 1097<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l01098"><\/a><span class="lineno"> 1098<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l01099"><\/a><span class="lineno"> 1099<\/span>&#160;  <\/div><div class="line"><a name="l01100"><\/a><span class="lineno"> 1100<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l01101"><\/a><span class="lineno"> 1101<\/span>&#160;  {<\/div><div class="line"><a name="l01102"><\/a><span class="lineno"> 1102<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l01103"><\/a><span class="lineno"> 1103<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l01104"><\/a><span class="lineno"> 1104<\/span>&#160;    <\/div><div class="line"><a name="l01105"><\/a><span class="lineno"> 1105<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l01106"><\/a><span class="lineno"> 1106<\/span>&#160;    <\/div><div class="line"><a name="l01107"><\/a><span class="lineno"> 1107<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l01108"><\/a><span class="lineno"> 1108<\/span>&#160;    <\/div><div class="line"><a name="l01109"><\/a><span class="lineno"> 1109<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l01110"><\/a><span class="lineno"> 1110<\/span>&#160;    {<\/div><div class="line"><a name="l01111"><\/a><span class="lineno"> 1111<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l01112"><\/a><span class="lineno"> 1112<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l01113"><\/a><span class="lineno"> 1113<\/span>&#160;      <\/div><div class="line"><a name="l01114"><\/a><span class="lineno"> 1114<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l01115"><\/a><span class="lineno"> 1115<\/span>&#160;      {<\/div><div class="line"><a name="l01116"><\/a><span class="lineno"> 1116<\/span>&#160;        <span class="keywordtype">double<\/span> value; <\/div><div class="line"><a name="l01117"><\/a><span class="lineno"> 1117<\/span>&#160;        <span class="keywordflow">if<\/span>(this-&gt;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;getWeightingType() == BINARY)<\/div><div class="line"><a name="l01118"><\/a><span class="lineno"> 1118<\/span>&#160;          value = 1;<\/div><div class="line"><a name="l01119"><\/a><span class="lineno"> 1119<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01120"><\/a><span class="lineno"> 1120<\/span>&#160;          value = qvalue * dvalue;<\/div><div class="line"><a name="l01121"><\/a><span class="lineno"> 1121<\/span>&#160;        <\/div><div class="line"><a name="l01122"><\/a><span class="lineno"> 1122<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l01123"><\/a><span class="lineno"> 1123<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l01124"><\/a><span class="lineno"> 1124<\/span>&#160;        {<\/div><div class="line"><a name="l01125"><\/a><span class="lineno"> 1125<\/span>&#160;          pit-&gt;second += value;<\/div><div class="line"><a name="l01126"><\/a><span class="lineno"> 1126<\/span>&#160;        }<\/div><div class="line"><a name="l01127"><\/a><span class="lineno"> 1127<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01128"><\/a><span class="lineno"> 1128<\/span>&#160;        {<\/div><div class="line"><a name="l01129"><\/a><span class="lineno"> 1129<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l01130"><\/a><span class="lineno"> 1130<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l01131"><\/a><span class="lineno"> 1131<\/span>&#160;        }<\/div><div class="line"><a name="l01132"><\/a><span class="lineno"> 1132<\/span>&#160;      }<\/div><div class="line"><a name="l01133"><\/a><span class="lineno"> 1133<\/span>&#160;      <\/div><div class="line"><a name="l01134"><\/a><span class="lineno"> 1134<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l01135"><\/a><span class="lineno"> 1135<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l01136"><\/a><span class="lineno"> 1136<\/span>&#160;    <\/div><div class="line"><a name="l01137"><\/a><span class="lineno"> 1137<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l01138"><\/a><span class="lineno"> 1138<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l01139"><\/a><span class="lineno"> 1139<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l01140"><\/a><span class="lineno"> 1140<\/span>&#160;  {<\/div><div class="line"><a name="l01141"><\/a><span class="lineno"> 1141<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<\/div><div class="line"><a name="l01142"><\/a><span class="lineno"> 1142<\/span>&#160;  }<\/div><div class="line"><a name="l01143"><\/a><span class="lineno"> 1143<\/span>&#160;    <\/div><div class="line"><a name="l01144"><\/a><span class="lineno"> 1144<\/span>&#160;  <span class="comment">\/\/ scores are the greater the better<\/span><\/div><div class="line"><a name="l01145"><\/a><span class="lineno"> 1145<\/span>&#160;<\/div><div class="line"><a name="l01146"><\/a><span class="lineno"> 1146<\/span>&#160;  <span class="comment">\/\/ sort vector in descending order<\/span><\/div><div class="line"><a name="l01147"><\/a><span class="lineno"> 1147<\/span>&#160;  std::sort(ret.begin(), ret.end(), <a class="code" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">Result::gt<\/a>);<\/div><div class="line"><a name="l01148"><\/a><span class="lineno"> 1148<\/span>&#160;<\/div><div class="line"><a name="l01149"><\/a><span class="lineno"> 1149<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l01150"><\/a><span class="lineno"> 1150<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l01151"><\/a><span class="lineno"> 1151<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l01152"><\/a><span class="lineno"> 1152<\/span>&#160;<\/div><div class="line"><a name="l01153"><\/a><span class="lineno"> 1153<\/span>&#160;  <span class="comment">\/\/ these scores cannot be scaled<\/span><\/div><div class="line"><a name="l01154"><\/a><span class="lineno"> 1154<\/span>&#160;}<\/div><div class="line"><a name="l01155"><\/a><span class="lineno"> 1155<\/span>&#160;<\/div><div class="line"><a name="l01156"><\/a><span class="lineno"> 1156<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01157"><\/a><span class="lineno"> 1157<\/span>&#160;<\/div><div class="line"><a name="l01158"><\/a><span class="lineno"> 1158<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01159"><\/a><span class="lineno"> 1159<\/span>&#160;<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa2517a2f5b946741bd6a9932c60f75a1">TemplatedDatabase&lt;TDescriptor, F&gt;::retrieveFeatures<\/a><\/div><div class="line"><a name="l01160"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa2517a2f5b946741bd6a9932c60f75a1"> 1160<\/a><\/span>&#160;  (<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <span class="keywordtype">id<\/span>) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01161"><\/a><span class="lineno"> 1161<\/span>&#160;{<\/div><div class="line"><a name="l01162"><\/a><span class="lineno"> 1162<\/span>&#160;  assert(<span class="keywordtype">id<\/span> &lt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">size<\/a>());<\/div><div class="line"><a name="l01163"><\/a><span class="lineno"> 1163<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[id];<\/div><div class="line"><a name="l01164"><\/a><span class="lineno"> 1164<\/span>&#160;}<\/div><div class="line"><a name="l01165"><\/a><span class="lineno"> 1165<\/span>&#160;<\/div><div class="line"><a name="l01166"><\/a><span class="lineno"> 1166<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01167"><\/a><span class="lineno"> 1167<\/span>&#160;<\/div><div class="line"><a name="l01168"><\/a><span class="lineno"> 1168<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01169"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878"> 1169<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">TemplatedDatabase&lt;TDescriptor, F&gt;::save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01170"><\/a><span class="lineno"> 1170<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01171"><\/a><span class="lineno"> 1171<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::WRITE);<\/div><div class="line"><a name="l01172"><\/a><span class="lineno"> 1172<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01173"><\/a><span class="lineno"> 1173<\/span>&#160;  <\/div><div class="line"><a name="l01174"><\/a><span class="lineno"> 1174<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">save<\/a>(fs);<\/div><div class="line"><a name="l01175"><\/a><span class="lineno"> 1175<\/span>&#160;}<\/div><div class="line"><a name="l01176"><\/a><span class="lineno"> 1176<\/span>&#160;<\/div><div class="line"><a name="l01177"><\/a><span class="lineno"> 1177<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01178"><\/a><span class="lineno"> 1178<\/span>&#160;<\/div><div class="line"><a name="l01179"><\/a><span class="lineno"> 1179<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01180"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a3fab0f045b002b1052f217c3f8648fe5"> 1180<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">TemplatedDatabase&lt;TDescriptor, F&gt;::save<\/a>(cv::FileStorage &amp;fs,<\/div><div class="line"><a name="l01181"><\/a><span class="lineno"> 1181<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01182"><\/a><span class="lineno"> 1182<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01183"><\/a><span class="lineno"> 1183<\/span>&#160;  <span class="comment">\/\/ Format YAML:<\/span><\/div><div class="line"><a name="l01184"><\/a><span class="lineno"> 1184<\/span>&#160;  <span class="comment">\/\/ vocabulary { ... see TemplatedVocabulary::save }<\/span><\/div><div class="line"><a name="l01185"><\/a><span class="lineno"> 1185<\/span>&#160;  <span class="comment">\/\/ database <\/span><\/div><div class="line"><a name="l01186"><\/a><span class="lineno"> 1186<\/span>&#160;  <span class="comment">\/\/ {<\/span><\/div><div class="line"><a name="l01187"><\/a><span class="lineno"> 1187<\/span>&#160;  <span class="comment">\/\/   nEntries: <\/span><\/div><div class="line"><a name="l01188"><\/a><span class="lineno"> 1188<\/span>&#160;  <span class="comment">\/\/   usingDI: <\/span><\/div><div class="line"><a name="l01189"><\/a><span class="lineno"> 1189<\/span>&#160;  <span class="comment">\/\/   diLevels: <\/span><\/div><div class="line"><a name="l01190"><\/a><span class="lineno"> 1190<\/span>&#160;  <span class="comment">\/\/   invertedIndex<\/span><\/div><div class="line"><a name="l01191"><\/a><span class="lineno"> 1191<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01192"><\/a><span class="lineno"> 1192<\/span>&#160;  <span class="comment">\/\/     [<\/span><\/div><div class="line"><a name="l01193"><\/a><span class="lineno"> 1193<\/span>&#160;  <span class="comment">\/\/        { <\/span><\/div><div class="line"><a name="l01194"><\/a><span class="lineno"> 1194<\/span>&#160;  <span class="comment">\/\/          imageId: <\/span><\/div><div class="line"><a name="l01195"><\/a><span class="lineno"> 1195<\/span>&#160;  <span class="comment">\/\/          weight: <\/span><\/div><div class="line"><a name="l01196"><\/a><span class="lineno"> 1196<\/span>&#160;  <span class="comment">\/\/        }<\/span><\/div><div class="line"><a name="l01197"><\/a><span class="lineno"> 1197<\/span>&#160;  <span class="comment">\/\/     ]<\/span><\/div><div class="line"><a name="l01198"><\/a><span class="lineno"> 1198<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01199"><\/a><span class="lineno"> 1199<\/span>&#160;  <span class="comment">\/\/   directIndex<\/span><\/div><div class="line"><a name="l01200"><\/a><span class="lineno"> 1200<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01201"><\/a><span class="lineno"> 1201<\/span>&#160;  <span class="comment">\/\/      [<\/span><\/div><div class="line"><a name="l01202"><\/a><span class="lineno"> 1202<\/span>&#160;  <span class="comment">\/\/        {<\/span><\/div><div class="line"><a name="l01203"><\/a><span class="lineno"> 1203<\/span>&#160;  <span class="comment">\/\/          nodeId:<\/span><\/div><div class="line"><a name="l01204"><\/a><span class="lineno"> 1204<\/span>&#160;  <span class="comment">\/\/          features: [ ]<\/span><\/div><div class="line"><a name="l01205"><\/a><span class="lineno"> 1205<\/span>&#160;  <span class="comment">\/\/        }<\/span><\/div><div class="line"><a name="l01206"><\/a><span class="lineno"> 1206<\/span>&#160;  <span class="comment">\/\/      ]<\/span><\/div><div class="line"><a name="l01207"><\/a><span class="lineno"> 1207<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01208"><\/a><span class="lineno"> 1208<\/span>&#160;<\/div><div class="line"><a name="l01209"><\/a><span class="lineno"> 1209<\/span>&#160;  <span class="comment">\/\/ invertedIndex[i] is for the i-th word<\/span><\/div><div class="line"><a name="l01210"><\/a><span class="lineno"> 1210<\/span>&#160;  <span class="comment">\/\/ directIndex[i] is for the i-th entry<\/span><\/div><div class="line"><a name="l01211"><\/a><span class="lineno"> 1211<\/span>&#160;  <span class="comment">\/\/ directIndex may be empty if not using direct index<\/span><\/div><div class="line"><a name="l01212"><\/a><span class="lineno"> 1212<\/span>&#160;  <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l01213"><\/a><span class="lineno"> 1213<\/span>&#160;  <span class="comment">\/\/ imageId&#39;s and nodeId&#39;s must be stored in ascending order<\/span><\/div><div class="line"><a name="l01214"><\/a><span class="lineno"> 1214<\/span>&#160;  <span class="comment">\/\/ (according to the construction of the indexes)<\/span><\/div><div class="line"><a name="l01215"><\/a><span class="lineno"> 1215<\/span>&#160;<\/div><div class="line"><a name="l01216"><\/a><span class="lineno"> 1216<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;save(fs);<\/div><div class="line"><a name="l01217"><\/a><span class="lineno"> 1217<\/span>&#160; <\/div><div class="line"><a name="l01218"><\/a><span class="lineno"> 1218<\/span>&#160;  fs &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;{&quot;<\/span>;<\/div><div class="line"><a name="l01219"><\/a><span class="lineno"> 1219<\/span>&#160;  <\/div><div class="line"><a name="l01220"><\/a><span class="lineno"> 1220<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;nEntries&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l01221"><\/a><span class="lineno"> 1221<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;usingDI&quot;<\/span> &lt;&lt; (<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> ? 1 : 0);<\/div><div class="line"><a name="l01222"><\/a><span class="lineno"> 1222<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;diLevels&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l01223"><\/a><span class="lineno"> 1223<\/span>&#160;  <\/div><div class="line"><a name="l01224"><\/a><span class="lineno"> 1224<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;invertedIndex&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01225"><\/a><span class="lineno"> 1225<\/span>&#160;  <\/div><div class="line"><a name="l01226"><\/a><span class="lineno"> 1226<\/span>&#160;  <span class="keyword">typename<\/span> InvertedFile::const_iterator iit;<\/div><div class="line"><a name="l01227"><\/a><span class="lineno"> 1227<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator irit;<\/div><div class="line"><a name="l01228"><\/a><span class="lineno"> 1228<\/span>&#160;  <span class="keywordflow">for<\/span>(iit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.begin(); iit != <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.end(); ++iit)<\/div><div class="line"><a name="l01229"><\/a><span class="lineno"> 1229<\/span>&#160;  {<\/div><div class="line"><a name="l01230"><\/a><span class="lineno"> 1230<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>; <span class="comment">\/\/ word of IF<\/span><\/div><div class="line"><a name="l01231"><\/a><span class="lineno"> 1231<\/span>&#160;    <span class="keywordflow">for<\/span>(irit = iit-&gt;begin(); irit != iit-&gt;end(); ++irit)<\/div><div class="line"><a name="l01232"><\/a><span class="lineno"> 1232<\/span>&#160;    {<\/div><div class="line"><a name="l01233"><\/a><span class="lineno"> 1233<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;{:&quot;<\/span> <\/div><div class="line"><a name="l01234"><\/a><span class="lineno"> 1234<\/span>&#160;        &lt;&lt; <span class="stringliteral">&quot;imageId&quot;<\/span> &lt;&lt; (int)irit-&gt;entry_id<\/div><div class="line"><a name="l01235"><\/a><span class="lineno"> 1235<\/span>&#160;        &lt;&lt; <span class="stringliteral">&quot;weight&quot;<\/span> &lt;&lt; irit-&gt;word_weight<\/div><div class="line"><a name="l01236"><\/a><span class="lineno"> 1236<\/span>&#160;        &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01237"><\/a><span class="lineno"> 1237<\/span>&#160;    }<\/div><div class="line"><a name="l01238"><\/a><span class="lineno"> 1238<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ word of IF<\/span><\/div><div class="line"><a name="l01239"><\/a><span class="lineno"> 1239<\/span>&#160;  }<\/div><div class="line"><a name="l01240"><\/a><span class="lineno"> 1240<\/span>&#160;  <\/div><div class="line"><a name="l01241"><\/a><span class="lineno"> 1241<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ invertedIndex<\/span><\/div><div class="line"><a name="l01242"><\/a><span class="lineno"> 1242<\/span>&#160;  <\/div><div class="line"><a name="l01243"><\/a><span class="lineno"> 1243<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;directIndex&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01244"><\/a><span class="lineno"> 1244<\/span>&#160;  <\/div><div class="line"><a name="l01245"><\/a><span class="lineno"> 1245<\/span>&#160;  <span class="keyword">typename<\/span> DirectFile::const_iterator dit;<\/div><div class="line"><a name="l01246"><\/a><span class="lineno"> 1246<\/span>&#160;  <span class="keyword">typename<\/span> FeatureVector::const_iterator drit;<\/div><div class="line"><a name="l01247"><\/a><span class="lineno"> 1247<\/span>&#160;  <span class="keywordflow">for<\/span>(dit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.begin(); dit != <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.end(); ++dit)<\/div><div class="line"><a name="l01248"><\/a><span class="lineno"> 1248<\/span>&#160;  {<\/div><div class="line"><a name="l01249"><\/a><span class="lineno"> 1249<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>; <span class="comment">\/\/ entry of DF<\/span><\/div><div class="line"><a name="l01250"><\/a><span class="lineno"> 1250<\/span>&#160;    <\/div><div class="line"><a name="l01251"><\/a><span class="lineno"> 1251<\/span>&#160;    <span class="keywordflow">for<\/span>(drit = dit-&gt;begin(); drit != dit-&gt;end(); ++drit)<\/div><div class="line"><a name="l01252"><\/a><span class="lineno"> 1252<\/span>&#160;    {<\/div><div class="line"><a name="l01253"><\/a><span class="lineno"> 1253<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = drit-&gt;first;<\/div><div class="line"><a name="l01254"><\/a><span class="lineno"> 1254<\/span>&#160;      <span class="keyword">const<\/span> std::vector&lt;unsigned int&gt;&amp; features = drit-&gt;second;<\/div><div class="line"><a name="l01255"><\/a><span class="lineno"> 1255<\/span>&#160;      <\/div><div class="line"><a name="l01256"><\/a><span class="lineno"> 1256<\/span>&#160;      <span class="comment">\/\/ save info of last_nid<\/span><\/div><div class="line"><a name="l01257"><\/a><span class="lineno"> 1257<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;{&quot;<\/span>;<\/div><div class="line"><a name="l01258"><\/a><span class="lineno"> 1258<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;nodeId&quot;<\/span> &lt;&lt; (int)nid;<\/div><div class="line"><a name="l01259"><\/a><span class="lineno"> 1259<\/span>&#160;      <span class="comment">\/\/ msvc++ 2010 with opencv 2.3.1 does not allow FileStorage::operator&lt;&lt;<\/span><\/div><div class="line"><a name="l01260"><\/a><span class="lineno"> 1260<\/span>&#160;      <span class="comment">\/\/ with vectors of unsigned int<\/span><\/div><div class="line"><a name="l01261"><\/a><span class="lineno"> 1261<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;features&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span> <\/div><div class="line"><a name="l01262"><\/a><span class="lineno"> 1262<\/span>&#160;        &lt;&lt; *(<span class="keyword">const<\/span> std::vector&lt;int&gt;*)(&amp;features) &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>;<\/div><div class="line"><a name="l01263"><\/a><span class="lineno"> 1263<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01264"><\/a><span class="lineno"> 1264<\/span>&#160;    }<\/div><div class="line"><a name="l01265"><\/a><span class="lineno"> 1265<\/span>&#160;    <\/div><div class="line"><a name="l01266"><\/a><span class="lineno"> 1266<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ entry of DF<\/span><\/div><div class="line"><a name="l01267"><\/a><span class="lineno"> 1267<\/span>&#160;  }<\/div><div class="line"><a name="l01268"><\/a><span class="lineno"> 1268<\/span>&#160;  <\/div><div class="line"><a name="l01269"><\/a><span class="lineno"> 1269<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ directIndex<\/span><\/div><div class="line"><a name="l01270"><\/a><span class="lineno"> 1270<\/span>&#160;  <\/div><div class="line"><a name="l01271"><\/a><span class="lineno"> 1271<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>; <span class="comment">\/\/ database<\/span><\/div><div class="line"><a name="l01272"><\/a><span class="lineno"> 1272<\/span>&#160;}<\/div><div class="line"><a name="l01273"><\/a><span class="lineno"> 1273<\/span>&#160;<\/div><div class="line"><a name="l01274"><\/a><span class="lineno"> 1274<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01275"><\/a><span class="lineno"> 1275<\/span>&#160;<\/div><div class="line"><a name="l01276"><\/a><span class="lineno"> 1276<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01277"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345"> 1277<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">TemplatedDatabase&lt;TDescriptor, F&gt;::load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<\/div><div class="line"><a name="l01278"><\/a><span class="lineno"> 1278<\/span>&#160;{<\/div><div class="line"><a name="l01279"><\/a><span class="lineno"> 1279<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::READ);<\/div><div class="line"><a name="l01280"><\/a><span class="lineno"> 1280<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01281"><\/a><span class="lineno"> 1281<\/span>&#160;  <\/div><div class="line"><a name="l01282"><\/a><span class="lineno"> 1282<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(fs);<\/div><div class="line"><a name="l01283"><\/a><span class="lineno"> 1283<\/span>&#160;}<\/div><div class="line"><a name="l01284"><\/a><span class="lineno"> 1284<\/span>&#160;<\/div><div class="line"><a name="l01285"><\/a><span class="lineno"> 1285<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01286"><\/a><span class="lineno"> 1286<\/span>&#160;<\/div><div class="line"><a name="l01287"><\/a><span class="lineno"> 1287<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01288"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a9aef0b11da757aba5f07deb2f5b66097"> 1288<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">TemplatedDatabase&lt;TDescriptor, F&gt;::load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs,<\/div><div class="line"><a name="l01289"><\/a><span class="lineno"> 1289<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<\/div><div class="line"><a name="l01290"><\/a><span class="lineno"> 1290<\/span>&#160;{ <\/div><div class="line"><a name="l01291"><\/a><span class="lineno"> 1291<\/span>&#160;  <span class="comment">\/\/ load voc first<\/span><\/div><div class="line"><a name="l01292"><\/a><span class="lineno"> 1292<\/span>&#160;  <span class="comment">\/\/ subclasses must instantiate m_voc before calling this ::load<\/span><\/div><div class="line"><a name="l01293"><\/a><span class="lineno"> 1293<\/span>&#160;  <span class="keywordflow">if<\/span>(!<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>) <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>;<\/div><div class="line"><a name="l01294"><\/a><span class="lineno"> 1294<\/span>&#160;  <\/div><div class="line"><a name="l01295"><\/a><span class="lineno"> 1295<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;load(fs);<\/div><div class="line"><a name="l01296"><\/a><span class="lineno"> 1296<\/span>&#160;<\/div><div class="line"><a name="l01297"><\/a><span class="lineno"> 1297<\/span>&#160;  <span class="comment">\/\/ load database now<\/span><\/div><div class="line"><a name="l01298"><\/a><span class="lineno"> 1298<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>(); <span class="comment">\/\/ resizes inverted file <\/span><\/div><div class="line"><a name="l01299"><\/a><span class="lineno"> 1299<\/span>&#160;    <\/div><div class="line"><a name="l01300"><\/a><span class="lineno"> 1300<\/span>&#160;  cv::FileNode fdb = fs[name];<\/div><div class="line"><a name="l01301"><\/a><span class="lineno"> 1301<\/span>&#160;  <\/div><div class="line"><a name="l01302"><\/a><span class="lineno"> 1302<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> = (int)fdb[<span class="stringliteral">&quot;nEntries&quot;<\/span>]; <\/div><div class="line"><a name="l01303"><\/a><span class="lineno"> 1303<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> = (int)fdb[<span class="stringliteral">&quot;usingDI&quot;<\/span>] != 0;<\/div><div class="line"><a name="l01304"><\/a><span class="lineno"> 1304<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a> = (int)fdb[<span class="stringliteral">&quot;diLevels&quot;<\/span>];<\/div><div class="line"><a name="l01305"><\/a><span class="lineno"> 1305<\/span>&#160;  <\/div><div class="line"><a name="l01306"><\/a><span class="lineno"> 1306<\/span>&#160;  cv::FileNode fn = fdb[<span class="stringliteral">&quot;invertedIndex&quot;<\/span>];<\/div><div class="line"><a name="l01307"><\/a><span class="lineno"> 1307<\/span>&#160;  <span class="keywordflow">for<\/span>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid = 0; wid &lt; fn.size(); ++wid)<\/div><div class="line"><a name="l01308"><\/a><span class="lineno"> 1308<\/span>&#160;  {<\/div><div class="line"><a name="l01309"><\/a><span class="lineno"> 1309<\/span>&#160;    cv::FileNode fw = fn[wid];<\/div><div class="line"><a name="l01310"><\/a><span class="lineno"> 1310<\/span>&#160;    <\/div><div class="line"><a name="l01311"><\/a><span class="lineno"> 1311<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fw.size(); ++i)<\/div><div class="line"><a name="l01312"><\/a><span class="lineno"> 1312<\/span>&#160;    {<\/div><div class="line"><a name="l01313"><\/a><span class="lineno"> 1313<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid = (int)fw[i][<span class="stringliteral">&quot;imageId&quot;<\/span>];<\/div><div class="line"><a name="l01314"><\/a><span class="lineno"> 1314<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> v = fw[i][<span class="stringliteral">&quot;weight&quot;<\/span>];<\/div><div class="line"><a name="l01315"><\/a><span class="lineno"> 1315<\/span>&#160;      <\/div><div class="line"><a name="l01316"><\/a><span class="lineno"> 1316<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[wid].push_back(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">IFPair<\/a>(eid, v));<\/div><div class="line"><a name="l01317"><\/a><span class="lineno"> 1317<\/span>&#160;    }<\/div><div class="line"><a name="l01318"><\/a><span class="lineno"> 1318<\/span>&#160;  }<\/div><div class="line"><a name="l01319"><\/a><span class="lineno"> 1319<\/span>&#160;  <\/div><div class="line"><a name="l01320"><\/a><span class="lineno"> 1320<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>)<\/div><div class="line"><a name="l01321"><\/a><span class="lineno"> 1321<\/span>&#160;  {<\/div><div class="line"><a name="l01322"><\/a><span class="lineno"> 1322<\/span>&#160;    fn = fdb[<span class="stringliteral">&quot;directIndex&quot;<\/span>];<\/div><div class="line"><a name="l01323"><\/a><span class="lineno"> 1323<\/span>&#160;    <\/div><div class="line"><a name="l01324"><\/a><span class="lineno"> 1324<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.resize(fn.size());<\/div><div class="line"><a name="l01325"><\/a><span class="lineno"> 1325<\/span>&#160;    m_dBowfile.resize(fn.size());<\/div><div class="line"><a name="l01326"><\/a><span class="lineno"> 1326<\/span>&#160;    assert(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> == (<span class="keywordtype">int<\/span>)fn.size());<\/div><div class="line"><a name="l01327"><\/a><span class="lineno"> 1327<\/span>&#160;    <\/div><div class="line"><a name="l01328"><\/a><span class="lineno"> 1328<\/span>&#160;    FeatureVector::iterator dit;<\/div><div class="line"><a name="l01329"><\/a><span class="lineno"> 1329<\/span>&#160;    <span class="keywordflow">for<\/span>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid = 0; eid &lt; fn.size(); ++eid)<\/div><div class="line"><a name="l01330"><\/a><span class="lineno"> 1330<\/span>&#160;    {<\/div><div class="line"><a name="l01331"><\/a><span class="lineno"> 1331<\/span>&#160;      cv::FileNode fe = fn[eid];<\/div><div class="line"><a name="l01332"><\/a><span class="lineno"> 1332<\/span>&#160;      <\/div><div class="line"><a name="l01333"><\/a><span class="lineno"> 1333<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[eid].clear();<\/div><div class="line"><a name="l01334"><\/a><span class="lineno"> 1334<\/span>&#160;      m_dBowfile[eid].clear();<\/div><div class="line"><a name="l01335"><\/a><span class="lineno"> 1335<\/span>&#160;      <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fe.size(); ++i)<\/div><div class="line"><a name="l01336"><\/a><span class="lineno"> 1336<\/span>&#160;      {<\/div><div class="line"><a name="l01337"><\/a><span class="lineno"> 1337<\/span>&#160;        <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (int)fe[i][<span class="stringliteral">&quot;nodeId&quot;<\/span>];<\/div><div class="line"><a name="l01338"><\/a><span class="lineno"> 1338<\/span>&#160;        <\/div><div class="line"><a name="l01339"><\/a><span class="lineno"> 1339<\/span>&#160;        dit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[eid].insert(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[eid].end(), <\/div><div class="line"><a name="l01340"><\/a><span class="lineno"> 1340<\/span>&#160;          make_pair(nid, std::vector&lt;unsigned int&gt;() ));<\/div><div class="line"><a name="l01341"><\/a><span class="lineno"> 1341<\/span>&#160;        <\/div><div class="line"><a name="l01342"><\/a><span class="lineno"> 1342<\/span>&#160;        <span class="comment">\/\/ this failed to compile with some opencv versions (2.3.1)<\/span><\/div><div class="line"><a name="l01343"><\/a><span class="lineno"> 1343<\/span>&#160;        <span class="comment">\/\/fe[i][&quot;features&quot;] &gt;&gt; dit-&gt;second;<\/span><\/div><div class="line"><a name="l01344"><\/a><span class="lineno"> 1344<\/span>&#160;        <\/div><div class="line"><a name="l01345"><\/a><span class="lineno"> 1345<\/span>&#160;        <span class="comment">\/\/ this was ok until OpenCV 2.4.1<\/span><\/div><div class="line"><a name="l01346"><\/a><span class="lineno"> 1346<\/span>&#160;        <span class="comment">\/\/std::vector&lt;int&gt; aux;<\/span><\/div><div class="line"><a name="l01347"><\/a><span class="lineno"> 1347<\/span>&#160;        <span class="comment">\/\/fe[i][&quot;features&quot;] &gt;&gt; aux; \/\/ OpenCV &lt; 2.4.1<\/span><\/div><div class="line"><a name="l01348"><\/a><span class="lineno"> 1348<\/span>&#160;        <span class="comment">\/\/dit-&gt;second.resize(aux.size());<\/span><\/div><div class="line"><a name="l01349"><\/a><span class="lineno"> 1349<\/span>&#160;        <span class="comment">\/\/std::copy(aux.begin(), aux.end(), dit-&gt;second.begin());<\/span><\/div><div class="line"><a name="l01350"><\/a><span class="lineno"> 1350<\/span>&#160;        <\/div><div class="line"><a name="l01351"><\/a><span class="lineno"> 1351<\/span>&#160;        cv::FileNode ff = fe[i][<span class="stringliteral">&quot;features&quot;<\/span>][0];<\/div><div class="line"><a name="l01352"><\/a><span class="lineno"> 1352<\/span>&#160;        dit-&gt;second.reserve(ff.size());<\/div><div class="line"><a name="l01353"><\/a><span class="lineno"> 1353<\/span>&#160;                <\/div><div class="line"><a name="l01354"><\/a><span class="lineno"> 1354<\/span>&#160;        cv::FileNodeIterator ffit;<\/div><div class="line"><a name="l01355"><\/a><span class="lineno"> 1355<\/span>&#160;        <span class="keywordflow">for<\/span>(ffit = ff.begin(); ffit != ff.end(); ++ffit)<\/div><div class="line"><a name="l01356"><\/a><span class="lineno"> 1356<\/span>&#160;        {<\/div><div class="line"><a name="l01357"><\/a><span class="lineno"> 1357<\/span>&#160;          dit-&gt;second.push_back((<span class="keywordtype">int<\/span>)*ffit); <\/div><div class="line"><a name="l01358"><\/a><span class="lineno"> 1358<\/span>&#160;        }<\/div><div class="line"><a name="l01359"><\/a><span class="lineno"> 1359<\/span>&#160;      }<\/div><div class="line"><a name="l01360"><\/a><span class="lineno"> 1360<\/span>&#160;    } <span class="comment">\/\/ for each entry<\/span><\/div><div class="line"><a name="l01361"><\/a><span class="lineno"> 1361<\/span>&#160;  } <span class="comment">\/\/ if use_id<\/span><\/div><div class="line"><a name="l01362"><\/a><span class="lineno"> 1362<\/span>&#160;  <\/div><div class="line"><a name="l01363"><\/a><span class="lineno"> 1363<\/span>&#160;}<\/div><div class="line"><a name="l01364"><\/a><span class="lineno"> 1364<\/span>&#160;<\/div><div class="line"><a name="l01365"><\/a><span class="lineno"> 1365<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01366"><\/a><span class="lineno"> 1366<\/span>&#160;<\/div><div class="line"><a name="l01372"><\/a><span class="lineno"> 1372<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01373"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#ac1f00f5484f61d6ab3b1f650955210d8"> 1373<\/a><\/span>&#160;std::ostream&amp; <a class="code" href="namespaceDBoW2.html#ac1f00f5484f61d6ab3b1f650955210d8">operator&lt;&lt;<\/a>(std::ostream &amp;os, <\/div><div class="line"><a name="l01374"><\/a><span class="lineno"> 1374<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db)<\/div><div class="line"><a name="l01375"><\/a><span class="lineno"> 1375<\/span>&#160;{<\/div><div class="line"><a name="l01376"><\/a><span class="lineno"> 1376<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;Database: Entries = &quot;<\/span> &lt;&lt; db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">size<\/a>() &lt;&lt; <span class="stringliteral">&quot;, &quot;<\/span><\/div><div class="line"><a name="l01377"><\/a><span class="lineno"> 1377<\/span>&#160;    <span class="stringliteral">&quot;Using direct index = &quot;<\/span> &lt;&lt; (db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">usingDirectIndex<\/a>() ? <span class="stringliteral">&quot;yes&quot;<\/span> : <span class="stringliteral">&quot;no&quot;<\/span>);<\/div><div class="line"><a name="l01378"><\/a><span class="lineno"> 1378<\/span>&#160;  <\/div><div class="line"><a name="l01379"><\/a><span class="lineno"> 1379<\/span>&#160;  <span class="keywordflow">if<\/span>(db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">usingDirectIndex<\/a>())<\/div><div class="line"><a name="l01380"><\/a><span class="lineno"> 1380<\/span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;, Direct index levels = &quot;<\/span> &lt;&lt; db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">getDirectIndexLevels<\/a>();<\/div><div class="line"><a name="l01381"><\/a><span class="lineno"> 1381<\/span>&#160;  <\/div><div class="line"><a name="l01382"><\/a><span class="lineno"> 1382<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;. &quot;<\/span> &lt;&lt; *db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">getVocabulary<\/a>();<\/div><div class="line"><a name="l01383"><\/a><span class="lineno"> 1383<\/span>&#160;  <span class="keywordflow">return<\/span> os;<\/div><div class="line"><a name="l01384"><\/a><span class="lineno"> 1384<\/span>&#160;}<\/div><div class="line"><a name="l01385"><\/a><span class="lineno"> 1385<\/span>&#160;<\/div><div class="line"><a name="l01386"><\/a><span class="lineno"> 1386<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01387"><\/a><span class="lineno"> 1387<\/span>&#160;<\/div><div class="line"><a name="l01388"><\/a><span class="lineno"> 1388<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l01389"><\/a><span class="lineno"> 1389<\/span>&#160;<\/div><div class="line"><a name="l01390"><\/a><span class="lineno"> 1390<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDBoW2_1_1TemplatedDatabase_html_a89b2578484a457a8be1df89002c73759"><div class="ttname"><a href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">DBoW2::TemplatedDatabase::queryL2<\/a><\/div><div class="ttdeci">void queryL2(const BowVector &amp;vec, QueryResults &amp;ret, int max_results, int max_id) const <\/div><div class="ttdoc">Query with L2 scoring. <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedDatabase.h:728<\/div><\/div>$/;"	a
l00001	doc/html/TemplatedLoopDetector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_TEMPLATED_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_TEMPLATED_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/cv.h&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/TemplatedVocabulary.h&quot;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/TemplatedDatabase.h&quot;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/QueryResults.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CameraFactory.h&quot;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CataCamera.h&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/EquidistantCamera.h&quot;<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/PinholeCamera.h&quot;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/ScaramuzzaCamera.h&quot;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a>;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a>;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a> {<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">   39<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;{<\/div><div class="line"><a name="l00042"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a32f99a75bfaf9e565f4d63ff45ffbbe0">   42<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a32f99a75bfaf9e565f4d63ff45ffbbe0">GEOM_EXHAUSTIVE<\/a>,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">   44<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>,<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a52ebdc9ac2e54624873c53e2f6ab8302">   46<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a52ebdc9ac2e54624873c53e2f6ab8302">GEOM_FLANN<\/a>,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1ab1c44a055487f98740617940702f7b23">   48<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1ab1c44a055487f98740617940702f7b23">GEOM_NONE<\/a><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;};<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19">   52<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19">DetectionStatus<\/a><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;{<\/div><div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">   55<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">LOOP_DETECTED<\/a>,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">   57<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">CLOSE_MATCHES_ONLY<\/a>,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">   59<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">NO_DB_RESULTS<\/a>,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">   61<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">LOW_NSS_FACTOR<\/a>,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">   63<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">LOW_SCORES<\/a>,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">   65<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">NO_GROUPS<\/a>,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">   67<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">NO_TEMPORAL_CONSISTENCY<\/a>,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">   69<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">NO_GEOMETRICAL_CONSISTENCY<\/a><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;};<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html">   73<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;{<\/div><div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">   76<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19">DetectionStatus<\/a> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a>;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#a9ee6596916c8cae553caa9b2a4285364">   78<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#a9ee6596916c8cae553caa9b2a4285364">query<\/a>;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">   80<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a>;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;  <\/div><div class="line"><a name="l00086"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">   86<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">detection<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordflow">return<\/span> status == <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">LOOP_DETECTED<\/a>;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;  }<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;};<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html">   96<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;{<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;  <\/div><div class="line"><a name="l00101"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">  101<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;  {<\/div><div class="line"><a name="l00104"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6cf68c94f27c7b1e484ae51657688aab">  104<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6cf68c94f27c7b1e484ae51657688aab">image_rows<\/a>;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a5ee6d007400bcb7229a5b2a2aa059d2d">  106<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a5ee6d007400bcb7229a5b2a2aa059d2d">image_cols<\/a>;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/ Main loop detector parameters<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <\/div><div class="line"><a name="l00111"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">  111<\/a><\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">  113<\/a><\/span>&#160;    <span class="keywordtype">float<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">alpha<\/a>;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">  115<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">k<\/a>;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">  117<\/a><\/span>&#160;    <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a>;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">  119<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="comment">\/\/ These are less deciding parameters of the system<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <\/div><div class="line"><a name="l00124"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">  124<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">  126<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">max_db_results<\/a>;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">  128<\/a><\/span>&#160;    <span class="keywordtype">float<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">min_nss_factor<\/a>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">  130<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a>; <\/div><div class="line"><a name="l00132"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">  132<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">max_intragroup_gap<\/a>; <\/div><div class="line"><a name="l00134"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">  134<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">max_distance_between_groups<\/a>;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">  136<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">max_distance_between_queries<\/a>; <\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  <\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="comment">\/\/ These are for the RANSAC to compute the F<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <\/div><div class="line"><a name="l00141"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">  141<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">min_Fpoints<\/a>;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a19f6d5a5466236cb77cdb48a0c4adce5">  143<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a19f6d5a5466236cb77cdb48a0c4adce5">max_ransac_iterations<\/a>;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab86afbea2f5a4fbc08838ed41558eff5">  145<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab86afbea2f5a4fbc08838ed41558eff5">ransac_probability<\/a>;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a91f2b298d2cb2f7e92c4b824ad457513">  147<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a91f2b298d2cb2f7e92c4b824ad457513">max_reprojection_error<\/a>;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    <\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <span class="comment">\/\/ This is to compute correspondences<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    <\/div><div class="line"><a name="l00152"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">  152<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">max_neighbor_ratio<\/a>;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;  <\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>(<span class="keywordtype">int<\/span> height, <span class="keywordtype">int<\/span> width, <span class="keywordtype">float<\/span> frequency = 1, <span class="keywordtype">bool<\/span> nss = <span class="keyword">true<\/span>,<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;      <span class="keywordtype">float<\/span> _alpha = 0.3, <span class="keywordtype">int<\/span> _k = 1, <\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;      <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a> geom = GEOM_DI, <span class="keywordtype">int<\/span> dilevels = 2);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;      <\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    <span class="keywordtype">void<\/span> <span class="keyword">set<\/span>(<span class="keywordtype">float<\/span> frequency);<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;  };<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;  <span class="comment">\/\/camera param<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;  camodocal::CameraPtr m_camera;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;  <\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc,<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;  <\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a> &amp;db,<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> T &amp;db, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;  <span class="keyword">virtual<\/span> ~<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;  <\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>&amp; getDatabase() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;  <\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; getVocabulary() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;  <span class="keywordtype">void<\/span> initCameraModel(<span class="keyword">const<\/span> std::string &amp;calib_file);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;  <\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  <span class="keywordtype">void<\/span> setDatabase(<span class="keyword">const<\/span> T &amp;db);<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;  <span class="keywordtype">void<\/span> setVocabulary(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; voc);<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;  <span class="keywordtype">void<\/span> allocate(<span class="keywordtype">int<\/span> nentries, <span class="keywordtype">int<\/span> nkeys = 0);<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;  <span class="keywordtype">bool<\/span> detectLoop(<span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a> &amp;match,std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;                          std::vector&lt;cv::Point2f&gt; &amp;old_pts);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> clear();<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;  <span class="keywordtype">void<\/span> eraseIndex(std::vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;  <\/div><div class="line"><a name="l00289"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">  289<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;  {<\/div><div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">  292<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">  294<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">last<\/a>;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">  296<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>; <span class="comment">\/\/ score of island<\/span><\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;    <\/div><div class="line"><a name="l00299"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">  299<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">best_entry<\/a>; <span class="comment">\/\/ id and score of the entry with the highest score<\/span><\/div><div class="line"><a name="l00301"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a10190b75ad3a4ceee52699d8c61c400d">  301<\/a><\/span>&#160;<span class="comment"><\/span>    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a10190b75ad3a4ceee52699d8c61c400d">best_score<\/a>;  <span class="comment">\/\/ in the island<\/span><\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;    <\/div><div class="line"><a name="l00306"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4d38a7f200dc46436fc90d096fdb924e">  306<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4d38a7f200dc46436fc90d096fdb924e">tIsland<\/a>(){}<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;    <\/div><div class="line"><a name="l00313"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a5299d5dce7178c27cdc851c1dd93c9bd">  313<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a5299d5dce7178c27cdc851c1dd93c9bd">tIsland<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> f, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> l): first(f), last(l){}<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;    <\/div><div class="line"><a name="l00321"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a2c2f47ac565ac76c57e5a4a740c2031f">  321<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a2c2f47ac565ac76c57e5a4a740c2031f">tIsland<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> f, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> l, <span class="keywordtype">double<\/span> s): first(f), last(l), score(s){}<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;    <\/div><div class="line"><a name="l00328"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a78f037960a95272d5d197187ebcf99f8">  328<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator &lt; (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;      <span class="keywordflow">return<\/span> this-&gt;score &lt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>;<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    }<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    <\/div><div class="line"><a name="l00338"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#ac3076fa14d3c35d2ab3dd58ec9036c58">  338<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator &gt; (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;      <span class="keywordflow">return<\/span> this-&gt;score &gt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>;<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    }<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;    <\/div><div class="line"><a name="l00350"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a491aec3dbf528587553872ca642742b5">  350<\/a><\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a491aec3dbf528587553872ca642742b5">gt<\/a>(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;    {<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;      <span class="keywordflow">return<\/span> a.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a> &gt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>;<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;    }<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;        <\/div><div class="line"><a name="l00362"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a3c7d27e0815b04445b117319997860a9">  362<\/a><\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a3c7d27e0815b04445b117319997860a9">ltId<\/a>(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    {<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;      <span class="keywordflow">return<\/span> a.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a> &lt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    }<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    <\/div><div class="line"><a name="l00371"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a69f4e48ea09ced098eab959062f39922">  371<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a69f4e48ea09ced098eab959062f39922">length<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> last - first + 1; }<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;    <\/div><div class="line"><a name="l00377"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#ac628bec67fcd4ac2b6f19aeb20ad08c2">  377<\/a><\/span>&#160;    std::string <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#ac628bec67fcd4ac2b6f19aeb20ad08c2">toString<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;      stringstream ss;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;      ss &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span> &lt;&lt; first &lt;&lt; <span class="stringliteral">&quot;-&quot;<\/span> &lt;&lt; last &lt;&lt; <span class="stringliteral">&quot;: &quot;<\/span> &lt;&lt; score &lt;&lt; <span class="stringliteral">&quot; | best: &lt;&quot;<\/span><\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;        &lt;&lt; best_entry &lt;&lt; <span class="stringliteral">&quot;: &quot;<\/span> &lt;&lt; best_score &lt;&lt; <span class="stringliteral">&quot;&gt; ] &quot;<\/span>;<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;      <span class="keywordflow">return<\/span> ss.str();<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;    }<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;  };<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;  <\/div><div class="line"><a name="l00387"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html">  387<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html">tTemporalWindow<\/a><\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;  {<\/div><div class="line"><a name="l00390"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">  390<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a>;<\/div><div class="line"><a name="l00392"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">  392<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">last_query_id<\/a>;<\/div><div class="line"><a name="l00394"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">  394<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a>;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    <\/div><div class="line"><a name="l00399"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#ad87f2dd259470e67312d0a073cb3da4b">  399<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#ad87f2dd259470e67312d0a073cb3da4b">tTemporalWindow<\/a>(): nentries(0) {}<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;  };<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;  <\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;  <\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;  <\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;  <span class="keywordtype">void<\/span> removeLowScores(<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, <span class="keywordtype">double<\/span> threshold) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;  <\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;  <span class="keywordtype">void<\/span> computeIslands(<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, vector&lt;tIsland&gt; &amp;islands) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;  <\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;  <span class="keywordtype">double<\/span> calculateIslandScore(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_first, <\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_last) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;  <span class="keywordtype">void<\/span> updateTemporalWindow(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;matched_island, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id);<\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;  <\/div><div class="line"><a name="l00443"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a2d0aa5277cfa3ee57a00ade950c4592c">  443<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a2d0aa5277cfa3ee57a00ade950c4592c">getConsistentEntries<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;    <span class="keywordflow">return<\/span> m_window.nentries;<\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;  }<\/div><div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;  <\/div><div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;  <span class="keywordtype">void<\/span> reduceInputToOutput(vector&lt;cv::Point2f&gt; v_in, vector&lt;cv::Point2f&gt; &amp;v_out, vector&lt;uchar&gt; status);<\/div><div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;  <span class="keywordtype">bool<\/span> checkFoundamental(vector&lt;cv::Point2f&gt; cur_input_pts,<\/div><div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;                   vector&lt;cv::Point2f&gt; old_input_pts,<\/div><div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;                   vector&lt;cv::Point2f&gt; &amp;cur_output_pts,<\/div><div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;                   vector&lt;cv::Point2f&gt; &amp;old_output_pts);<\/div><div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;  <span class="keywordtype">bool<\/span> isGeometricallyConsistent_DI(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> old_entry, <\/div><div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;curvec,<\/div><div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;    std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;    std::vector&lt;cv::Point2f&gt; &amp;old_pts);<\/div><div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;<\/div><div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;  <span class="keywordtype">void<\/span> getFlannStructure(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;    cv::FlannBasedMatcher &amp;flann_structure) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;<\/div><div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;  <span class="keywordtype">void<\/span> getMatches_neighratio(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;A, <\/div><div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;    <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_A, <span class="keyword">const<\/span> vector&lt;TDescriptor&gt; &amp;B,<\/div><div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;    <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_B,<\/div><div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;    vector&lt;unsigned int&gt; &amp;i_match_A, vector&lt;unsigned int&gt; &amp;i_match_B) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;<\/div><div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;<\/div><div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;  <span class="comment">\/\/ The loop detector stores its own copy of the database<\/span><\/div><div class="line"><a name="l00495"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">  495<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> *<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;  <\/div><div class="line"><a name="l00498"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">  498<\/a><\/span>&#160;  vector&lt;vector&lt;cv::KeyPoint&gt; &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>;<\/div><div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;  <\/div><div class="line"><a name="l00501"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">  501<\/a><\/span>&#160;  vector&lt;vector&lt;TDescriptor&gt; &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>;<\/div><div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;  <\/div><div class="line"><a name="l00504"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">  504<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">m_last_bowvec<\/a>;<\/div><div class="line"><a name="l00505"><\/a><span class="lineno">  505<\/span>&#160;  <\/div><div class="line"><a name="l00507"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">  507<\/a><\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html">tTemporalWindow<\/a> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>;<\/div><div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;  <\/div><div class="line"><a name="l00510"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">  510<\/a><\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>;<\/div><div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;  <\/div><div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;};<\/div><div class="line"><a name="l00513"><\/a><span class="lineno">  513<\/span>&#160;<\/div><div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;<\/div><div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l00517"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a04ac2c7658738ffc2b15ca252ed46faa">  517<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor,F&gt;::Parameters::Parameters<\/a>():<\/div><div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;  use_nss(true), alpha(0.3), k(4), geom_check(<a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>), di_levels(0)<\/div><div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;{<\/div><div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;  <span class="keyword">set<\/span>(1);<\/div><div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;}<\/div><div class="line"><a name="l00522"><\/a><span class="lineno">  522<\/span>&#160;<\/div><div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00524"><\/a><span class="lineno">  524<\/span>&#160;<\/div><div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a04ac2c7658738ffc2b15ca252ed46faa">TemplatedLoopDetector&lt;TDescriptor,F&gt;::Parameters::Parameters<\/a><\/div><div class="line"><a name="l00527"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab9ad27bd831c8718fd1f6a9d3052c050">  527<\/a><\/span>&#160;  (<span class="keywordtype">int<\/span> height, <span class="keywordtype">int<\/span> width, <span class="keywordtype">float<\/span> frequency, <span class="keywordtype">bool<\/span> nss, <span class="keywordtype">float<\/span> _alpha, <\/div><div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;  <span class="keywordtype">int<\/span> _k, <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a> geom, <span class="keywordtype">int<\/span> dilevels)<\/div><div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;  : <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6cf68c94f27c7b1e484ae51657688aab">image_rows<\/a>(height), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a5ee6d007400bcb7229a5b2a2aa059d2d">image_cols<\/a>(width), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a>(nss), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">alpha<\/a>(_alpha), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">k<\/a>(_k),<\/div><div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a>(geom), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>(dilevels)<\/div><div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;{<\/div><div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;  <span class="keyword">set<\/span>(frequency);<\/div><div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;}<\/div><div class="line"><a name="l00534"><\/a><span class="lineno">  534<\/span>&#160;<\/div><div class="line"><a name="l00535"><\/a><span class="lineno">  535<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;<\/div><div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor,F&gt;::Parameters::set<\/a>(<span class="keywordtype">float<\/span> f)<\/div><div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;{<\/div><div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a> = 20 * f;<\/div><div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">max_db_results<\/a> = 50 * f;<\/div><div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">min_nss_factor<\/a> = 0.005;<\/div><div class="line"><a name="l00543"><\/a><span class="lineno">  543<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a> = f;<\/div><div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">max_intragroup_gap<\/a> = 3 * f;<\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">max_distance_between_groups<\/a> = 3 * f;<\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">max_distance_between_queries<\/a> = 2 * f; <\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;<\/div><div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">min_Fpoints<\/a> = 12;<\/div><div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a19f6d5a5466236cb77cdb48a0c4adce5">max_ransac_iterations<\/a> = 500;<\/div><div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab86afbea2f5a4fbc08838ed41558eff5">ransac_probability<\/a> = 0.99;<\/div><div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a91f2b298d2cb2f7e92c4b824ad457513">max_reprojection_error<\/a> = 2.0;<\/div><div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;  <\/div><div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">max_neighbor_ratio<\/a> = 0.6;<\/div><div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;}<\/div><div class="line"><a name="l00555"><\/a><span class="lineno">  555<\/span>&#160;<\/div><div class="line"><a name="l00556"><\/a><span class="lineno">  556<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;<\/div><div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor,F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00560"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">  560<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>(NULL), <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params)<\/div><div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;{<\/div><div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;}<\/div><div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;<\/div><div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;<\/div><div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor,F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00569"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ac229b21e58c4e81fd423948e2ea88274">  569<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params) <\/div><div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;{<\/div><div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>(voc, <\/div><div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;    params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>, params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;  <\/div><div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;  <span class="comment">\/\/TODO change param trans method<\/span><\/div><div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;  <span class="comment">\/\/m_camera = CameraFactory::instance()-&gt;generateCameraFromYamlFile(calib_file);<\/span><\/div><div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;  <span class="comment">\/\/printf(&quot;loop set camera model finish\\n&quot;);<\/span><\/div><div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;}<\/div><div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;<\/div><div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;<\/div><div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00583"><\/a><span class="lineno">  583<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ae0593a0fe2addcad517bc628cfad8172">TemplatedLoopDetector&lt;TDescriptor,F&gt;::setVocabulary<\/a><\/div><div class="line"><a name="l00584"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ae0593a0fe2addcad517bc628cfad8172">  584<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; voc)<\/div><div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;{<\/div><div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>(voc, <\/div><div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00589"><\/a><span class="lineno">  589<\/span>&#160;}<\/div><div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;<\/div><div class="line"><a name="l00591"><\/a><span class="lineno">  591<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;<\/div><div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor, F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00595"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a36b159374671ae656c18819506c7b004">  595<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a> &amp;db, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params)<\/div><div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;{<\/div><div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>(db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">getVocabulary<\/a>(),<\/div><div class="line"><a name="l00599"><\/a><span class="lineno">  599<\/span>&#160;    params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>, params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;}<\/div><div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;<\/div><div class="line"><a name="l00602"><\/a><span class="lineno">  602<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;<\/div><div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor, F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00607"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a51b2b7065aa977d2588e65a1bafdd330">  607<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T &amp;db, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params)<\/div><div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;{<\/div><div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> T(db);<\/div><div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;clear();<\/div><div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;}<\/div><div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;<\/div><div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00616"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a95d09e6aa486c87c55629740c8539143">  616<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a95d09e6aa486c87c55629740c8539143">TemplatedLoopDetector&lt;TDescriptor, F&gt;::initCameraModel<\/a>(<span class="keyword">const<\/span> std::string &amp;calib_file)<\/div><div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;{<\/div><div class="line"><a name="l00618"><\/a><span class="lineno">  618<\/span>&#160;  m_camera = CameraFactory::instance()-&gt;generateCameraFromYamlFile(calib_file);<\/div><div class="line"><a name="l00619"><\/a><span class="lineno">  619<\/span>&#160;}<\/div><div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;<\/div><div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;<\/div><div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00625"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a305441ce97f526d2d35e62919c512d8c">  625<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a305441ce97f526d2d35e62919c512d8c">TemplatedLoopDetector&lt;TDescriptor, F&gt;::setDatabase<\/a>(<span class="keyword">const<\/span> T &amp;db)<\/div><div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;{<\/div><div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> T(db);<\/div><div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">clear<\/a>();<\/div><div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;}<\/div><div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;<\/div><div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;<\/div><div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00635"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab5af43aae37b3a4781854f7c71a650ab">  635<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab5af43aae37b3a4781854f7c71a650ab">TemplatedLoopDetector&lt;TDescriptor, F&gt;::~TemplatedLoopDetector<\/a>(<span class="keywordtype">void<\/span>)<\/div><div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;{<\/div><div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = NULL;<\/div><div class="line"><a name="l00639"><\/a><span class="lineno">  639<\/span>&#160;}<\/div><div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;<\/div><div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;<\/div><div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad5f4641228ce4c00085ac26af5dc72bd">TemplatedLoopDetector&lt;TDescriptor,F&gt;::allocate<\/a><\/div><div class="line"><a name="l00645"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad5f4641228ce4c00085ac26af5dc72bd">  645<\/a><\/span>&#160;  (<span class="keywordtype">int<\/span> nentries, <span class="keywordtype">int<\/span> nkeys)<\/div><div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;{<\/div><div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> sz = (<span class="keyword">const<\/span> int)<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.size();<\/div><div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;  <\/div><div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;  <span class="keywordflow">if<\/span>(sz &lt; nentries)<\/div><div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;  {<\/div><div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.resize(nentries);<\/div><div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>.resize(nentries);<\/div><div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;  }<\/div><div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;  <\/div><div class="line"><a name="l00655"><\/a><span class="lineno">  655<\/span>&#160;  <span class="keywordflow">if<\/span>(nkeys &gt; 0)<\/div><div class="line"><a name="l00656"><\/a><span class="lineno">  656<\/span>&#160;  {<\/div><div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">int<\/span> i = sz; i &lt; nentries; ++i)<\/div><div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;    {<\/div><div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>[i].reserve(nkeys);<\/div><div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>[i].reserve(nkeys);<\/div><div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;    }<\/div><div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;  }<\/div><div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;  <\/div><div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;allocate(nentries, nkeys);<\/div><div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;}<\/div><div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;<\/div><div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;<\/div><div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;<span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>&amp; <\/div><div class="line"><a name="l00671"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#abbe0dfa97f566c35181754b9a4d482ed">  671<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#abbe0dfa97f566c35181754b9a4d482ed">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getDatabase<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;  <span class="keywordflow">return<\/span> *<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;}<\/div><div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;<\/div><div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;<\/div><div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;<span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; <\/div><div class="line"><a name="l00680"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a832895a63630aacfdbc387c143215fef">  680<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a832895a63630aacfdbc387c143215fef">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getVocabulary<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary();<\/div><div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;}<\/div><div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;<\/div><div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;<\/div><div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00688"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a7d5adc7de1fe6f329d83c91cfa6e18c4">  688<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a7d5adc7de1fe6f329d83c91cfa6e18c4">TemplatedLoopDetector&lt;TDescriptor, F&gt;::detectLoop<\/a>(<\/div><div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a> &amp;match,<\/div><div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;old_pts)<\/div><div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;{<\/div><div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;size();<\/div><div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;  match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#a9ee6596916c8cae553caa9b2a4285364">query<\/a> = entry_id;<\/div><div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;  <\/div><div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> bowvec;<\/div><div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;  <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> featvec;<\/div><div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;  <\/div><div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>)<\/div><div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary()-&gt;transform(descriptors, bowvec, featvec,<\/div><div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary()-&gt;transform(descriptors, bowvec);<\/div><div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;<\/div><div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;  <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>)<\/div><div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;  {<\/div><div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;    <span class="comment">\/\/ only add the entry to the database and finish<\/span><\/div><div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;add(bowvec, featvec);<\/div><div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;    match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">CLOSE_MATCHES_ONLY<\/a>;<\/div><div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;    <span class="comment">\/\/printf(&quot;entry_id %d &lt;= m_params.dislocal %d\\n&quot;,entry_id,m_params.dislocal);<\/span><\/div><div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;  }<\/div><div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;  {<\/div><div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;    <span class="comment">\/\/printf(&quot;entry_id %d &gt; m_params.dislocal %d\\n&quot;,entry_id,m_params.dislocal);<\/span><\/div><div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;    <span class="keywordtype">int<\/span> max_id = (int)entry_id - <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>;<\/div><div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;    <\/div><div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;    <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> qret;<\/div><div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;query(bowvec, qret, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">max_db_results<\/a>, max_id);<\/div><div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;<\/div><div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;    <span class="comment">\/\/ update database<\/span><\/div><div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;add(bowvec, featvec); <span class="comment">\/\/ returns entry_id<\/span><\/div><div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;    <\/div><div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;    <span class="keywordflow">if<\/span>(!qret.empty())<\/div><div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;    {<\/div><div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;      <span class="comment">\/\/printf(&quot;qret not empty\\n&quot;);<\/span><\/div><div class="line"><a name="l00728"><\/a><span class="lineno">  728<\/span>&#160;      <span class="comment">\/\/ factor to compute normalized similarity score, if necessary<\/span><\/div><div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;      <span class="keywordtype">double<\/span> ns_factor = 1.0;<\/div><div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;      <\/div><div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;      <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a>)<\/div><div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;      {<\/div><div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;        ns_factor = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary()-&gt;score(bowvec, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">m_last_bowvec<\/a>);<\/div><div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;        <span class="comment">\/\/printf(&quot;use_nss, ns_factor : %lf\\n&quot;, ns_factor);<\/span><\/div><div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;      }<\/div><div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;      <\/div><div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;      <span class="keywordflow">if<\/span>(!<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a> || ns_factor &gt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">min_nss_factor<\/a>)<\/div><div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;      {<\/div><div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;        <span class="comment">\/\/ scores in qret must be divided by ns_factor to obtain the<\/span><\/div><div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;        <span class="comment">\/\/ normalized similarity score, but we can<\/span><\/div><div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;        <span class="comment">\/\/ speed this up by moving ns_factor to alpha&#39;s<\/span><\/div><div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;        <\/div><div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;        <span class="comment">\/\/ remove those scores whose nss is lower than alpha<\/span><\/div><div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;        <span class="comment">\/\/ (ret is sorted in descending score order now)<\/span><\/div><div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;        <span class="comment">\/\/printf(&quot;ns_factor %lf &gt;= m_params.min_nss_factor %lf\\n&quot;,ns_factor,m_params.min_nss_factor);<\/span><\/div><div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;        <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a19d0e02c4bd382993867d97929ef93ac">removeLowScores<\/a>(qret, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">alpha<\/a> * ns_factor);<\/div><div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;        <\/div><div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;        <span class="keywordflow">if<\/span>(!qret.empty())<\/div><div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;        {<\/div><div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;          <span class="comment">\/\/printf(&quot;qret not empty\\n&quot;);<\/span><\/div><div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;          <span class="comment">\/\/ the best candidate is the one with highest score by now<\/span><\/div><div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;          match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a> = qret[0].Id;<\/div><div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;          <\/div><div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;          <span class="comment">\/\/ compute islands<\/span><\/div><div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;          vector&lt;tIsland&gt; islands;<\/div><div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;          <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a1b155d3b8092016c1275c8879a52d62e">computeIslands<\/a>(qret, islands); <\/div><div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;          <span class="comment">\/\/ this modifies qret and changes the score order<\/span><\/div><div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;          <\/div><div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;          <span class="comment">\/\/ get best island<\/span><\/div><div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;          <span class="keywordflow">if<\/span>(!islands.empty())<\/div><div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;          {<\/div><div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;            <span class="comment">\/\/printf(&quot;island is not empty\\n&quot;);<\/span><\/div><div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;            <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>&amp; island = <\/div><div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;              *std::max_element(islands.begin(), islands.end());<\/div><div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;           <\/div><div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;            <span class="comment">\/\/printf(&quot;loop chose id:%d socre:%f------------\\n&quot;,island.best_entry, island.best_score);<\/span><\/div><div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;            <span class="comment">\/\/ check temporal consistency of this island<\/span><\/div><div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;            <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a56ac4a355101e495322b288f56bde0c3">updateTemporalWindow<\/a>(island, entry_id);<\/div><div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;            <\/div><div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;            <span class="comment">\/\/ get the best candidate (maybe match)<\/span><\/div><div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;            match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a> = island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">best_entry<\/a>;<\/div><div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;            <\/div><div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;            <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a2d0aa5277cfa3ee57a00ade950c4592c">getConsistentEntries<\/a>() &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">k<\/a>)<\/div><div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;            {<\/div><div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;              <span class="comment">\/\/printf(&quot;temporal consistent entries:%d &gt; n_params.k:%d\\n&quot;, getConsistentEntries(),m_params.k);<\/span><\/div><div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;              <span class="comment">\/\/ candidate loop detected<\/span><\/div><div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;              <span class="comment">\/\/ check geometry<\/span><\/div><div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;              <span class="keywordtype">bool<\/span> detection;<\/div><div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;<\/div><div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;              <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>)<\/div><div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;              {<\/div><div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;                <span class="comment">\/\/printf(&quot;loop use direct index for geometrical checking\\n&quot;);<\/span><\/div><div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;                <span class="comment">\/\/ all the DI stuff is implicit in the database<\/span><\/div><div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;                detection = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af6cac8c4f44154d60647b2e82921ed53">isGeometricallyConsistent_DI<\/a>(island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">best_entry<\/a>, <\/div><div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;                  keys, descriptors, featvec, cur_pts, old_pts);<\/div><div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;              }<\/div><div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;              <span class="keywordflow">else<\/span> <span class="comment">\/\/ GEOM_NONE, accept the match<\/span><\/div><div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;              {<\/div><div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;                detection = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;                <span class="comment">\/\/printf(&quot;don&#39;t check detec true\\n&quot;);<\/span><\/div><div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;              }<\/div><div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;              <\/div><div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;              <span class="keywordflow">if<\/span>(detection)<\/div><div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;              {<\/div><div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;                match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">LOOP_DETECTED<\/a>;<\/div><div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;                <span class="comment">\/\/printf(&quot;LOOP_DETECTED\\n&quot;);<\/span><\/div><div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;              }<\/div><div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;              <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;              {<\/div><div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;                match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">NO_GEOMETRICAL_CONSISTENCY<\/a>;<\/div><div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;                <span class="comment">\/\/printf(&quot;no geometry consistentcy\\n&quot;);<\/span><\/div><div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;              }<\/div><div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;              <\/div><div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;            } <span class="comment">\/\/ if enough temporal matches<\/span><\/div><div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;            <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;            {<\/div><div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;              match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">NO_TEMPORAL_CONSISTENCY<\/a>;<\/div><div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;              <span class="comment">\/\/printf(&quot;no temporal consistentcy\\n&quot;);<\/span><\/div><div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;            }<\/div><div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;            <\/div><div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;          } <span class="comment">\/\/ if there is some island<\/span><\/div><div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;          <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;          {<\/div><div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;            match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">NO_GROUPS<\/a>;<\/div><div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;            <span class="comment">\/\/printf(&quot;in island\\n&quot;);<\/span><\/div><div class="line"><a name="l00816"><\/a><span class="lineno">  816<\/span>&#160;          }<\/div><div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;        } <span class="comment">\/\/ if !qret empty after removing low scores<\/span><\/div><div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;        {<\/div><div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;          match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">LOW_SCORES<\/a>;<\/div><div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;          <span class="comment">\/\/printf(&quot;query empty after remove low score\\n&quot;);<\/span><\/div><div class="line"><a name="l00822"><\/a><span class="lineno">  822<\/span>&#160;        }<\/div><div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;      } <span class="comment">\/\/ if (ns_factor &gt; min normal score)<\/span><\/div><div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;      {<\/div><div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;        <span class="comment">\/\/printf(&quot;low nss factor may be rotation\\n&quot;);<\/span><\/div><div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;        match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">LOW_NSS_FACTOR<\/a>;<\/div><div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;      }<\/div><div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;    } <span class="comment">\/\/ if(!qret.empty())<\/span><\/div><div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00831"><\/a><span class="lineno">  831<\/span>&#160;    {<\/div><div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;      match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">NO_DB_RESULTS<\/a>;<\/div><div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;      <span class="comment">\/\/printf(&quot;data base no result\\n&quot;);<\/span><\/div><div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;    }<\/div><div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;  }<\/div><div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;<\/div><div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;  <span class="comment">\/\/ update record<\/span><\/div><div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;  <span class="comment">\/\/ m_image_keys and m_image_descriptors have the same length<\/span><\/div><div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.size() == entry_id)<\/div><div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;  {<\/div><div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;    <span class="comment">\/\/printf(&quot;image size = entry_id %d\\n&quot;, entry_id);<\/span><\/div><div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.push_back(keys);<\/div><div class="line"><a name="l00843"><\/a><span class="lineno">  843<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>.push_back(descriptors);<\/div><div class="line"><a name="l00844"><\/a><span class="lineno">  844<\/span>&#160;  }<\/div><div class="line"><a name="l00845"><\/a><span class="lineno">  845<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00846"><\/a><span class="lineno">  846<\/span>&#160;  {<\/div><div class="line"><a name="l00847"><\/a><span class="lineno">  847<\/span>&#160;    <span class="comment">\/\/printf(&quot;image size != entry_id %d\\n&quot;, entry_id);<\/span><\/div><div class="line"><a name="l00848"><\/a><span class="lineno">  848<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>[entry_id] = keys;<\/div><div class="line"><a name="l00849"><\/a><span class="lineno">  849<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>[entry_id] = descriptors;<\/div><div class="line"><a name="l00850"><\/a><span class="lineno">  850<\/span>&#160;  }<\/div><div class="line"><a name="l00851"><\/a><span class="lineno">  851<\/span>&#160;  <\/div><div class="line"><a name="l00852"><\/a><span class="lineno">  852<\/span>&#160;  <span class="comment">\/\/ store this bowvec if we are going to use it in next iteratons<\/span><\/div><div class="line"><a name="l00853"><\/a><span class="lineno">  853<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a> &amp;&amp; (<span class="keywordtype">int<\/span>)entry_id + 1 &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>)<\/div><div class="line"><a name="l00854"><\/a><span class="lineno">  854<\/span>&#160;  {<\/div><div class="line"><a name="l00855"><\/a><span class="lineno">  855<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">m_last_bowvec<\/a> = bowvec;<\/div><div class="line"><a name="l00856"><\/a><span class="lineno">  856<\/span>&#160;  }<\/div><div class="line"><a name="l00857"><\/a><span class="lineno">  857<\/span>&#160;<\/div><div class="line"><a name="l00858"><\/a><span class="lineno">  858<\/span>&#160;  <span class="keywordflow">return<\/span> match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">detection<\/a>();<\/div><div class="line"><a name="l00859"><\/a><span class="lineno">  859<\/span>&#160;}<\/div><div class="line"><a name="l00860"><\/a><span class="lineno">  860<\/span>&#160;<\/div><div class="line"><a name="l00861"><\/a><span class="lineno">  861<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00862"><\/a><span class="lineno">  862<\/span>&#160;<\/div><div class="line"><a name="l00863"><\/a><span class="lineno">  863<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00864"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">  864<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">TemplatedLoopDetector&lt;TDescriptor, F&gt;::clear<\/a>()<\/div><div class="line"><a name="l00865"><\/a><span class="lineno">  865<\/span>&#160;{<\/div><div class="line"><a name="l00866"><\/a><span class="lineno">  866<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;clear();<\/div><div class="line"><a name="l00867"><\/a><span class="lineno">  867<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> = 0;<\/div><div class="line"><a name="l00868"><\/a><span class="lineno">  868<\/span>&#160;}<\/div><div class="line"><a name="l00869"><\/a><span class="lineno">  869<\/span>&#160;<\/div><div class="line"><a name="l00870"><\/a><span class="lineno">  870<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00871"><\/a><span class="lineno">  871<\/span>&#160;<\/div><div class="line"><a name="l00872"><\/a><span class="lineno">  872<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00873"><\/a><span class="lineno">  873<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a1b155d3b8092016c1275c8879a52d62e">TemplatedLoopDetector&lt;TDescriptor, F&gt;::computeIslands<\/a><\/div><div class="line"><a name="l00874"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a1b155d3b8092016c1275c8879a52d62e">  874<\/a><\/span>&#160;  (<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, vector&lt;tIsland&gt; &amp;islands) <span class="keyword">const<\/span><\/div><div class="line"><a name="l00875"><\/a><span class="lineno">  875<\/span>&#160;{<\/div><div class="line"><a name="l00876"><\/a><span class="lineno">  876<\/span>&#160;  islands.clear();<\/div><div class="line"><a name="l00877"><\/a><span class="lineno">  877<\/span>&#160;  <\/div><div class="line"><a name="l00878"><\/a><span class="lineno">  878<\/span>&#160;  <span class="keywordflow">if<\/span>(q.size() == 1)<\/div><div class="line"><a name="l00879"><\/a><span class="lineno">  879<\/span>&#160;  {<\/div><div class="line"><a name="l00880"><\/a><span class="lineno">  880<\/span>&#160;    islands.push_back(<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>(q[0].Id, q[0].Id, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">calculateIslandScore<\/a>(q, 0, 0)));<\/div><div class="line"><a name="l00881"><\/a><span class="lineno">  881<\/span>&#160;    islands.back().best_entry = q[0].Id;<\/div><div class="line"><a name="l00882"><\/a><span class="lineno">  882<\/span>&#160;    islands.back().best_score = q[0].Score;<\/div><div class="line"><a name="l00883"><\/a><span class="lineno">  883<\/span>&#160;  }<\/div><div class="line"><a name="l00884"><\/a><span class="lineno">  884<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(!q.empty())<\/div><div class="line"><a name="l00885"><\/a><span class="lineno">  885<\/span>&#160;  {<\/div><div class="line"><a name="l00886"><\/a><span class="lineno">  886<\/span>&#160;    <span class="comment">\/\/ sort query results in ascending order of ids<\/span><\/div><div class="line"><a name="l00887"><\/a><span class="lineno">  887<\/span>&#160;    std::sort(q.begin(), q.end(), Result::ltId);<\/div><div class="line"><a name="l00888"><\/a><span class="lineno">  888<\/span>&#160;    <\/div><div class="line"><a name="l00889"><\/a><span class="lineno">  889<\/span>&#160;    <span class="comment">\/\/ create long enough islands<\/span><\/div><div class="line"><a name="l00890"><\/a><span class="lineno">  890<\/span>&#160;    QueryResults::const_iterator dit = q.begin();<\/div><div class="line"><a name="l00891"><\/a><span class="lineno">  891<\/span>&#160;    <span class="keywordtype">int<\/span> first_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00892"><\/a><span class="lineno">  892<\/span>&#160;    <span class="keywordtype">int<\/span> last_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00893"><\/a><span class="lineno">  893<\/span>&#160;    <\/div><div class="line"><a name="l00894"><\/a><span class="lineno">  894<\/span>&#160;    <span class="comment">\/\/ these are indices of q<\/span><\/div><div class="line"><a name="l00895"><\/a><span class="lineno">  895<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_first = 0;<\/div><div class="line"><a name="l00896"><\/a><span class="lineno">  896<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_last = 0;<\/div><div class="line"><a name="l00897"><\/a><span class="lineno">  897<\/span>&#160;    <\/div><div class="line"><a name="l00898"><\/a><span class="lineno">  898<\/span>&#160;    <span class="keywordtype">double<\/span> best_score = dit-&gt;Score;<\/div><div class="line"><a name="l00899"><\/a><span class="lineno">  899<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> best_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00900"><\/a><span class="lineno">  900<\/span>&#160;<\/div><div class="line"><a name="l00901"><\/a><span class="lineno">  901<\/span>&#160;    ++dit;<\/div><div class="line"><a name="l00902"><\/a><span class="lineno">  902<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> idx = 1; dit != q.end(); ++dit, ++idx)<\/div><div class="line"><a name="l00903"><\/a><span class="lineno">  903<\/span>&#160;    {<\/div><div class="line"><a name="l00904"><\/a><span class="lineno">  904<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)dit-&gt;Id - last_island_entry &lt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">max_intragroup_gap<\/a>)<\/div><div class="line"><a name="l00905"><\/a><span class="lineno">  905<\/span>&#160;      {<\/div><div class="line"><a name="l00906"><\/a><span class="lineno">  906<\/span>&#160;        <span class="comment">\/\/ go on until find the end of the island<\/span><\/div><div class="line"><a name="l00907"><\/a><span class="lineno">  907<\/span>&#160;        last_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00908"><\/a><span class="lineno">  908<\/span>&#160;        i_last = idx;<\/div><div class="line"><a name="l00909"><\/a><span class="lineno">  909<\/span>&#160;        <span class="keywordflow">if<\/span>(dit-&gt;Score &gt; best_score)<\/div><div class="line"><a name="l00910"><\/a><span class="lineno">  910<\/span>&#160;        {<\/div><div class="line"><a name="l00911"><\/a><span class="lineno">  911<\/span>&#160;          best_score = dit-&gt;Score;<\/div><div class="line"><a name="l00912"><\/a><span class="lineno">  912<\/span>&#160;          best_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00913"><\/a><span class="lineno">  913<\/span>&#160;        }<\/div><div class="line"><a name="l00914"><\/a><span class="lineno">  914<\/span>&#160;      }<\/div><div class="line"><a name="l00915"><\/a><span class="lineno">  915<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00916"><\/a><span class="lineno">  916<\/span>&#160;      {<\/div><div class="line"><a name="l00917"><\/a><span class="lineno">  917<\/span>&#160;        <span class="comment">\/\/ end of island reached<\/span><\/div><div class="line"><a name="l00918"><\/a><span class="lineno">  918<\/span>&#160;        <span class="keywordtype">int<\/span> length = last_island_entry - first_island_entry + 1;<\/div><div class="line"><a name="l00919"><\/a><span class="lineno">  919<\/span>&#160;        <span class="keywordflow">if<\/span>(length &gt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a>)<\/div><div class="line"><a name="l00920"><\/a><span class="lineno">  920<\/span>&#160;        {<\/div><div class="line"><a name="l00921"><\/a><span class="lineno">  921<\/span>&#160;          islands.push_back( <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>(first_island_entry, last_island_entry,<\/div><div class="line"><a name="l00922"><\/a><span class="lineno">  922<\/span>&#160;            <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">calculateIslandScore<\/a>(q, i_first, i_last)) );<\/div><div class="line"><a name="l00923"><\/a><span class="lineno">  923<\/span>&#160;          <\/div><div class="line"><a name="l00924"><\/a><span class="lineno">  924<\/span>&#160;          islands.back().best_score = best_score;<\/div><div class="line"><a name="l00925"><\/a><span class="lineno">  925<\/span>&#160;          islands.back().best_entry = best_entry;<\/div><div class="line"><a name="l00926"><\/a><span class="lineno">  926<\/span>&#160;        }<\/div><div class="line"><a name="l00927"><\/a><span class="lineno">  927<\/span>&#160;        <\/div><div class="line"><a name="l00928"><\/a><span class="lineno">  928<\/span>&#160;        <span class="comment">\/\/ prepare next island<\/span><\/div><div class="line"><a name="l00929"><\/a><span class="lineno">  929<\/span>&#160;        first_island_entry = last_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00930"><\/a><span class="lineno">  930<\/span>&#160;        i_first = i_last = idx;<\/div><div class="line"><a name="l00931"><\/a><span class="lineno">  931<\/span>&#160;        best_score = dit-&gt;Score;<\/div><div class="line"><a name="l00932"><\/a><span class="lineno">  932<\/span>&#160;        best_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00933"><\/a><span class="lineno">  933<\/span>&#160;      }<\/div><div class="line"><a name="l00934"><\/a><span class="lineno">  934<\/span>&#160;    }<\/div><div class="line"><a name="l00935"><\/a><span class="lineno">  935<\/span>&#160;    <span class="comment">\/\/ add last island<\/span><\/div><div class="line"><a name="l00936"><\/a><span class="lineno">  936<\/span>&#160;    <span class="keywordflow">if<\/span>(last_island_entry - first_island_entry + 1 &gt;= <\/div><div class="line"><a name="l00937"><\/a><span class="lineno">  937<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a>)<\/div><div class="line"><a name="l00938"><\/a><span class="lineno">  938<\/span>&#160;    {<\/div><div class="line"><a name="l00939"><\/a><span class="lineno">  939<\/span>&#160;      islands.push_back( <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>(first_island_entry, last_island_entry,<\/div><div class="line"><a name="l00940"><\/a><span class="lineno">  940<\/span>&#160;        <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">calculateIslandScore<\/a>(q, i_first, i_last)) );<\/div><div class="line"><a name="l00941"><\/a><span class="lineno">  941<\/span>&#160;        <\/div><div class="line"><a name="l00942"><\/a><span class="lineno">  942<\/span>&#160;      islands.back().best_score = best_score;<\/div><div class="line"><a name="l00943"><\/a><span class="lineno">  943<\/span>&#160;      islands.back().best_entry = best_entry;<\/div><div class="line"><a name="l00944"><\/a><span class="lineno">  944<\/span>&#160;    }<\/div><div class="line"><a name="l00945"><\/a><span class="lineno">  945<\/span>&#160;  }<\/div><div class="line"><a name="l00946"><\/a><span class="lineno">  946<\/span>&#160;  <\/div><div class="line"><a name="l00947"><\/a><span class="lineno">  947<\/span>&#160;}<\/div><div class="line"><a name="l00948"><\/a><span class="lineno">  948<\/span>&#160;<\/div><div class="line"><a name="l00949"><\/a><span class="lineno">  949<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00950"><\/a><span class="lineno">  950<\/span>&#160;<\/div><div class="line"><a name="l00951"><\/a><span class="lineno">  951<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00952"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">  952<\/a><\/span>&#160;<span class="keywordtype">double<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">TemplatedLoopDetector&lt;TDescriptor, F&gt;::calculateIslandScore<\/a>(<\/div><div class="line"><a name="l00953"><\/a><span class="lineno">  953<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_first, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_last)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00954"><\/a><span class="lineno">  954<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00955"><\/a><span class="lineno">  955<\/span>&#160;  <span class="comment">\/\/ get the sum of the scores<\/span><\/div><div class="line"><a name="l00956"><\/a><span class="lineno">  956<\/span>&#160;  <span class="keywordtype">double<\/span> sum = 0;<\/div><div class="line"><a name="l00957"><\/a><span class="lineno">  957<\/span>&#160;  <span class="keywordflow">while<\/span>(i_first &lt;= i_last) sum += q[i_first++].Score;<\/div><div class="line"><a name="l00958"><\/a><span class="lineno">  958<\/span>&#160;  <span class="keywordflow">return<\/span> sum;<\/div><div class="line"><a name="l00959"><\/a><span class="lineno">  959<\/span>&#160;}<\/div><div class="line"><a name="l00960"><\/a><span class="lineno">  960<\/span>&#160;<\/div><div class="line"><a name="l00961"><\/a><span class="lineno">  961<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00962"><\/a><span class="lineno">  962<\/span>&#160;<\/div><div class="line"><a name="l00963"><\/a><span class="lineno">  963<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00964"><\/a><span class="lineno">  964<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a56ac4a355101e495322b288f56bde0c3">TemplatedLoopDetector&lt;TDescriptor, F&gt;::updateTemporalWindow<\/a><\/div><div class="line"><a name="l00965"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a56ac4a355101e495322b288f56bde0c3">  965<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;matched_island, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id)<\/div><div class="line"><a name="l00966"><\/a><span class="lineno">  966<\/span>&#160;{<\/div><div class="line"><a name="l00967"><\/a><span class="lineno">  967<\/span>&#160;  <span class="comment">\/\/ if m_window.nentries &gt; 0, island &gt; m_window.last_matched_island and<\/span><\/div><div class="line"><a name="l00968"><\/a><span class="lineno">  968<\/span>&#160;  <span class="comment">\/\/ entry_id &gt; m_window.last_query_id hold<\/span><\/div><div class="line"><a name="l00969"><\/a><span class="lineno">  969<\/span>&#160;  <\/div><div class="line"><a name="l00970"><\/a><span class="lineno">  970<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> == 0 || <span class="keywordtype">int<\/span>(entry_id - <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">last_query_id<\/a>)<\/div><div class="line"><a name="l00971"><\/a><span class="lineno">  971<\/span>&#160;    &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">max_distance_between_queries<\/a>)<\/div><div class="line"><a name="l00972"><\/a><span class="lineno">  972<\/span>&#160;  {<\/div><div class="line"><a name="l00973"><\/a><span class="lineno">  973<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> = 1;<\/div><div class="line"><a name="l00974"><\/a><span class="lineno">  974<\/span>&#160;  }<\/div><div class="line"><a name="l00975"><\/a><span class="lineno">  975<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00976"><\/a><span class="lineno">  976<\/span>&#160;  {<\/div><div class="line"><a name="l00977"><\/a><span class="lineno">  977<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> a1 = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00978"><\/a><span class="lineno">  978<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> a2 = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">last<\/a>;<\/div><div class="line"><a name="l00979"><\/a><span class="lineno">  979<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> b1 = matched_island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00980"><\/a><span class="lineno">  980<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> b2 = matched_island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">last<\/a>;<\/div><div class="line"><a name="l00981"><\/a><span class="lineno">  981<\/span>&#160;    <\/div><div class="line"><a name="l00982"><\/a><span class="lineno">  982<\/span>&#160;    <span class="keywordtype">bool<\/span> fit = (b1 &lt;= a1 &amp;&amp; a1 &lt;= b2) || (a1 &lt;= b1 &amp;&amp; b1 &lt;= a2);<\/div><div class="line"><a name="l00983"><\/a><span class="lineno">  983<\/span>&#160;<\/div><div class="line"><a name="l00984"><\/a><span class="lineno">  984<\/span>&#160;    <span class="keywordflow">if<\/span>(!fit)<\/div><div class="line"><a name="l00985"><\/a><span class="lineno">  985<\/span>&#160;    {<\/div><div class="line"><a name="l00986"><\/a><span class="lineno">  986<\/span>&#160;      <span class="keywordtype">int<\/span> d1 = (int)a1 - (<span class="keywordtype">int<\/span>)b2;<\/div><div class="line"><a name="l00987"><\/a><span class="lineno">  987<\/span>&#160;      <span class="keywordtype">int<\/span> d2 = (int)b1 - (<span class="keywordtype">int<\/span>)a2;<\/div><div class="line"><a name="l00988"><\/a><span class="lineno">  988<\/span>&#160;      <span class="keywordtype">int<\/span> gap = (d1 &gt; d2 ? d1 : d2);<\/div><div class="line"><a name="l00989"><\/a><span class="lineno">  989<\/span>&#160;      <\/div><div class="line"><a name="l00990"><\/a><span class="lineno">  990<\/span>&#160;      fit = (gap &lt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">max_distance_between_groups<\/a>);<\/div><div class="line"><a name="l00991"><\/a><span class="lineno">  991<\/span>&#160;    }<\/div><div class="line"><a name="l00992"><\/a><span class="lineno">  992<\/span>&#160;    <\/div><div class="line"><a name="l00993"><\/a><span class="lineno">  993<\/span>&#160;    <span class="keywordflow">if<\/span>(fit) <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a>++;<\/div><div class="line"><a name="l00994"><\/a><span class="lineno">  994<\/span>&#160;    <span class="keywordflow">else<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> = 1;<\/div><div class="line"><a name="l00995"><\/a><span class="lineno">  995<\/span>&#160;  }<\/div><div class="line"><a name="l00996"><\/a><span class="lineno">  996<\/span>&#160;  <\/div><div class="line"><a name="l00997"><\/a><span class="lineno">  997<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a> = matched_island;<\/div><div class="line"><a name="l00998"><\/a><span class="lineno">  998<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">last_query_id<\/a> = entry_id;<\/div><div class="line"><a name="l00999"><\/a><span class="lineno">  999<\/span>&#160;}<\/div><div class="line"><a name="l01000"><\/a><span class="lineno"> 1000<\/span>&#160;<\/div><div class="line"><a name="l01001"><\/a><span class="lineno"> 1001<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01002"><\/a><span class="lineno"> 1002<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01003"><\/a><span class="lineno"> 1003<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor, F&gt;::reduceInputToOutput<\/a>(vector&lt;cv::Point2f&gt; v_in, vector&lt;cv::Point2f&gt; &amp;v_out, vector&lt;uchar&gt; status)<\/div><div class="line"><a name="l01004"><\/a><span class="lineno"> 1004<\/span>&#160;{<\/div><div class="line"><a name="l01005"><\/a><span class="lineno"> 1005<\/span>&#160;    v_out.<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">clear<\/a>();<\/div><div class="line"><a name="l01006"><\/a><span class="lineno"> 1006<\/span>&#160;    <span class="comment">\/\/v_out.reserve(v_in.size());<\/span><\/div><div class="line"><a name="l01007"><\/a><span class="lineno"> 1007<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; int(v_in.size()); i++)<\/div><div class="line"><a name="l01008"><\/a><span class="lineno"> 1008<\/span>&#160;        <span class="keywordflow">if<\/span> (status[i])<\/div><div class="line"><a name="l01009"><\/a><span class="lineno"> 1009<\/span>&#160;            v_out.push_back(v_in[i]);<\/div><div class="line"><a name="l01010"><\/a><span class="lineno"> 1010<\/span>&#160;}<\/div><div class="line"><a name="l01011"><\/a><span class="lineno"> 1011<\/span>&#160;<\/div><div class="line"><a name="l01012"><\/a><span class="lineno"> 1012<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01013"><\/a><span class="lineno"> 1013<\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor, F&gt;::checkFoundamental<\/a>(vector&lt;cv::Point2f&gt; cur_input_pts,<\/div><div class="line"><a name="l01014"><\/a><span class="lineno"> 1014<\/span>&#160;                                                              vector&lt;cv::Point2f&gt; old_input_pts,<\/div><div class="line"><a name="l01015"><\/a><span class="lineno"> 1015<\/span>&#160;                                                              vector&lt;cv::Point2f&gt; &amp;cur_output_pts,<\/div><div class="line"><a name="l01016"><\/a><span class="lineno"> 1016<\/span>&#160;                                                              vector&lt;cv::Point2f&gt; &amp;old_output_pts)<\/div><div class="line"><a name="l01017"><\/a><span class="lineno"> 1017<\/span>&#160;{<\/div><div class="line"><a name="l01018"><\/a><span class="lineno"> 1018<\/span>&#160;    <span class="keywordflow">if<\/span> (cur_input_pts.size() &gt;= 8)<\/div><div class="line"><a name="l01019"><\/a><span class="lineno"> 1019<\/span>&#160;    {<\/div><div class="line"><a name="l01020"><\/a><span class="lineno"> 1020<\/span>&#160;        <span class="keywordtype">double<\/span> ROW = 480.0;<\/div><div class="line"><a name="l01021"><\/a><span class="lineno"> 1021<\/span>&#160;        <span class="keywordtype">double<\/span> COL = 752.0;<\/div><div class="line"><a name="l01022"><\/a><span class="lineno"> 1022<\/span>&#160;        <span class="keywordtype">double<\/span> FOCAL_LENGTH = 460.0;<\/div><div class="line"><a name="l01023"><\/a><span class="lineno"> 1023<\/span>&#160;        vector&lt;cv::Point2f&gt; un_cur_pts(cur_input_pts.size()), un_old_pts(cur_input_pts.size());<\/div><div class="line"><a name="l01024"><\/a><span class="lineno"> 1024<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; cur_input_pts.size(); i++)<\/div><div class="line"><a name="l01025"><\/a><span class="lineno"> 1025<\/span>&#160;        {<\/div><div class="line"><a name="l01026"><\/a><span class="lineno"> 1026<\/span>&#160;            Eigen::Vector3d tmp_p;<\/div><div class="line"><a name="l01027"><\/a><span class="lineno"> 1027<\/span>&#160;            m_camera-&gt;liftProjective(Eigen::Vector2d(old_input_pts[i].x, old_input_pts[i].y), tmp_p);<\/div><div class="line"><a name="l01028"><\/a><span class="lineno"> 1028<\/span>&#160;            tmp_p.x() = FOCAL_LENGTH * tmp_p.x() \/ tmp_p.z() + COL \/ 2.0;<\/div><div class="line"><a name="l01029"><\/a><span class="lineno"> 1029<\/span>&#160;            tmp_p.y() = FOCAL_LENGTH * tmp_p.y() \/ tmp_p.z() + ROW \/ 2.0;<\/div><div class="line"><a name="l01030"><\/a><span class="lineno"> 1030<\/span>&#160;            un_old_pts[i] = cv::Point2f(tmp_p.x(), tmp_p.y());<\/div><div class="line"><a name="l01031"><\/a><span class="lineno"> 1031<\/span>&#160;<\/div><div class="line"><a name="l01032"><\/a><span class="lineno"> 1032<\/span>&#160;            m_camera-&gt;liftProjective(Eigen::Vector2d(cur_input_pts[i].x, cur_input_pts[i].y), tmp_p);<\/div><div class="line"><a name="l01033"><\/a><span class="lineno"> 1033<\/span>&#160;            tmp_p.x() = FOCAL_LENGTH * tmp_p.x() \/ tmp_p.z() + COL \/ 2.0;<\/div><div class="line"><a name="l01034"><\/a><span class="lineno"> 1034<\/span>&#160;            tmp_p.y() = FOCAL_LENGTH * tmp_p.y() \/ tmp_p.z() + ROW \/ 2.0;<\/div><div class="line"><a name="l01035"><\/a><span class="lineno"> 1035<\/span>&#160;            un_cur_pts[i] = cv::Point2f(tmp_p.x(), tmp_p.y());<\/div><div class="line"><a name="l01036"><\/a><span class="lineno"> 1036<\/span>&#160;        }<\/div><div class="line"><a name="l01037"><\/a><span class="lineno"> 1037<\/span>&#160;        vector&lt;uchar&gt; status;<\/div><div class="line"><a name="l01038"><\/a><span class="lineno"> 1038<\/span>&#160;        cv::findFundamentalMat(un_old_pts, un_cur_pts, cv::FM_RANSAC, 1.0, 0.99, status);<\/div><div class="line"><a name="l01039"><\/a><span class="lineno"> 1039<\/span>&#160;        cur_output_pts = cur_input_pts;<\/div><div class="line"><a name="l01040"><\/a><span class="lineno"> 1040<\/span>&#160;        old_output_pts = old_input_pts;<\/div><div class="line"><a name="l01041"><\/a><span class="lineno"> 1041<\/span>&#160;        reduceInputToOutput( cur_input_pts, cur_output_pts, status);<\/div><div class="line"><a name="l01042"><\/a><span class="lineno"> 1042<\/span>&#160;        reduceInputToOutput( old_input_pts, old_output_pts, status);<\/div><div class="line"><a name="l01043"><\/a><span class="lineno"> 1043<\/span>&#160;        <span class="keywordflow">if<\/span>(cur_output_pts.size()&gt;20)<\/div><div class="line"><a name="l01044"><\/a><span class="lineno"> 1044<\/span>&#160;        {<\/div><div class="line"><a name="l01045"><\/a><span class="lineno"> 1045<\/span>&#160;          <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l01046"><\/a><span class="lineno"> 1046<\/span>&#160;        }<\/div><div class="line"><a name="l01047"><\/a><span class="lineno"> 1047<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01048"><\/a><span class="lineno"> 1048<\/span>&#160;          <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01049"><\/a><span class="lineno"> 1049<\/span>&#160;    }<\/div><div class="line"><a name="l01050"><\/a><span class="lineno"> 1050<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01051"><\/a><span class="lineno"> 1051<\/span>&#160;    {<\/div><div class="line"><a name="l01052"><\/a><span class="lineno"> 1052<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01053"><\/a><span class="lineno"> 1053<\/span>&#160;    }<\/div><div class="line"><a name="l01054"><\/a><span class="lineno"> 1054<\/span>&#160;}<\/div><div class="line"><a name="l01055"><\/a><span class="lineno"> 1055<\/span>&#160;<\/div><div class="line"><a name="l01056"><\/a><span class="lineno"> 1056<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01057"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af6cac8c4f44154d60647b2e82921ed53"> 1057<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af6cac8c4f44154d60647b2e82921ed53">TemplatedLoopDetector&lt;TDescriptor, F&gt;::isGeometricallyConsistent_DI<\/a>(<\/div><div class="line"><a name="l01058"><\/a><span class="lineno"> 1058<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> old_entry, <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l01059"><\/a><span class="lineno"> 1059<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l01060"><\/a><span class="lineno"> 1060<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;bowvec,<\/div><div class="line"><a name="l01061"><\/a><span class="lineno"> 1061<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l01062"><\/a><span class="lineno"> 1062<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;old_pts)<\/div><div class="line"><a name="l01063"><\/a><span class="lineno"> 1063<\/span>&#160;{<\/div><div class="line"><a name="l01064"><\/a><span class="lineno"> 1064<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;oldvec = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;retrieveFeatures(old_entry);<\/div><div class="line"><a name="l01065"><\/a><span class="lineno"> 1065<\/span>&#160;  <\/div><div class="line"><a name="l01066"><\/a><span class="lineno"> 1066<\/span>&#160;  <span class="comment">\/\/ for each word in common, get the closest descriptors<\/span><\/div><div class="line"><a name="l01067"><\/a><span class="lineno"> 1067<\/span>&#160;  <\/div><div class="line"><a name="l01068"><\/a><span class="lineno"> 1068<\/span>&#160;  vector&lt;unsigned int&gt; i_old, i_cur;<\/div><div class="line"><a name="l01069"><\/a><span class="lineno"> 1069<\/span>&#160;  <\/div><div class="line"><a name="l01070"><\/a><span class="lineno"> 1070<\/span>&#160;  FeatureVector::const_iterator old_it, cur_it; <\/div><div class="line"><a name="l01071"><\/a><span class="lineno"> 1071<\/span>&#160;  <span class="keyword">const<\/span> FeatureVector::const_iterator old_end = oldvec.end();<\/div><div class="line"><a name="l01072"><\/a><span class="lineno"> 1072<\/span>&#160;  <span class="keyword">const<\/span> FeatureVector::const_iterator cur_end = bowvec.end();<\/div><div class="line"><a name="l01073"><\/a><span class="lineno"> 1073<\/span>&#160;  <\/div><div class="line"><a name="l01074"><\/a><span class="lineno"> 1074<\/span>&#160;  old_it = oldvec.begin();<\/div><div class="line"><a name="l01075"><\/a><span class="lineno"> 1075<\/span>&#160;  cur_it = bowvec.begin();<\/div><div class="line"><a name="l01076"><\/a><span class="lineno"> 1076<\/span>&#160;  <\/div><div class="line"><a name="l01077"><\/a><span class="lineno"> 1077<\/span>&#160;  <span class="keywordflow">while<\/span>(old_it != old_end &amp;&amp; cur_it != cur_end)<\/div><div class="line"><a name="l01078"><\/a><span class="lineno"> 1078<\/span>&#160;  {<\/div><div class="line"><a name="l01079"><\/a><span class="lineno"> 1079<\/span>&#160;    <span class="keywordflow">if<\/span>(old_it-&gt;first == cur_it-&gt;first)<\/div><div class="line"><a name="l01080"><\/a><span class="lineno"> 1080<\/span>&#160;    {<\/div><div class="line"><a name="l01081"><\/a><span class="lineno"> 1081<\/span>&#160;      <span class="comment">\/\/ compute matches between <\/span><\/div><div class="line"><a name="l01082"><\/a><span class="lineno"> 1082<\/span>&#160;      <span class="comment">\/\/ features old_it-&gt;second of m_image_keys[old_entry] and<\/span><\/div><div class="line"><a name="l01083"><\/a><span class="lineno"> 1083<\/span>&#160;      <span class="comment">\/\/ features cur_it-&gt;second of keys<\/span><\/div><div class="line"><a name="l01084"><\/a><span class="lineno"> 1084<\/span>&#160;      vector&lt;unsigned int&gt; i_old_now, i_cur_now;<\/div><div class="line"><a name="l01085"><\/a><span class="lineno"> 1085<\/span>&#160;      <\/div><div class="line"><a name="l01086"><\/a><span class="lineno"> 1086<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8bf352394253d900b3b097a9786bd8ac">getMatches_neighratio<\/a>(<\/div><div class="line"><a name="l01087"><\/a><span class="lineno"> 1087<\/span>&#160;        <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>[old_entry], old_it-&gt;second, <\/div><div class="line"><a name="l01088"><\/a><span class="lineno"> 1088<\/span>&#160;        descriptors, cur_it-&gt;second,  <\/div><div class="line"><a name="l01089"><\/a><span class="lineno"> 1089<\/span>&#160;        i_old_now, i_cur_now);<\/div><div class="line"><a name="l01090"><\/a><span class="lineno"> 1090<\/span>&#160;      <\/div><div class="line"><a name="l01091"><\/a><span class="lineno"> 1091<\/span>&#160;      i_old.insert(i_old.end(), i_old_now.begin(), i_old_now.end());<\/div><div class="line"><a name="l01092"><\/a><span class="lineno"> 1092<\/span>&#160;      i_cur.insert(i_cur.end(), i_cur_now.begin(), i_cur_now.end());<\/div><div class="line"><a name="l01093"><\/a><span class="lineno"> 1093<\/span>&#160;      <\/div><div class="line"><a name="l01094"><\/a><span class="lineno"> 1094<\/span>&#160;      <span class="comment">\/\/ move old_it and cur_it forward<\/span><\/div><div class="line"><a name="l01095"><\/a><span class="lineno"> 1095<\/span>&#160;      ++old_it;<\/div><div class="line"><a name="l01096"><\/a><span class="lineno"> 1096<\/span>&#160;      ++cur_it;<\/div><div class="line"><a name="l01097"><\/a><span class="lineno"> 1097<\/span>&#160;    }<\/div><div class="line"><a name="l01098"><\/a><span class="lineno"> 1098<\/span>&#160;    <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(old_it-&gt;first &lt; cur_it-&gt;first)<\/div><div class="line"><a name="l01099"><\/a><span class="lineno"> 1099<\/span>&#160;    {<\/div><div class="line"><a name="l01100"><\/a><span class="lineno"> 1100<\/span>&#160;      <span class="comment">\/\/ move old_it forward<\/span><\/div><div class="line"><a name="l01101"><\/a><span class="lineno"> 1101<\/span>&#160;      old_it = oldvec.lower_bound(cur_it-&gt;first);<\/div><div class="line"><a name="l01102"><\/a><span class="lineno"> 1102<\/span>&#160;      <span class="comment">\/\/ old_it = (first element &gt;= cur_it.id)<\/span><\/div><div class="line"><a name="l01103"><\/a><span class="lineno"> 1103<\/span>&#160;    }<\/div><div class="line"><a name="l01104"><\/a><span class="lineno"> 1104<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01105"><\/a><span class="lineno"> 1105<\/span>&#160;    {<\/div><div class="line"><a name="l01106"><\/a><span class="lineno"> 1106<\/span>&#160;      <span class="comment">\/\/ move cur_it forward<\/span><\/div><div class="line"><a name="l01107"><\/a><span class="lineno"> 1107<\/span>&#160;      cur_it = bowvec.lower_bound(old_it-&gt;first);<\/div><div class="line"><a name="l01108"><\/a><span class="lineno"> 1108<\/span>&#160;      <span class="comment">\/\/ cur_it = (first element &gt;= old_it.id)<\/span><\/div><div class="line"><a name="l01109"><\/a><span class="lineno"> 1109<\/span>&#160;    }<\/div><div class="line"><a name="l01110"><\/a><span class="lineno"> 1110<\/span>&#160;  }<\/div><div class="line"><a name="l01111"><\/a><span class="lineno"> 1111<\/span>&#160;  <\/div><div class="line"><a name="l01112"><\/a><span class="lineno"> 1112<\/span>&#160;  <span class="comment">\/\/ calculate now the fundamental matrix<\/span><\/div><div class="line"><a name="l01113"><\/a><span class="lineno"> 1113<\/span>&#160;  <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)i_old.size() &gt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">min_Fpoints<\/a>)<\/div><div class="line"><a name="l01114"><\/a><span class="lineno"> 1114<\/span>&#160;  {<\/div><div class="line"><a name="l01115"><\/a><span class="lineno"> 1115<\/span>&#160;    vector&lt;cv::Point2f&gt; old_points, cur_points;<\/div><div class="line"><a name="l01116"><\/a><span class="lineno"> 1116<\/span>&#160;    <\/div><div class="line"><a name="l01117"><\/a><span class="lineno"> 1117<\/span>&#160;    <span class="comment">\/\/ add matches to the vectors to calculate the fundamental matrix<\/span><\/div><div class="line"><a name="l01118"><\/a><span class="lineno"> 1118<\/span>&#160;    vector&lt;unsigned int&gt;::const_iterator oit, cit;<\/div><div class="line"><a name="l01119"><\/a><span class="lineno"> 1119<\/span>&#160;    oit = i_old.begin();<\/div><div class="line"><a name="l01120"><\/a><span class="lineno"> 1120<\/span>&#160;    cit = i_cur.begin();<\/div><div class="line"><a name="l01121"><\/a><span class="lineno"> 1121<\/span>&#160;    <\/div><div class="line"><a name="l01122"><\/a><span class="lineno"> 1122<\/span>&#160;    <span class="keywordflow">for<\/span>(; oit != i_old.end(); ++oit, ++cit)<\/div><div class="line"><a name="l01123"><\/a><span class="lineno"> 1123<\/span>&#160;    {<\/div><div class="line"><a name="l01124"><\/a><span class="lineno"> 1124<\/span>&#160;      <span class="keyword">const<\/span> cv::KeyPoint &amp;old_k = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>[old_entry][*oit];<\/div><div class="line"><a name="l01125"><\/a><span class="lineno"> 1125<\/span>&#160;      <span class="keyword">const<\/span> cv::KeyPoint &amp;cur_k = keys[*cit];<\/div><div class="line"><a name="l01126"><\/a><span class="lineno"> 1126<\/span>&#160;      <\/div><div class="line"><a name="l01127"><\/a><span class="lineno"> 1127<\/span>&#160;      old_points.push_back(old_k.pt);<\/div><div class="line"><a name="l01128"><\/a><span class="lineno"> 1128<\/span>&#160;      cur_points.push_back(cur_k.pt);<\/div><div class="line"><a name="l01129"><\/a><span class="lineno"> 1129<\/span>&#160;    }<\/div><div class="line"><a name="l01130"><\/a><span class="lineno"> 1130<\/span>&#160;  <\/div><div class="line"><a name="l01131"><\/a><span class="lineno"> 1131<\/span>&#160;    cv::Mat oldMat(old_points.size(), 2, CV_32F, &amp;old_points[0]);<\/div><div class="line"><a name="l01132"><\/a><span class="lineno"> 1132<\/span>&#160;    cv::Mat curMat(cur_points.size(), 2, CV_32F, &amp;cur_points[0]);<\/div><div class="line"><a name="l01133"><\/a><span class="lineno"> 1133<\/span>&#160;    <span class="comment">\/\/printf(&quot;-old size %d current size %d\\n&quot;,old_points.size(),cur_points.size());<\/span><\/div><div class="line"><a name="l01134"><\/a><span class="lineno"> 1134<\/span>&#160;    <span class="keywordtype">bool<\/span> find_fundamental_suss = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01135"><\/a><span class="lineno"> 1135<\/span>&#160;    find_fundamental_suss =  checkFoundamental(cur_points, old_points, cur_pts, old_pts);<\/div><div class="line"><a name="l01136"><\/a><span class="lineno"> 1136<\/span>&#160;    <span class="keywordflow">if<\/span>(find_fundamental_suss)<\/div><div class="line"><a name="l01137"><\/a><span class="lineno"> 1137<\/span>&#160;    {<\/div><div class="line"><a name="l01138"><\/a><span class="lineno"> 1138<\/span>&#160;      <span class="comment">\/\/cur_pts = cur_points;<\/span><\/div><div class="line"><a name="l01139"><\/a><span class="lineno"> 1139<\/span>&#160;      <span class="comment">\/\/old_pts = old_points;<\/span><\/div><div class="line"><a name="l01140"><\/a><span class="lineno"> 1140<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l01141"><\/a><span class="lineno"> 1141<\/span>&#160;    }<\/div><div class="line"><a name="l01142"><\/a><span class="lineno"> 1142<\/span>&#160;  }<\/div><div class="line"><a name="l01143"><\/a><span class="lineno"> 1143<\/span>&#160;  <\/div><div class="line"><a name="l01144"><\/a><span class="lineno"> 1144<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01145"><\/a><span class="lineno"> 1145<\/span>&#160;} <\/div><div class="line"><a name="l01146"><\/a><span class="lineno"> 1146<\/span>&#160;<\/div><div class="line"><a name="l01147"><\/a><span class="lineno"> 1147<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01148"><\/a><span class="lineno"> 1148<\/span>&#160;<\/div><div class="line"><a name="l01149"><\/a><span class="lineno"> 1149<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01150"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab37c7cfa44d5f35fd51f3fa65243e404"> 1150<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab37c7cfa44d5f35fd51f3fa65243e404">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getFlannStructure<\/a>(<\/div><div class="line"><a name="l01151"><\/a><span class="lineno"> 1151<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l01152"><\/a><span class="lineno"> 1152<\/span>&#160;  cv::FlannBasedMatcher &amp;flann_structure)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01153"><\/a><span class="lineno"> 1153<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01154"><\/a><span class="lineno"> 1154<\/span>&#160;  vector&lt;cv::Mat&gt; features(1);<\/div><div class="line"><a name="l01155"><\/a><span class="lineno"> 1155<\/span>&#160;  F::toMat32F(descriptors, features[0]);<\/div><div class="line"><a name="l01156"><\/a><span class="lineno"> 1156<\/span>&#160;  <\/div><div class="line"><a name="l01157"><\/a><span class="lineno"> 1157<\/span>&#160;  flann_structure.clear();<\/div><div class="line"><a name="l01158"><\/a><span class="lineno"> 1158<\/span>&#160;  flann_structure.add(features);<\/div><div class="line"><a name="l01159"><\/a><span class="lineno"> 1159<\/span>&#160;  flann_structure.train();<\/div><div class="line"><a name="l01160"><\/a><span class="lineno"> 1160<\/span>&#160;}<\/div><div class="line"><a name="l01161"><\/a><span class="lineno"> 1161<\/span>&#160;<\/div><div class="line"><a name="l01162"><\/a><span class="lineno"> 1162<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01163"><\/a><span class="lineno"> 1163<\/span>&#160;<\/div><div class="line"><a name="l01164"><\/a><span class="lineno"> 1164<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01165"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8bf352394253d900b3b097a9786bd8ac"> 1165<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8bf352394253d900b3b097a9786bd8ac">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getMatches_neighratio<\/a>(<\/div><div class="line"><a name="l01166"><\/a><span class="lineno"> 1166<\/span>&#160;  <span class="keyword">const<\/span> vector&lt;TDescriptor&gt; &amp;A, <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_A,<\/div><div class="line"><a name="l01167"><\/a><span class="lineno"> 1167<\/span>&#160;  <span class="keyword">const<\/span> vector&lt;TDescriptor&gt; &amp;B, <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_B,<\/div><div class="line"><a name="l01168"><\/a><span class="lineno"> 1168<\/span>&#160;  vector&lt;unsigned int&gt; &amp;i_match_A, vector&lt;unsigned int&gt; &amp;i_match_B)<span class="keyword"> const <\/span><\/div><div class="line"><a name="l01169"><\/a><span class="lineno"> 1169<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01170"><\/a><span class="lineno"> 1170<\/span>&#160;  i_match_A.resize(0);<\/div><div class="line"><a name="l01171"><\/a><span class="lineno"> 1171<\/span>&#160;  i_match_B.resize(0);<\/div><div class="line"><a name="l01172"><\/a><span class="lineno"> 1172<\/span>&#160;  i_match_A.reserve( min(i_A.size(), i_B.size()) );<\/div><div class="line"><a name="l01173"><\/a><span class="lineno"> 1173<\/span>&#160;  i_match_B.reserve( min(i_A.size(), i_B.size()) );<\/div><div class="line"><a name="l01174"><\/a><span class="lineno"> 1174<\/span>&#160;  <\/div><div class="line"><a name="l01175"><\/a><span class="lineno"> 1175<\/span>&#160;  vector&lt;unsigned int&gt;::const_iterator ait, bit;<\/div><div class="line"><a name="l01176"><\/a><span class="lineno"> 1176<\/span>&#160;  <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i, j;<\/div><div class="line"><a name="l01177"><\/a><span class="lineno"> 1177<\/span>&#160;  i = 0;<\/div><div class="line"><a name="l01178"><\/a><span class="lineno"> 1178<\/span>&#160;  <span class="keywordflow">for<\/span>(ait = i_A.begin(); ait != i_A.end(); ++ait, ++i)<\/div><div class="line"><a name="l01179"><\/a><span class="lineno"> 1179<\/span>&#160;  {<\/div><div class="line"><a name="l01180"><\/a><span class="lineno"> 1180<\/span>&#160;    <span class="keywordtype">int<\/span> best_j_now = -1;<\/div><div class="line"><a name="l01181"><\/a><span class="lineno"> 1181<\/span>&#160;    <span class="keywordtype">double<\/span> best_dist_1 = 1e9;<\/div><div class="line"><a name="l01182"><\/a><span class="lineno"> 1182<\/span>&#160;    <span class="keywordtype">double<\/span> best_dist_2 = 1e9;<\/div><div class="line"><a name="l01183"><\/a><span class="lineno"> 1183<\/span>&#160;    <\/div><div class="line"><a name="l01184"><\/a><span class="lineno"> 1184<\/span>&#160;    j = 0;<\/div><div class="line"><a name="l01185"><\/a><span class="lineno"> 1185<\/span>&#160;    <span class="keywordflow">for<\/span>(bit = i_B.begin(); bit != i_B.end(); ++bit, ++j)<\/div><div class="line"><a name="l01186"><\/a><span class="lineno"> 1186<\/span>&#160;    {<\/div><div class="line"><a name="l01187"><\/a><span class="lineno"> 1187<\/span>&#160;      <span class="keywordtype">double<\/span> d = F::distance(A[*ait], B[*bit]);<\/div><div class="line"><a name="l01188"><\/a><span class="lineno"> 1188<\/span>&#160;            <\/div><div class="line"><a name="l01189"><\/a><span class="lineno"> 1189<\/span>&#160;      <span class="comment">\/\/ in i<\/span><\/div><div class="line"><a name="l01190"><\/a><span class="lineno"> 1190<\/span>&#160;      <span class="keywordflow">if<\/span>(d &lt; best_dist_1)<\/div><div class="line"><a name="l01191"><\/a><span class="lineno"> 1191<\/span>&#160;      {<\/div><div class="line"><a name="l01192"><\/a><span class="lineno"> 1192<\/span>&#160;        best_j_now = j;<\/div><div class="line"><a name="l01193"><\/a><span class="lineno"> 1193<\/span>&#160;        best_dist_2 = best_dist_1;<\/div><div class="line"><a name="l01194"><\/a><span class="lineno"> 1194<\/span>&#160;        best_dist_1 = d;<\/div><div class="line"><a name="l01195"><\/a><span class="lineno"> 1195<\/span>&#160;      }<\/div><div class="line"><a name="l01196"><\/a><span class="lineno"> 1196<\/span>&#160;      <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(d &lt; best_dist_2)<\/div><div class="line"><a name="l01197"><\/a><span class="lineno"> 1197<\/span>&#160;      {<\/div><div class="line"><a name="l01198"><\/a><span class="lineno"> 1198<\/span>&#160;        best_dist_2 = d;<\/div><div class="line"><a name="l01199"><\/a><span class="lineno"> 1199<\/span>&#160;      }<\/div><div class="line"><a name="l01200"><\/a><span class="lineno"> 1200<\/span>&#160;    }<\/div><div class="line"><a name="l01201"><\/a><span class="lineno"> 1201<\/span>&#160;    <\/div><div class="line"><a name="l01202"><\/a><span class="lineno"> 1202<\/span>&#160;    <span class="keywordflow">if<\/span>(best_dist_1 \/ best_dist_2 &lt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">max_neighbor_ratio<\/a>)<\/div><div class="line"><a name="l01203"><\/a><span class="lineno"> 1203<\/span>&#160;    {<\/div><div class="line"><a name="l01204"><\/a><span class="lineno"> 1204<\/span>&#160;      <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> idx_B = i_B[best_j_now];<\/div><div class="line"><a name="l01205"><\/a><span class="lineno"> 1205<\/span>&#160;      bit = find(i_match_B.begin(), i_match_B.end(), idx_B);<\/div><div class="line"><a name="l01206"><\/a><span class="lineno"> 1206<\/span>&#160;      <\/div><div class="line"><a name="l01207"><\/a><span class="lineno"> 1207<\/span>&#160;      <span class="keywordflow">if<\/span>(bit == i_match_B.end())<\/div><div class="line"><a name="l01208"><\/a><span class="lineno"> 1208<\/span>&#160;      {<\/div><div class="line"><a name="l01209"><\/a><span class="lineno"> 1209<\/span>&#160;        i_match_B.push_back(idx_B);<\/div><div class="line"><a name="l01210"><\/a><span class="lineno"> 1210<\/span>&#160;        i_match_A.push_back(*ait);<\/div><div class="line"><a name="l01211"><\/a><span class="lineno"> 1211<\/span>&#160;      }<\/div><div class="line"><a name="l01212"><\/a><span class="lineno"> 1212<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01213"><\/a><span class="lineno"> 1213<\/span>&#160;      {<\/div><div class="line"><a name="l01214"><\/a><span class="lineno"> 1214<\/span>&#160;        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> idx_A = i_match_A[ bit - i_match_B.begin() ];<\/div><div class="line"><a name="l01215"><\/a><span class="lineno"> 1215<\/span>&#160;        <span class="keywordtype">double<\/span> d = F::distance(A[idx_A], B[idx_B]);<\/div><div class="line"><a name="l01216"><\/a><span class="lineno"> 1216<\/span>&#160;        <span class="keywordflow">if<\/span>(best_dist_1 &lt; d)<\/div><div class="line"><a name="l01217"><\/a><span class="lineno"> 1217<\/span>&#160;        {<\/div><div class="line"><a name="l01218"><\/a><span class="lineno"> 1218<\/span>&#160;          i_match_A[ bit - i_match_B.begin() ] = *ait;<\/div><div class="line"><a name="l01219"><\/a><span class="lineno"> 1219<\/span>&#160;        }<\/div><div class="line"><a name="l01220"><\/a><span class="lineno"> 1220<\/span>&#160;      }<\/div><div class="line"><a name="l01221"><\/a><span class="lineno"> 1221<\/span>&#160;        <\/div><div class="line"><a name="l01222"><\/a><span class="lineno"> 1222<\/span>&#160;    }<\/div><div class="line"><a name="l01223"><\/a><span class="lineno"> 1223<\/span>&#160;  }<\/div><div class="line"><a name="l01224"><\/a><span class="lineno"> 1224<\/span>&#160;}<\/div><div class="line"><a name="l01225"><\/a><span class="lineno"> 1225<\/span>&#160;<\/div><div class="line"><a name="l01226"><\/a><span class="lineno"> 1226<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01227"><\/a><span class="lineno"> 1227<\/span>&#160;<\/div><div class="line"><a name="l01228"><\/a><span class="lineno"> 1228<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01229"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a19d0e02c4bd382993867d97929ef93ac"> 1229<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a19d0e02c4bd382993867d97929ef93ac">TemplatedLoopDetector&lt;TDescriptor, F&gt;::removeLowScores<\/a>(<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q,<\/div><div class="line"><a name="l01230"><\/a><span class="lineno"> 1230<\/span>&#160;  <span class="keywordtype">double<\/span> threshold)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01231"><\/a><span class="lineno"> 1231<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01232"><\/a><span class="lineno"> 1232<\/span>&#160;  <span class="comment">\/\/ remember scores in q are in descending order now<\/span><\/div><div class="line"><a name="l01233"><\/a><span class="lineno"> 1233<\/span>&#160;  <span class="comment">\/\/QueryResults::iterator qit = <\/span><\/div><div class="line"><a name="l01234"><\/a><span class="lineno"> 1234<\/span>&#160;  <span class="comment">\/\/  lower_bound(q.begin(), q.end(), threshold, Result::geqv);<\/span><\/div><div class="line"><a name="l01235"><\/a><span class="lineno"> 1235<\/span>&#160;  <\/div><div class="line"><a name="l01236"><\/a><span class="lineno"> 1236<\/span>&#160;  <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> aux(0, threshold);<\/div><div class="line"><a name="l01237"><\/a><span class="lineno"> 1237<\/span>&#160;  QueryResults::iterator qit = <\/div><div class="line"><a name="l01238"><\/a><span class="lineno"> 1238<\/span>&#160;    lower_bound(q.begin(), q.end(), aux, Result::geq);<\/div><div class="line"><a name="l01239"><\/a><span class="lineno"> 1239<\/span>&#160;  <\/div><div class="line"><a name="l01240"><\/a><span class="lineno"> 1240<\/span>&#160;  <span class="comment">\/\/ qit = first element &lt; m_alpha_minus || end<\/span><\/div><div class="line"><a name="l01241"><\/a><span class="lineno"> 1241<\/span>&#160;  <\/div><div class="line"><a name="l01242"><\/a><span class="lineno"> 1242<\/span>&#160;  <span class="keywordflow">if<\/span>(qit != q.end())<\/div><div class="line"><a name="l01243"><\/a><span class="lineno"> 1243<\/span>&#160;  {<\/div><div class="line"><a name="l01244"><\/a><span class="lineno"> 1244<\/span>&#160;    <span class="keywordtype">int<\/span> valid_entries = qit - q.begin();<\/div><div class="line"><a name="l01245"><\/a><span class="lineno"> 1245<\/span>&#160;    q.resize(valid_entries);<\/div><div class="line"><a name="l01246"><\/a><span class="lineno"> 1246<\/span>&#160;  }<\/div><div class="line"><a name="l01247"><\/a><span class="lineno"> 1247<\/span>&#160;}<\/div><div class="line"><a name="l01248"><\/a><span class="lineno"> 1248<\/span>&#160;<\/div><div class="line"><a name="l01249"><\/a><span class="lineno"> 1249<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01250"><\/a><span class="lineno"> 1250<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01251"><\/a><span class="lineno"> 1251<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor, F&gt;::eraseIndex<\/a><\/div><div class="line"><a name="l01252"><\/a><span class="lineno"> 1252<\/span>&#160;(std::vector&lt;int&gt; &amp;erase_index)<\/div><div class="line"><a name="l01253"><\/a><span class="lineno"> 1253<\/span>&#160;{<\/div><div class="line"><a name="l01254"><\/a><span class="lineno"> 1254<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; (int)erase_index.size(); i++)<\/div><div class="line"><a name="l01255"><\/a><span class="lineno"> 1255<\/span>&#160;  {<\/div><div class="line"><a name="l01256"><\/a><span class="lineno"> 1256<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">DBoW2::EntryId<\/a> entry;<\/div><div class="line"><a name="l01257"><\/a><span class="lineno"> 1257<\/span>&#160;    entry = (<span class="keywordtype">unsigned<\/span> int)erase_index[i];<\/div><div class="line"><a name="l01258"><\/a><span class="lineno"> 1258<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;delete_entry(entry);<\/div><div class="line"><a name="l01259"><\/a><span class="lineno"> 1259<\/span>&#160;  }<\/div><div class="line"><a name="l01260"><\/a><span class="lineno"> 1260<\/span>&#160;}<\/div><div class="line"><a name="l01261"><\/a><span class="lineno"> 1261<\/span>&#160;} <span class="comment">\/\/ namespace DLoopDetector<\/span><\/div><div class="line"><a name="l01262"><\/a><span class="lineno"> 1262<\/span>&#160;<\/div><div class="line"><a name="l01263"><\/a><span class="lineno"> 1263<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters_html_a41e29466a9eeda56f213f43cdd6f393e"><div class="ttname"><a href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">DLoopDetector::TemplatedLoopDetector::Parameters::alpha<\/a><\/div><div class="ttdeci">float alpha<\/div><div class="ttdoc">Alpha threshold. <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedLoopDetector.h:113<\/div><\/div>$/;"	a
l00001	doc/html/TemplatedVocabulary_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_TEMPLATED_VOCABULARY__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_TEMPLATED_VOCABULARY__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;cassert&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;FeatureVector.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &quot;ScoringObject.h&quot;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;..\/DUtils\/DUtils.h&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">\/\/ Added by VINS [[[<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;..\/VocabularyBinary.hpp&quot;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;boost\/dynamic_bitset.hpp&gt;<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/\/ Added by VINS ]]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;{       <\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keywordtype">int<\/span> k = 10, <span class="keywordtype">int<\/span> L = 5, <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting = TF_IDF, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring = L1_NORM);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  <\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  <\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9d15f985a0c3badc1518be0fbe663099">~TemplatedVocabulary<\/a>();<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;  <\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a5355c25b6f37c11acffe48996e19323f">operator=<\/a>(<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;  <\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;  <\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features, <\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;      <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L);<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;      <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L, <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  <\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features, <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v) <\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  <\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features,<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fv, <span class="keywordtype">int<\/span> levelsup) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> TDescriptor&amp; feature) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;  <\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9">score<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;b) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;  <\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa59e9b47d05bce5ecd4e90afbcd63727">getParentNode<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid, <span class="keywordtype">int<\/span> levelsup) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;  <\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a916015cc8e6cd6f53c6e067c7b829f75">getWordsFromNode<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid, std::vector&lt;WordId&gt; &amp;words) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <\/div><div class="line"><a name="l00180"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#afadb7942a23548903deb4548ca1d6e7d">  180<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afadb7942a23548903deb4548ca1d6e7d">getBranchingFactor<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>; }<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;  <\/div><div class="line"><a name="l00186"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a60d5e4d240d69042c47473d4c6497e01">  186<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a60d5e4d240d69042c47473d4c6497e01">getDepthLevels<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>; }<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;  <\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;  <span class="keywordtype">float<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#acee6fb9313d844fbcf05f470379c6dc3">getEffectiveLevels<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;  <\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> TDescriptor <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aed50a053fac7e270bf8369a8667cf2c6">getWord<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;  <\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a95edc3ffa594ac7a798aec0808997b4a">getWordWeight<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;  <\/div><div class="line"><a name="l00212"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa1b7c6f984353736ecf4a2483b1c1b6b">  212<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa1b7c6f984353736ecf4a2483b1c1b6b">getWeightingType<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>; }<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;  <\/div><div class="line"><a name="l00218"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#adca2e844333011cd9341d42be9cec5e3">  218<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#adca2e844333011cd9341d42be9cec5e3">getScoringType<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>; }<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa8f63a3379debd40214899d996cfc733">setWeightingType<\/a>(<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> type);<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;  <\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a05a6c2f46184618c9ea8368f53e6980c">setScoringType<\/a>(<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> type);<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;  <\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;  <\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">save<\/a>(cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;vocabulary&quot;<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  <\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;vocabulary&quot;<\/span>);<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;    <\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  <span class="comment">\/\/ Added by VINS [[[<\/span><\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> loadBin(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;  <span class="comment">\/\/ Added by VINS ]]]<\/span><\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    <\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0b6721fde54bd8cd008f6a120398741e">stopWords<\/a>(<span class="keywordtype">double<\/span> minWeight);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a40913d67e369e6993c2eab80a968f829">  281<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> TDescriptor *<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a40913d67e369e6993c2eab80a968f829">pDescriptor<\/a>;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">  284<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a> <\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;  {<\/div><div class="line"><a name="l00287"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">  287<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">id<\/a>;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">  289<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">weight<\/a>;<\/div><div class="line"><a name="l00291"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a54acc0958e378306cc03f20a186c1fdc">  291<\/a><\/span>&#160;    std::vector&lt;NodeId&gt; <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a54acc0958e378306cc03f20a186c1fdc">children<\/a>;<\/div><div class="line"><a name="l00293"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a082fba9dcf272b78354ffd5b1d58f5fa">  293<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a082fba9dcf272b78354ffd5b1d58f5fa">parent<\/a>;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ab785e994eeae8e6c1d67ee45ad4c8450">  295<\/a><\/span>&#160;    TDescriptor <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ab785e994eeae8e6c1d67ee45ad4c8450">descriptor<\/a>;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#aa56418d848932be4583fac6b3021c708">  298<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#aa56418d848932be4583fac6b3021c708">word_id<\/a>;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div><div class="line"><a name="l00303"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a1339ee00108c4c652cd1ca55a37c3fd3">  303<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a1339ee00108c4c652cd1ca55a37c3fd3">Node<\/a>(): id(0), weight(0), parent(0), word_id(0){}<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;    <\/div><div class="line"><a name="l00309"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a9f1fcb620025ba6103a47e5c2b169cd6">  309<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a9f1fcb620025ba6103a47e5c2b169cd6">Node<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> _id): id(_id), weight(0), parent(0), word_id(0){}<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">  315<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">isLeaf<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> children.empty(); }<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;  };<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">getFeatures<\/a>(<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    std::vector&lt;pDescriptor&gt; &amp;features) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;feature, <\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;<span class="keywordtype">id<\/span>, <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> &amp;<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">weight<\/a>, <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a>* nid = NULL, <span class="keywordtype">int<\/span> levelsup = 0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;feature, <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;<span class="keywordtype">id<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;      <\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">HKmeansStep<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> parent_id, <span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;    <span class="keywordtype">int<\/span> current_level);<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">initiateClusters<\/a>(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;    std::vector&lt;TDescriptor&gt; &amp;clusters) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;  <\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">initiateClustersKMpp<\/a>(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    std::vector&lt;TDescriptor&gt; &amp;clusters) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;  <\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">createWords<\/a>();<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;  <\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">setNodeWeights<\/a>(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;features);<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;  <\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">  395<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>;<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;  <\/div><div class="line"><a name="l00398"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">  398<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>;<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;  <\/div><div class="line"><a name="l00401"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">  401<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>;<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;  <\/div><div class="line"><a name="l00404"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">  404<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>;<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;  <\/div><div class="line"><a name="l00407"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">  407<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1GeneralScoring.html">GeneralScoring<\/a>* <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>;<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;  <\/div><div class="line"><a name="l00410"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">  410<\/a><\/span>&#160;  std::vector&lt;Node&gt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>;<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;  <\/div><div class="line"><a name="l00414"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">  414<\/a><\/span>&#160;  std::vector&lt;Node*&gt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>;<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;  <\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;};<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00422"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">  422<\/a><\/span>&#160;  (<span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L, <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring)<\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>(k), <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>(L), <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>(weighting), <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>(scoring),<\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;{<\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;  <span class="comment">\/\/printf(&quot;loop start load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;}<\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<\/div><div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00434"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a72fc6a164a5174003d19bd3c54615de6">  434<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;filename): <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;{<\/div><div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;    <span class="comment">\/\/m_scoring = KL;<\/span><\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;    <span class="comment">\/\/ Changed by VINS [[[<\/span><\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;    <span class="comment">\/\/printf(&quot;loop start load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;    loadBin(filename);<\/div><div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;    <span class="comment">\/\/ Changed by VINS ]]]<\/span><\/div><div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;}<\/div><div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;<\/div><div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00447"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a255d68e7b4235487f8d2d8ea0cbaf43a">  447<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename): <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;{<\/div><div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;    <span class="comment">\/\/m_scoring = KL;<\/span><\/div><div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;    <span class="comment">\/\/ Changed by VINS [[[<\/span><\/div><div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;    <span class="comment">\/\/printf(&quot;loop start load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;    loadBin(filename);<\/div><div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;    <span class="comment">\/\/ Changed by VINS ]]]<\/span><\/div><div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;}<\/div><div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;<\/div><div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;<\/div><div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00459"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">  459<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">TemplatedVocabulary&lt;TDescriptor,F&gt;::createScoringObject<\/a>()<\/div><div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;{<\/div><div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>;<\/div><div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = NULL;<\/div><div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;  <\/div><div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;  <span class="keywordflow">switch<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>)<\/div><div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;  {<\/div><div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;    <span class="keywordflow">case<\/span> L1_NORM: <\/div><div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> L1Scoring;<\/div><div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;      <\/div><div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;    <span class="keywordflow">case<\/span> L2_NORM:<\/div><div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> L2Scoring;<\/div><div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;    <\/div><div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;    <span class="keywordflow">case<\/span> CHI_SQUARE:<\/div><div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> ChiSquareScoring;<\/div><div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;      <\/div><div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;    <span class="keywordflow">case<\/span> KL:<\/div><div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> KLScoring;<\/div><div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;      <\/div><div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;    <span class="keywordflow">case<\/span> BHATTACHARYYA:<\/div><div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> BhattacharyyaScoring;<\/div><div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;      <\/div><div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;    <span class="keywordflow">case<\/span> DOT_PRODUCT:<\/div><div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> DotProductScoring;<\/div><div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;    <\/div><div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;  }<\/div><div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;}<\/div><div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;<\/div><div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;<\/div><div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00496"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a05a6c2f46184618c9ea8368f53e6980c">  496<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a05a6c2f46184618c9ea8368f53e6980c">TemplatedVocabulary&lt;TDescriptor,F&gt;::setScoringType<\/a>(<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> type)<\/div><div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;{<\/div><div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = type;<\/div><div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00500"><\/a><span class="lineno">  500<\/span>&#160;}<\/div><div class="line"><a name="l00501"><\/a><span class="lineno">  501<\/span>&#160;<\/div><div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00503"><\/a><span class="lineno">  503<\/span>&#160;<\/div><div class="line"><a name="l00504"><\/a><span class="lineno">  504<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00505"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa8f63a3379debd40214899d996cfc733">  505<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa8f63a3379debd40214899d996cfc733">TemplatedVocabulary&lt;TDescriptor,F&gt;::setWeightingType<\/a>(<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> type)<\/div><div class="line"><a name="l00506"><\/a><span class="lineno">  506<\/span>&#160;{<\/div><div class="line"><a name="l00507"><\/a><span class="lineno">  507<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = type;<\/div><div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;}<\/div><div class="line"><a name="l00509"><\/a><span class="lineno">  509<\/span>&#160;<\/div><div class="line"><a name="l00510"><\/a><span class="lineno">  510<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;<\/div><div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00513"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aac48ee5331b5d88a4db1a3c93cb0f6a5">  513<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a>(<\/div><div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc)<\/div><div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;{<\/div><div class="line"><a name="l00517"><\/a><span class="lineno">  517<\/span>&#160;  printf(<span class="stringliteral">&quot;loop start load vocabulary\\n&quot;<\/span>);<\/div><div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;  *<span class="keyword">this<\/span> = voc;<\/div><div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;}<\/div><div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;<\/div><div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00522"><\/a><span class="lineno">  522<\/span>&#160;<\/div><div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00524"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a9d15f985a0c3badc1518be0fbe663099">  524<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9d15f985a0c3badc1518be0fbe663099">TemplatedVocabulary&lt;TDescriptor,F&gt;::~TemplatedVocabulary<\/a>()<\/div><div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;{<\/div><div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>;<\/div><div class="line"><a name="l00527"><\/a><span class="lineno">  527<\/span>&#160;}<\/div><div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;<\/div><div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;<\/div><div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; <\/div><div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;::operator<\/a>=<\/div><div class="line"><a name="l00534"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a5355c25b6f37c11acffe48996e19323f">  534<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc)<\/div><div class="line"><a name="l00535"><\/a><span class="lineno">  535<\/span>&#160;{  <\/div><div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = voc.m_k;<\/div><div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = voc.m_L;<\/div><div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = voc.m_scoring;<\/div><div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = voc.m_weighting;<\/div><div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;<\/div><div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;  <\/div><div class="line"><a name="l00543"><\/a><span class="lineno">  543<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;  <\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a> = voc.m_nodes;<\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">createWords<\/a>();<\/div><div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;  <\/div><div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;  <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;}<\/div><div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;<\/div><div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;<\/div><div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00555"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">  555<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">TemplatedVocabulary&lt;TDescriptor,F&gt;::create<\/a>(<\/div><div class="line"><a name="l00556"><\/a><span class="lineno">  556<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features)<\/div><div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;{<\/div><div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l00560"><\/a><span class="lineno">  560<\/span>&#160;  <\/div><div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;  <span class="comment">\/\/ expected_nodes = Sum_{i=0..L} ( k^i )<\/span><\/div><div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;    <span class="keywordtype">int<\/span> expected_nodes = <\/div><div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;        (int)((pow((<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>, (<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> + 1) - 1)\/(m_k - 1));<\/div><div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;<\/div><div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.reserve(expected_nodes); <span class="comment">\/\/ avoid allocations when creating the tree<\/span><\/div><div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;  <\/div><div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;  <\/div><div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;  std::vector&lt;pDescriptor&gt; features;<\/div><div class="line"><a name="l00569"><\/a><span class="lineno">  569<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">getFeatures<\/a>(training_features, features);<\/div><div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;<\/div><div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;<\/div><div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;  <span class="comment">\/\/ create root  <\/span><\/div><div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.push_back(<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>(0)); <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;  <\/div><div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;  <span class="comment">\/\/ create the tree<\/span><\/div><div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">HKmeansStep<\/a>(0, features, 1);<\/div><div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;<\/div><div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;  <span class="comment">\/\/ create the words<\/span><\/div><div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">createWords<\/a>();<\/div><div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<\/div><div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;  <span class="comment">\/\/ and set the weight of each node of the tree<\/span><\/div><div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">setNodeWeights<\/a>(training_features);<\/div><div class="line"><a name="l00583"><\/a><span class="lineno">  583<\/span>&#160;  <\/div><div class="line"><a name="l00584"><\/a><span class="lineno">  584<\/span>&#160;}<\/div><div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;<\/div><div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;<\/div><div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00589"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a94d48231b043a1102af4c35e256f2054">  589<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">TemplatedVocabulary&lt;TDescriptor,F&gt;::create<\/a>(<\/div><div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00591"><\/a><span class="lineno">  591<\/span>&#160;  <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L)<\/div><div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;{<\/div><div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = k;<\/div><div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = L;<\/div><div class="line"><a name="l00595"><\/a><span class="lineno">  595<\/span>&#160;  <\/div><div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a>(training_features);<\/div><div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;}<\/div><div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;<\/div><div class="line"><a name="l00599"><\/a><span class="lineno">  599<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;<\/div><div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00602"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a1e4a3e90f4aa1e6b6ea4d7491c223fd4">  602<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">TemplatedVocabulary&lt;TDescriptor,F&gt;::create<\/a>(<\/div><div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;  <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L, <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring)<\/div><div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;{<\/div><div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = k;<\/div><div class="line"><a name="l00607"><\/a><span class="lineno">  607<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = L;<\/div><div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = weighting;<\/div><div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = scoring;<\/div><div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;  <\/div><div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a>(training_features);<\/div><div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;}<\/div><div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;<\/div><div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00616"><\/a><span class="lineno">  616<\/span>&#160;<\/div><div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00618"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">  618<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">TemplatedVocabulary&lt;TDescriptor,F&gt;::getFeatures<\/a>(<\/div><div class="line"><a name="l00619"><\/a><span class="lineno">  619<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;  std::vector&lt;pDescriptor&gt; &amp;features)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;  features.resize(0);<\/div><div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;  <\/div><div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt;::const_iterator vvit;<\/div><div class="line"><a name="l00625"><\/a><span class="lineno">  625<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator vit;<\/div><div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;  <span class="keywordflow">for<\/span>(vvit = training_features.begin(); vvit != training_features.end(); ++vvit)<\/div><div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;  {<\/div><div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;    features.reserve(features.size() + vvit-&gt;size());<\/div><div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;    <span class="keywordflow">for<\/span>(vit = vvit-&gt;begin(); vit != vvit-&gt;end(); ++vit)<\/div><div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;    {<\/div><div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;      features.push_back(&amp;(*vit));<\/div><div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;    }<\/div><div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;  }<\/div><div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;}<\/div><div class="line"><a name="l00635"><\/a><span class="lineno">  635<\/span>&#160;<\/div><div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;<\/div><div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00639"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">  639<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">TemplatedVocabulary&lt;TDescriptor,F&gt;::HKmeansStep<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> parent_id, <\/div><div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors, <span class="keywordtype">int<\/span> current_level)<\/div><div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;{<\/div><div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;  <span class="keywordflow">if<\/span>(descriptors.empty()) <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;        <\/div><div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;  <span class="comment">\/\/ features associated to each cluster<\/span><\/div><div class="line"><a name="l00645"><\/a><span class="lineno">  645<\/span>&#160;  std::vector&lt;TDescriptor&gt; clusters;<\/div><div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;  std::vector&lt;std::vector&lt;unsigned int&gt; &gt; groups; <span class="comment">\/\/ groups[i] = [j1, j2, ...]<\/span><\/div><div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;    <span class="comment">\/\/ j1, j2, ... indices of descriptors associated to cluster i<\/span><\/div><div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;<\/div><div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;  clusters.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>);<\/div><div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;    groups.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>);<\/div><div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;  <\/div><div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;  <span class="comment">\/\/const int msizes[] = { m_k, descriptors.size() };<\/span><\/div><div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;  <span class="comment">\/\/cv::SparseMat assoc(2, msizes, CV_8U);<\/span><\/div><div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;  <span class="comment">\/\/cv::SparseMat last_assoc(2, msizes, CV_8U);  <\/span><\/div><div class="line"><a name="l00656"><\/a><span class="lineno">  656<\/span>&#160;<span class="comment"><\/span>  <\/div><div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;  <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)descriptors.size() &lt;= <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>)<\/div><div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;  {<\/div><div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;    <span class="comment">\/\/ trivial case: one cluster per feature<\/span><\/div><div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;    groups.resize(descriptors.size());<\/div><div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;<\/div><div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; descriptors.size(); i++)<\/div><div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;    {<\/div><div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;      groups[i].push_back(i);<\/div><div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;      clusters.push_back(*descriptors[i]);<\/div><div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;    }<\/div><div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;  }<\/div><div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;  {<\/div><div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;    <span class="comment">\/\/ select clusters and groups with kmeans<\/span><\/div><div class="line"><a name="l00671"><\/a><span class="lineno">  671<\/span>&#160;    <\/div><div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;    <span class="keywordtype">bool<\/span> first_time = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;    <span class="keywordtype">bool<\/span> goon = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;    <\/div><div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;    <span class="comment">\/\/ to check if clusters move after iterations<\/span><\/div><div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;    std::vector&lt;int&gt; last_association, current_association;<\/div><div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;<\/div><div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;    <span class="keywordflow">while<\/span>(goon)<\/div><div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;    {<\/div><div class="line"><a name="l00680"><\/a><span class="lineno">  680<\/span>&#160;      <span class="comment">\/\/ 1. Calculate clusters<\/span><\/div><div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;<\/div><div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;            <span class="keywordflow">if<\/span>(first_time)<\/div><div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;            {<\/div><div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;        <span class="comment">\/\/ random sample <\/span><\/div><div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">initiateClusters<\/a>(descriptors, clusters);<\/div><div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;      }<\/div><div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00688"><\/a><span class="lineno">  688<\/span>&#160;      {<\/div><div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;        <span class="comment">\/\/ calculate cluster centres<\/span><\/div><div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;<\/div><div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;        <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> c = 0; c &lt; clusters.size(); ++c)<\/div><div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;        {<\/div><div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;          std::vector&lt;pDescriptor&gt; cluster_descriptors;<\/div><div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;          cluster_descriptors.reserve(groups[c].<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>());<\/div><div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;          <\/div><div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;          <span class="comment">\/*<\/span><\/div><div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;<span class="comment">          for(unsigned int d = 0; d &lt; descriptors.size(); ++d)<\/span><\/div><div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;<span class="comment">          {<\/span><\/div><div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;<span class="comment">            if( assoc.find&lt;unsigned char&gt;(c, d) )<\/span><\/div><div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;<span class="comment">            {<\/span><\/div><div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;<span class="comment">              cluster_descriptors.push_back(descriptors[d]);<\/span><\/div><div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;<span class="comment">            }<\/span><\/div><div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;<span class="comment">          }<\/span><\/div><div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;<span class="comment">          *\/<\/span><\/div><div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;          <\/div><div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;          std::vector&lt;unsigned int&gt;::const_iterator vit;<\/div><div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;          <span class="keywordflow">for<\/span>(vit = groups[c].begin(); vit != groups[c].end(); ++vit)<\/div><div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;          {<\/div><div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;            cluster_descriptors.push_back(descriptors[*vit]);<\/div><div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;          }<\/div><div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;          <\/div><div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;          <\/div><div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;          F::meanValue(cluster_descriptors, clusters[c]);<\/div><div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;        }<\/div><div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;        <\/div><div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;      } <span class="comment">\/\/ if(!first_time)<\/span><\/div><div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;<\/div><div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;      <span class="comment">\/\/ 2. Associate features with clusters<\/span><\/div><div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;<\/div><div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;      <span class="comment">\/\/ calculate distances to cluster centers<\/span><\/div><div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;      groups.clear();<\/div><div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;      groups.resize(clusters.size(), std::vector&lt;unsigned int&gt;());<\/div><div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;      current_association.resize(descriptors.size());<\/div><div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;<\/div><div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;      <span class="comment">\/\/assoc.clear();<\/span><\/div><div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;<\/div><div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;      <span class="keyword">typename<\/span> std::vector&lt;pDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l00728"><\/a><span class="lineno">  728<\/span>&#160;      <span class="comment">\/\/unsigned int d = 0;<\/span><\/div><div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;      <span class="keywordflow">for<\/span>(fit = descriptors.begin(); fit != descriptors.end(); ++fit)<span class="comment">\/\/, ++d)<\/span><\/div><div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;      {<\/div><div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;        <span class="keywordtype">double<\/span> best_dist = F::distance(*(*fit), clusters[0]);<\/div><div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> icluster = 0;<\/div><div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;        <\/div><div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;        <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> c = 1; c &lt; clusters.size(); ++c)<\/div><div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;        {<\/div><div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;          <span class="keywordtype">double<\/span> dist = F::distance(*(*fit), clusters[c]);<\/div><div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;          <span class="keywordflow">if<\/span>(dist &lt; best_dist)<\/div><div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;          {<\/div><div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;            best_dist = dist;<\/div><div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;            icluster = c;<\/div><div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;          }<\/div><div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;        }<\/div><div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;<\/div><div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;        <span class="comment">\/\/assoc.ref&lt;unsigned char&gt;(icluster, d) = 1;<\/span><\/div><div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;<\/div><div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;        groups[icluster].push_back(fit - descriptors.begin());<\/div><div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;        current_association[ fit - descriptors.begin() ] = icluster;<\/div><div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;      }<\/div><div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;      <\/div><div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;      <span class="comment">\/\/ kmeans++ ensures all the clusters has any feature associated with them<\/span><\/div><div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;<\/div><div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;      <span class="comment">\/\/ 3. check convergence<\/span><\/div><div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;      <span class="keywordflow">if<\/span>(first_time)<\/div><div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;      {<\/div><div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;        first_time = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;      }<\/div><div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;      {<\/div><div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;        <span class="comment">\/\/goon = !eqUChar(last_assoc, assoc);<\/span><\/div><div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;        <\/div><div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;        goon = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;        <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; current_association.size(); i++)<\/div><div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;        {<\/div><div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;          <span class="keywordflow">if<\/span>(current_association[i] != last_association[i]){<\/div><div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;            goon = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;            <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;          }<\/div><div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;        }<\/div><div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;      }<\/div><div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;<\/div><div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;            <span class="keywordflow">if<\/span>(goon)<\/div><div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;            {<\/div><div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;                <span class="comment">\/\/ copy last feature-cluster association<\/span><\/div><div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;                last_association = current_association;<\/div><div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;                <span class="comment">\/\/last_assoc = assoc.clone();<\/span><\/div><div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;            }<\/div><div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;            <\/div><div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;        } <span class="comment">\/\/ while(goon)<\/span><\/div><div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;    <\/div><div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;  } <span class="comment">\/\/ if must run kmeans<\/span><\/div><div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;  <\/div><div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;  <span class="comment">\/\/ create nodes<\/span><\/div><div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; clusters.size(); ++i)<\/div><div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;  {<\/div><div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span> = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.size();<\/div><div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.push_back(<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>(<span class="keywordtype">id<\/span>));<\/div><div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.back().descriptor = clusters[i];<\/div><div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.back().parent = parent_id;<\/div><div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[parent_id].children.push_back(<span class="keywordtype">id<\/span>);<\/div><div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;  }<\/div><div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;  <\/div><div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;  <span class="comment">\/\/ go on with the next level<\/span><\/div><div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;  <span class="keywordflow">if<\/span>(current_level &lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>)<\/div><div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;  {<\/div><div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;    <span class="comment">\/\/ iterate again with the resulting clusters<\/span><\/div><div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;NodeId&gt; &amp;children_ids = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[parent_id].children;<\/div><div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; clusters.size(); ++i)<\/div><div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;    {<\/div><div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span> = children_ids[i];<\/div><div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;<\/div><div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;      std::vector&lt;pDescriptor&gt; child_features;<\/div><div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;      child_features.reserve(groups[i].<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>());<\/div><div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;<\/div><div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;      std::vector&lt;unsigned int&gt;::const_iterator vit;<\/div><div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;      <span class="keywordflow">for<\/span>(vit = groups[i].begin(); vit != groups[i].end(); ++vit)<\/div><div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;      {<\/div><div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;        child_features.push_back(descriptors[*vit]);<\/div><div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;      }<\/div><div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;<\/div><div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;      <span class="keywordflow">if<\/span>(child_features.size() &gt; 1)<\/div><div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;      {<\/div><div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">HKmeansStep<\/a>(<span class="keywordtype">id<\/span>, child_features, current_level + 1);<\/div><div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;      }<\/div><div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;    }<\/div><div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;  }<\/div><div class="line"><a name="l00816"><\/a><span class="lineno">  816<\/span>&#160;}<\/div><div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;<\/div><div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;<\/div><div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">TemplatedVocabulary&lt;TDescriptor, F&gt;::initiateClusters<\/a><\/div><div class="line"><a name="l00822"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">  822<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;   std::vector&lt;TDescriptor&gt; &amp;clusters) <span class="keyword">const<\/span><\/div><div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;{<\/div><div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">initiateClustersKMpp<\/a>(descriptors, clusters);  <\/div><div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;}<\/div><div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;<\/div><div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;<\/div><div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00831"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">  831<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">TemplatedVocabulary&lt;TDescriptor,F&gt;::initiateClustersKMpp<\/a>(<\/div><div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;pfeatures,<\/div><div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;    std::vector&lt;TDescriptor&gt; &amp;clusters)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;  <span class="comment">\/\/ Implements kmeans++ seeding algorithm<\/span><\/div><div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;  <span class="comment">\/\/ Algorithm:<\/span><\/div><div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;  <span class="comment">\/\/ 1. Choose one center uniformly at random from among the data points.<\/span><\/div><div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;  <span class="comment">\/\/ 2. For each data point x, compute D(x), the distance between x and the nearest <\/span><\/div><div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;  <span class="comment">\/\/    center that has already been chosen.<\/span><\/div><div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;  <span class="comment">\/\/ 3. Add one new data point as a center. Each point x is chosen with probability <\/span><\/div><div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;  <span class="comment">\/\/    proportional to D(x)^2.<\/span><\/div><div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;  <span class="comment">\/\/ 4. Repeat Steps 2 and 3 until k centers have been chosen.<\/span><\/div><div class="line"><a name="l00843"><\/a><span class="lineno">  843<\/span>&#160;  <span class="comment">\/\/ 5. Now that the initial centers have been chosen, proceed using standard k-means <\/span><\/div><div class="line"><a name="l00844"><\/a><span class="lineno">  844<\/span>&#160;  <span class="comment">\/\/    clustering.<\/span><\/div><div class="line"><a name="l00845"><\/a><span class="lineno">  845<\/span>&#160;<\/div><div class="line"><a name="l00846"><\/a><span class="lineno">  846<\/span>&#160;  <a class="code" href="classDUtils_1_1Random.html#a91926937ff5c31ca4aa3948de8b4d788">DUtils::Random::SeedRandOnce<\/a>();<\/div><div class="line"><a name="l00847"><\/a><span class="lineno">  847<\/span>&#160;<\/div><div class="line"><a name="l00848"><\/a><span class="lineno">  848<\/span>&#160;  clusters.resize(0);<\/div><div class="line"><a name="l00849"><\/a><span class="lineno">  849<\/span>&#160;  clusters.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>);<\/div><div class="line"><a name="l00850"><\/a><span class="lineno">  850<\/span>&#160;  std::vector&lt;double&gt; min_dists(pfeatures.size(), std::numeric_limits&lt;double&gt;::max());<\/div><div class="line"><a name="l00851"><\/a><span class="lineno">  851<\/span>&#160;  <\/div><div class="line"><a name="l00852"><\/a><span class="lineno">  852<\/span>&#160;  <span class="comment">\/\/ 1.<\/span><\/div><div class="line"><a name="l00853"><\/a><span class="lineno">  853<\/span>&#160;  <\/div><div class="line"><a name="l00854"><\/a><span class="lineno">  854<\/span>&#160;  <span class="keywordtype">int<\/span> ifeature = <a class="code" href="classDUtils_1_1Random.html#a39e456a640b660d7ef06460822685dc3">DUtils::Random::RandomInt<\/a>(0, pfeatures.size()-1);<\/div><div class="line"><a name="l00855"><\/a><span class="lineno">  855<\/span>&#160;  <\/div><div class="line"><a name="l00856"><\/a><span class="lineno">  856<\/span>&#160;  <span class="comment">\/\/ create first cluster<\/span><\/div><div class="line"><a name="l00857"><\/a><span class="lineno">  857<\/span>&#160;  clusters.push_back(*pfeatures[ifeature]);<\/div><div class="line"><a name="l00858"><\/a><span class="lineno">  858<\/span>&#160;<\/div><div class="line"><a name="l00859"><\/a><span class="lineno">  859<\/span>&#160;  <span class="comment">\/\/ compute the initial distances<\/span><\/div><div class="line"><a name="l00860"><\/a><span class="lineno">  860<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;pDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l00861"><\/a><span class="lineno">  861<\/span>&#160;  std::vector&lt;double&gt;::iterator dit;<\/div><div class="line"><a name="l00862"><\/a><span class="lineno">  862<\/span>&#160;  dit = min_dists.begin();<\/div><div class="line"><a name="l00863"><\/a><span class="lineno">  863<\/span>&#160;  <span class="keywordflow">for<\/span>(fit = pfeatures.begin(); fit != pfeatures.end(); ++fit, ++dit)<\/div><div class="line"><a name="l00864"><\/a><span class="lineno">  864<\/span>&#160;  {<\/div><div class="line"><a name="l00865"><\/a><span class="lineno">  865<\/span>&#160;    *dit = F::distance(*(*fit), clusters.back());<\/div><div class="line"><a name="l00866"><\/a><span class="lineno">  866<\/span>&#160;  }  <\/div><div class="line"><a name="l00867"><\/a><span class="lineno">  867<\/span>&#160;<\/div><div class="line"><a name="l00868"><\/a><span class="lineno">  868<\/span>&#160;  <span class="keywordflow">while<\/span>((<span class="keywordtype">int<\/span>)clusters.size() &lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>)<\/div><div class="line"><a name="l00869"><\/a><span class="lineno">  869<\/span>&#160;  {<\/div><div class="line"><a name="l00870"><\/a><span class="lineno">  870<\/span>&#160;    <span class="comment">\/\/ 2.<\/span><\/div><div class="line"><a name="l00871"><\/a><span class="lineno">  871<\/span>&#160;    dit = min_dists.begin();<\/div><div class="line"><a name="l00872"><\/a><span class="lineno">  872<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = pfeatures.begin(); fit != pfeatures.end(); ++fit, ++dit)<\/div><div class="line"><a name="l00873"><\/a><span class="lineno">  873<\/span>&#160;    {<\/div><div class="line"><a name="l00874"><\/a><span class="lineno">  874<\/span>&#160;      <span class="keywordflow">if<\/span>(*dit &gt; 0)<\/div><div class="line"><a name="l00875"><\/a><span class="lineno">  875<\/span>&#160;      {<\/div><div class="line"><a name="l00876"><\/a><span class="lineno">  876<\/span>&#160;        <span class="keywordtype">double<\/span> dist = F::distance(*(*fit), clusters.back());<\/div><div class="line"><a name="l00877"><\/a><span class="lineno">  877<\/span>&#160;        <span class="keywordflow">if<\/span>(dist &lt; *dit) *dit = dist;<\/div><div class="line"><a name="l00878"><\/a><span class="lineno">  878<\/span>&#160;      }<\/div><div class="line"><a name="l00879"><\/a><span class="lineno">  879<\/span>&#160;    }<\/div><div class="line"><a name="l00880"><\/a><span class="lineno">  880<\/span>&#160;    <\/div><div class="line"><a name="l00881"><\/a><span class="lineno">  881<\/span>&#160;    <span class="comment">\/\/ 3.<\/span><\/div><div class="line"><a name="l00882"><\/a><span class="lineno">  882<\/span>&#160;    <span class="keywordtype">double<\/span> dist_sum = std::accumulate(min_dists.begin(), min_dists.end(), 0.0);<\/div><div class="line"><a name="l00883"><\/a><span class="lineno">  883<\/span>&#160;<\/div><div class="line"><a name="l00884"><\/a><span class="lineno">  884<\/span>&#160;    <span class="keywordflow">if<\/span>(dist_sum &gt; 0)<\/div><div class="line"><a name="l00885"><\/a><span class="lineno">  885<\/span>&#160;    {<\/div><div class="line"><a name="l00886"><\/a><span class="lineno">  886<\/span>&#160;      <span class="keywordtype">double<\/span> cut_d;<\/div><div class="line"><a name="l00887"><\/a><span class="lineno">  887<\/span>&#160;      <span class="keywordflow">do<\/span><\/div><div class="line"><a name="l00888"><\/a><span class="lineno">  888<\/span>&#160;      {<\/div><div class="line"><a name="l00889"><\/a><span class="lineno">  889<\/span>&#160;        cut_d = DUtils::Random::RandomValue&lt;double&gt;(0, dist_sum);<\/div><div class="line"><a name="l00890"><\/a><span class="lineno">  890<\/span>&#160;      } <span class="keywordflow">while<\/span>(cut_d == 0.0);<\/div><div class="line"><a name="l00891"><\/a><span class="lineno">  891<\/span>&#160;<\/div><div class="line"><a name="l00892"><\/a><span class="lineno">  892<\/span>&#160;      <span class="keywordtype">double<\/span> d_up_now = 0;<\/div><div class="line"><a name="l00893"><\/a><span class="lineno">  893<\/span>&#160;      <span class="keywordflow">for<\/span>(dit = min_dists.begin(); dit != min_dists.end(); ++dit)<\/div><div class="line"><a name="l00894"><\/a><span class="lineno">  894<\/span>&#160;      {<\/div><div class="line"><a name="l00895"><\/a><span class="lineno">  895<\/span>&#160;        d_up_now += *dit;<\/div><div class="line"><a name="l00896"><\/a><span class="lineno">  896<\/span>&#160;        <span class="keywordflow">if<\/span>(d_up_now &gt;= cut_d) <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00897"><\/a><span class="lineno">  897<\/span>&#160;      }<\/div><div class="line"><a name="l00898"><\/a><span class="lineno">  898<\/span>&#160;      <\/div><div class="line"><a name="l00899"><\/a><span class="lineno">  899<\/span>&#160;      <span class="keywordflow">if<\/span>(dit == min_dists.end()) <\/div><div class="line"><a name="l00900"><\/a><span class="lineno">  900<\/span>&#160;        ifeature = pfeatures.size()-1;<\/div><div class="line"><a name="l00901"><\/a><span class="lineno">  901<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00902"><\/a><span class="lineno">  902<\/span>&#160;        ifeature = dit - min_dists.begin();<\/div><div class="line"><a name="l00903"><\/a><span class="lineno">  903<\/span>&#160;      <\/div><div class="line"><a name="l00904"><\/a><span class="lineno">  904<\/span>&#160;      clusters.push_back(*pfeatures[ifeature]);<\/div><div class="line"><a name="l00905"><\/a><span class="lineno">  905<\/span>&#160;<\/div><div class="line"><a name="l00906"><\/a><span class="lineno">  906<\/span>&#160;    } <span class="comment">\/\/ if dist_sum &gt; 0<\/span><\/div><div class="line"><a name="l00907"><\/a><span class="lineno">  907<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00908"><\/a><span class="lineno">  908<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00909"><\/a><span class="lineno">  909<\/span>&#160;      <\/div><div class="line"><a name="l00910"><\/a><span class="lineno">  910<\/span>&#160;  } <span class="comment">\/\/ while(used_clusters &lt; m_k)<\/span><\/div><div class="line"><a name="l00911"><\/a><span class="lineno">  911<\/span>&#160;<\/div><div class="line"><a name="l00912"><\/a><span class="lineno">  912<\/span>&#160;}<\/div><div class="line"><a name="l00913"><\/a><span class="lineno">  913<\/span>&#160;<\/div><div class="line"><a name="l00914"><\/a><span class="lineno">  914<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00915"><\/a><span class="lineno">  915<\/span>&#160;<\/div><div class="line"><a name="l00916"><\/a><span class="lineno">  916<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00917"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">  917<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">TemplatedVocabulary&lt;TDescriptor,F&gt;::createWords<\/a>()<\/div><div class="line"><a name="l00918"><\/a><span class="lineno">  918<\/span>&#160;{<\/div><div class="line"><a name="l00919"><\/a><span class="lineno">  919<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.resize(0);<\/div><div class="line"><a name="l00920"><\/a><span class="lineno">  920<\/span>&#160;  <\/div><div class="line"><a name="l00921"><\/a><span class="lineno">  921<\/span>&#160;  <span class="keywordflow">if<\/span>(!<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.empty())<\/div><div class="line"><a name="l00922"><\/a><span class="lineno">  922<\/span>&#160;  {<\/div><div class="line"><a name="l00923"><\/a><span class="lineno">  923<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.reserve( (<span class="keywordtype">int<\/span>)pow((<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>, (<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>) );<\/div><div class="line"><a name="l00924"><\/a><span class="lineno">  924<\/span>&#160;<\/div><div class="line"><a name="l00925"><\/a><span class="lineno">  925<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;Node&gt;::iterator nit;<\/div><div class="line"><a name="l00926"><\/a><span class="lineno">  926<\/span>&#160;    <\/div><div class="line"><a name="l00927"><\/a><span class="lineno">  927<\/span>&#160;    nit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.begin(); <span class="comment">\/\/ ignore root<\/span><\/div><div class="line"><a name="l00928"><\/a><span class="lineno">  928<\/span>&#160;    <span class="keywordflow">for<\/span>(++nit; nit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.end(); ++nit)<\/div><div class="line"><a name="l00929"><\/a><span class="lineno">  929<\/span>&#160;    {<\/div><div class="line"><a name="l00930"><\/a><span class="lineno">  930<\/span>&#160;      <span class="keywordflow">if<\/span>(nit-&gt;isLeaf())<\/div><div class="line"><a name="l00931"><\/a><span class="lineno">  931<\/span>&#160;      {<\/div><div class="line"><a name="l00932"><\/a><span class="lineno">  932<\/span>&#160;        nit-&gt;word_id = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size();<\/div><div class="line"><a name="l00933"><\/a><span class="lineno">  933<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.push_back( &amp;(*nit) );<\/div><div class="line"><a name="l00934"><\/a><span class="lineno">  934<\/span>&#160;      }<\/div><div class="line"><a name="l00935"><\/a><span class="lineno">  935<\/span>&#160;    }<\/div><div class="line"><a name="l00936"><\/a><span class="lineno">  936<\/span>&#160;  }<\/div><div class="line"><a name="l00937"><\/a><span class="lineno">  937<\/span>&#160;}<\/div><div class="line"><a name="l00938"><\/a><span class="lineno">  938<\/span>&#160;<\/div><div class="line"><a name="l00939"><\/a><span class="lineno">  939<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00940"><\/a><span class="lineno">  940<\/span>&#160;<\/div><div class="line"><a name="l00941"><\/a><span class="lineno">  941<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00942"><\/a><span class="lineno">  942<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">TemplatedVocabulary&lt;TDescriptor,F&gt;::setNodeWeights<\/a><\/div><div class="line"><a name="l00943"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">  943<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features)<\/div><div class="line"><a name="l00944"><\/a><span class="lineno">  944<\/span>&#160;{<\/div><div class="line"><a name="l00945"><\/a><span class="lineno">  945<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> NWords = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size();<\/div><div class="line"><a name="l00946"><\/a><span class="lineno">  946<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> NDocs = training_features.size();<\/div><div class="line"><a name="l00947"><\/a><span class="lineno">  947<\/span>&#160;<\/div><div class="line"><a name="l00948"><\/a><span class="lineno">  948<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == BINARY)<\/div><div class="line"><a name="l00949"><\/a><span class="lineno">  949<\/span>&#160;  {<\/div><div class="line"><a name="l00950"><\/a><span class="lineno">  950<\/span>&#160;    <span class="comment">\/\/ idf part must be 1 always<\/span><\/div><div class="line"><a name="l00951"><\/a><span class="lineno">  951<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; NWords; i++)<\/div><div class="line"><a name="l00952"><\/a><span class="lineno">  952<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[i]-&gt;weight = 1;<\/div><div class="line"><a name="l00953"><\/a><span class="lineno">  953<\/span>&#160;  }<\/div><div class="line"><a name="l00954"><\/a><span class="lineno">  954<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == IDF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF_IDF)<\/div><div class="line"><a name="l00955"><\/a><span class="lineno">  955<\/span>&#160;  {<\/div><div class="line"><a name="l00956"><\/a><span class="lineno">  956<\/span>&#160;    <span class="comment">\/\/ IDF and TF-IDF: we calculte the idf path now<\/span><\/div><div class="line"><a name="l00957"><\/a><span class="lineno">  957<\/span>&#160;<\/div><div class="line"><a name="l00958"><\/a><span class="lineno">  958<\/span>&#160;    <span class="comment">\/\/ Note: this actually calculates the idf part of the tf-idf score.<\/span><\/div><div class="line"><a name="l00959"><\/a><span class="lineno">  959<\/span>&#160;    <span class="comment">\/\/ The complete tf-idf score is calculated in ::transform<\/span><\/div><div class="line"><a name="l00960"><\/a><span class="lineno">  960<\/span>&#160;<\/div><div class="line"><a name="l00961"><\/a><span class="lineno">  961<\/span>&#160;    std::vector&lt;unsigned int&gt; Ni(NWords, 0);<\/div><div class="line"><a name="l00962"><\/a><span class="lineno">  962<\/span>&#160;    std::vector&lt;bool&gt; counted(NWords, <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00963"><\/a><span class="lineno">  963<\/span>&#160;    <\/div><div class="line"><a name="l00964"><\/a><span class="lineno">  964<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt;::const_iterator mit;<\/div><div class="line"><a name="l00965"><\/a><span class="lineno">  965<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l00966"><\/a><span class="lineno">  966<\/span>&#160;<\/div><div class="line"><a name="l00967"><\/a><span class="lineno">  967<\/span>&#160;    <span class="keywordflow">for<\/span>(mit = training_features.begin(); mit != training_features.end(); ++mit)<\/div><div class="line"><a name="l00968"><\/a><span class="lineno">  968<\/span>&#160;    {<\/div><div class="line"><a name="l00969"><\/a><span class="lineno">  969<\/span>&#160;      fill(counted.begin(), counted.end(), <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00970"><\/a><span class="lineno">  970<\/span>&#160;<\/div><div class="line"><a name="l00971"><\/a><span class="lineno">  971<\/span>&#160;      <span class="keywordflow">for<\/span>(fit = mit-&gt;begin(); fit &lt; mit-&gt;end(); ++fit)<\/div><div class="line"><a name="l00972"><\/a><span class="lineno">  972<\/span>&#160;      {<\/div><div class="line"><a name="l00973"><\/a><span class="lineno">  973<\/span>&#160;        <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id;<\/div><div class="line"><a name="l00974"><\/a><span class="lineno">  974<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, word_id);<\/div><div class="line"><a name="l00975"><\/a><span class="lineno">  975<\/span>&#160;<\/div><div class="line"><a name="l00976"><\/a><span class="lineno">  976<\/span>&#160;        <span class="keywordflow">if<\/span>(!counted[word_id])<\/div><div class="line"><a name="l00977"><\/a><span class="lineno">  977<\/span>&#160;        {<\/div><div class="line"><a name="l00978"><\/a><span class="lineno">  978<\/span>&#160;          Ni[word_id]++;<\/div><div class="line"><a name="l00979"><\/a><span class="lineno">  979<\/span>&#160;          counted[word_id] = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00980"><\/a><span class="lineno">  980<\/span>&#160;        }<\/div><div class="line"><a name="l00981"><\/a><span class="lineno">  981<\/span>&#160;      }<\/div><div class="line"><a name="l00982"><\/a><span class="lineno">  982<\/span>&#160;    }<\/div><div class="line"><a name="l00983"><\/a><span class="lineno">  983<\/span>&#160;<\/div><div class="line"><a name="l00984"><\/a><span class="lineno">  984<\/span>&#160;    <span class="comment">\/\/ set ln(N\/Ni)<\/span><\/div><div class="line"><a name="l00985"><\/a><span class="lineno">  985<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; NWords; i++)<\/div><div class="line"><a name="l00986"><\/a><span class="lineno">  986<\/span>&#160;    {<\/div><div class="line"><a name="l00987"><\/a><span class="lineno">  987<\/span>&#160;      <span class="keywordflow">if<\/span>(Ni[i] &gt; 0)<\/div><div class="line"><a name="l00988"><\/a><span class="lineno">  988<\/span>&#160;      {<\/div><div class="line"><a name="l00989"><\/a><span class="lineno">  989<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[i]-&gt;weight = log((<span class="keywordtype">double<\/span>)NDocs \/ (<span class="keywordtype">double<\/span>)Ni[i]);<\/div><div class="line"><a name="l00990"><\/a><span class="lineno">  990<\/span>&#160;      }<span class="comment">\/\/ else \/\/ This cannot occur if using kmeans++<\/span><\/div><div class="line"><a name="l00991"><\/a><span class="lineno">  991<\/span>&#160;    }<\/div><div class="line"><a name="l00992"><\/a><span class="lineno">  992<\/span>&#160;  <\/div><div class="line"><a name="l00993"><\/a><span class="lineno">  993<\/span>&#160;  }<\/div><div class="line"><a name="l00994"><\/a><span class="lineno">  994<\/span>&#160;<\/div><div class="line"><a name="l00995"><\/a><span class="lineno">  995<\/span>&#160;}<\/div><div class="line"><a name="l00996"><\/a><span class="lineno">  996<\/span>&#160;<\/div><div class="line"><a name="l00997"><\/a><span class="lineno">  997<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00998"><\/a><span class="lineno">  998<\/span>&#160;<\/div><div class="line"><a name="l00999"><\/a><span class="lineno">  999<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01000"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0"> 1000<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">TemplatedVocabulary&lt;TDescriptor,F&gt;::size<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01001"><\/a><span class="lineno"> 1001<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01002"><\/a><span class="lineno"> 1002<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size();<\/div><div class="line"><a name="l01003"><\/a><span class="lineno"> 1003<\/span>&#160;}<\/div><div class="line"><a name="l01004"><\/a><span class="lineno"> 1004<\/span>&#160;<\/div><div class="line"><a name="l01005"><\/a><span class="lineno"> 1005<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01006"><\/a><span class="lineno"> 1006<\/span>&#160;<\/div><div class="line"><a name="l01007"><\/a><span class="lineno"> 1007<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01008"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1"> 1008<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">TemplatedVocabulary&lt;TDescriptor,F&gt;::empty<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01009"><\/a><span class="lineno"> 1009<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01010"><\/a><span class="lineno"> 1010<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.empty();<\/div><div class="line"><a name="l01011"><\/a><span class="lineno"> 1011<\/span>&#160;}<\/div><div class="line"><a name="l01012"><\/a><span class="lineno"> 1012<\/span>&#160;<\/div><div class="line"><a name="l01013"><\/a><span class="lineno"> 1013<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01014"><\/a><span class="lineno"> 1014<\/span>&#160;<\/div><div class="line"><a name="l01015"><\/a><span class="lineno"> 1015<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01016"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#acee6fb9313d844fbcf05f470379c6dc3"> 1016<\/a><\/span>&#160;<span class="keywordtype">float<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#acee6fb9313d844fbcf05f470379c6dc3">TemplatedVocabulary&lt;TDescriptor,F&gt;::getEffectiveLevels<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01017"><\/a><span class="lineno"> 1017<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01018"><\/a><span class="lineno"> 1018<\/span>&#160;  <span class="keywordtype">long<\/span> sum = 0;<\/div><div class="line"><a name="l01019"><\/a><span class="lineno"> 1019<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;Node*&gt;::const_iterator wit;<\/div><div class="line"><a name="l01020"><\/a><span class="lineno"> 1020<\/span>&#160;  <span class="keywordflow">for<\/span>(wit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin(); wit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.end(); ++wit)<\/div><div class="line"><a name="l01021"><\/a><span class="lineno"> 1021<\/span>&#160;  {<\/div><div class="line"><a name="l01022"><\/a><span class="lineno"> 1022<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a> *p = *wit;<\/div><div class="line"><a name="l01023"><\/a><span class="lineno"> 1023<\/span>&#160;    <\/div><div class="line"><a name="l01024"><\/a><span class="lineno"> 1024<\/span>&#160;    <span class="keywordflow">for<\/span>(; p-&gt;<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">id<\/a> != 0; sum++) p = &amp;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[p-&gt;<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a082fba9dcf272b78354ffd5b1d58f5fa">parent<\/a>];<\/div><div class="line"><a name="l01025"><\/a><span class="lineno"> 1025<\/span>&#160;  }<\/div><div class="line"><a name="l01026"><\/a><span class="lineno"> 1026<\/span>&#160;  <\/div><div class="line"><a name="l01027"><\/a><span class="lineno"> 1027<\/span>&#160;  <span class="keywordflow">return<\/span> (<span class="keywordtype">float<\/span>)((double)sum \/ (<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size());<\/div><div class="line"><a name="l01028"><\/a><span class="lineno"> 1028<\/span>&#160;}<\/div><div class="line"><a name="l01029"><\/a><span class="lineno"> 1029<\/span>&#160;<\/div><div class="line"><a name="l01030"><\/a><span class="lineno"> 1030<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01031"><\/a><span class="lineno"> 1031<\/span>&#160;<\/div><div class="line"><a name="l01032"><\/a><span class="lineno"> 1032<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01033"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aed50a053fac7e270bf8369a8667cf2c6"> 1033<\/a><\/span>&#160;TDescriptor <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aed50a053fac7e270bf8369a8667cf2c6">TemplatedVocabulary&lt;TDescriptor,F&gt;::getWord<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01034"><\/a><span class="lineno"> 1034<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01035"><\/a><span class="lineno"> 1035<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid]-&gt;descriptor;<\/div><div class="line"><a name="l01036"><\/a><span class="lineno"> 1036<\/span>&#160;}<\/div><div class="line"><a name="l01037"><\/a><span class="lineno"> 1037<\/span>&#160;<\/div><div class="line"><a name="l01038"><\/a><span class="lineno"> 1038<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01039"><\/a><span class="lineno"> 1039<\/span>&#160;<\/div><div class="line"><a name="l01040"><\/a><span class="lineno"> 1040<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01041"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a95edc3ffa594ac7a798aec0808997b4a"> 1041<\/a><\/span>&#160;<a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a95edc3ffa594ac7a798aec0808997b4a">TemplatedVocabulary&lt;TDescriptor, F&gt;::getWordWeight<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01042"><\/a><span class="lineno"> 1042<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01043"><\/a><span class="lineno"> 1043<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid]-&gt;weight;<\/div><div class="line"><a name="l01044"><\/a><span class="lineno"> 1044<\/span>&#160;}<\/div><div class="line"><a name="l01045"><\/a><span class="lineno"> 1045<\/span>&#160;<\/div><div class="line"><a name="l01046"><\/a><span class="lineno"> 1046<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01047"><\/a><span class="lineno"> 1047<\/span>&#160;<\/div><div class="line"><a name="l01048"><\/a><span class="lineno"> 1048<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01049"><\/a><span class="lineno"> 1049<\/span>&#160;<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor, F&gt;::transform<\/a><\/div><div class="line"><a name="l01050"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a7bdb12ed8de8e2da937dd0c6de96a53a"> 1050<\/a><\/span>&#160;  (<span class="keyword">const<\/span> TDescriptor&amp; feature) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01051"><\/a><span class="lineno"> 1051<\/span>&#160;{<\/div><div class="line"><a name="l01052"><\/a><span class="lineno"> 1052<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>())<\/div><div class="line"><a name="l01053"><\/a><span class="lineno"> 1053<\/span>&#160;  {<\/div><div class="line"><a name="l01054"><\/a><span class="lineno"> 1054<\/span>&#160;    <span class="keywordflow">return<\/span> 0;<\/div><div class="line"><a name="l01055"><\/a><span class="lineno"> 1055<\/span>&#160;  }<\/div><div class="line"><a name="l01056"><\/a><span class="lineno"> 1056<\/span>&#160;  <\/div><div class="line"><a name="l01057"><\/a><span class="lineno"> 1057<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid;<\/div><div class="line"><a name="l01058"><\/a><span class="lineno"> 1058<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(feature, wid);<\/div><div class="line"><a name="l01059"><\/a><span class="lineno"> 1059<\/span>&#160;  <span class="keywordflow">return<\/span> wid;<\/div><div class="line"><a name="l01060"><\/a><span class="lineno"> 1060<\/span>&#160;}<\/div><div class="line"><a name="l01061"><\/a><span class="lineno"> 1061<\/span>&#160;<\/div><div class="line"><a name="l01062"><\/a><span class="lineno"> 1062<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01063"><\/a><span class="lineno"> 1063<\/span>&#160;<\/div><div class="line"><a name="l01064"><\/a><span class="lineno"> 1064<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01065"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d"> 1065<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a>(<\/div><div class="line"><a name="l01066"><\/a><span class="lineno"> 1066<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features, <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01067"><\/a><span class="lineno"> 1067<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01068"><\/a><span class="lineno"> 1068<\/span>&#160;  v.clear();<\/div><div class="line"><a name="l01069"><\/a><span class="lineno"> 1069<\/span>&#160;  <\/div><div class="line"><a name="l01070"><\/a><span class="lineno"> 1070<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>())<\/div><div class="line"><a name="l01071"><\/a><span class="lineno"> 1071<\/span>&#160;  {<\/div><div class="line"><a name="l01072"><\/a><span class="lineno"> 1072<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l01073"><\/a><span class="lineno"> 1073<\/span>&#160;  }<\/div><div class="line"><a name="l01074"><\/a><span class="lineno"> 1074<\/span>&#160;<\/div><div class="line"><a name="l01075"><\/a><span class="lineno"> 1075<\/span>&#160;  <span class="comment">\/\/ normalize <\/span><\/div><div class="line"><a name="l01076"><\/a><span class="lineno"> 1076<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> norm;<\/div><div class="line"><a name="l01077"><\/a><span class="lineno"> 1077<\/span>&#160;  <span class="keywordtype">bool<\/span> must = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>-&gt;<a class="code" href="classDBoW2_1_1GeneralScoring.html#ab0cadafd50b0f2f559f6325a6944f72f">mustNormalize<\/a>(norm);<\/div><div class="line"><a name="l01078"><\/a><span class="lineno"> 1078<\/span>&#160;<\/div><div class="line"><a name="l01079"><\/a><span class="lineno"> 1079<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l01080"><\/a><span class="lineno"> 1080<\/span>&#160;<\/div><div class="line"><a name="l01081"><\/a><span class="lineno"> 1081<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF_IDF)<\/div><div class="line"><a name="l01082"><\/a><span class="lineno"> 1082<\/span>&#160;  {<\/div><div class="line"><a name="l01083"><\/a><span class="lineno"> 1083<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit)<\/div><div class="line"><a name="l01084"><\/a><span class="lineno"> 1084<\/span>&#160;    {<\/div><div class="line"><a name="l01085"><\/a><span class="lineno"> 1085<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01086"><\/a><span class="lineno"> 1086<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w; <\/div><div class="line"><a name="l01087"><\/a><span class="lineno"> 1087<\/span>&#160;      <span class="comment">\/\/ w is the idf value if TF_IDF, 1 if TF<\/span><\/div><div class="line"><a name="l01088"><\/a><span class="lineno"> 1088<\/span>&#160;      <\/div><div class="line"><a name="l01089"><\/a><span class="lineno"> 1089<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01090"><\/a><span class="lineno"> 1090<\/span>&#160;      <\/div><div class="line"><a name="l01091"><\/a><span class="lineno"> 1091<\/span>&#160;      <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01092"><\/a><span class="lineno"> 1092<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) v.<a class="code" href="classDBoW2_1_1BowVector.html#a3ac92a805b252c93dc6535240d02df47">addWeight<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01093"><\/a><span class="lineno"> 1093<\/span>&#160;    }<\/div><div class="line"><a name="l01094"><\/a><span class="lineno"> 1094<\/span>&#160;    <\/div><div class="line"><a name="l01095"><\/a><span class="lineno"> 1095<\/span>&#160;    <span class="keywordflow">if<\/span>(!v.empty() &amp;&amp; !must)<\/div><div class="line"><a name="l01096"><\/a><span class="lineno"> 1096<\/span>&#160;    {<\/div><div class="line"><a name="l01097"><\/a><span class="lineno"> 1097<\/span>&#160;      <span class="comment">\/\/ unnecessary when normalizing<\/span><\/div><div class="line"><a name="l01098"><\/a><span class="lineno"> 1098<\/span>&#160;      <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> nd = v.size();<\/div><div class="line"><a name="l01099"><\/a><span class="lineno"> 1099<\/span>&#160;      <span class="keywordflow">for<\/span>(BowVector::iterator vit = v.begin(); vit != v.end(); vit++) <\/div><div class="line"><a name="l01100"><\/a><span class="lineno"> 1100<\/span>&#160;        vit-&gt;second \/= nd;<\/div><div class="line"><a name="l01101"><\/a><span class="lineno"> 1101<\/span>&#160;    }<\/div><div class="line"><a name="l01102"><\/a><span class="lineno"> 1102<\/span>&#160;    <\/div><div class="line"><a name="l01103"><\/a><span class="lineno"> 1103<\/span>&#160;  }<\/div><div class="line"><a name="l01104"><\/a><span class="lineno"> 1104<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="comment">\/\/ IDF || BINARY<\/span><\/div><div class="line"><a name="l01105"><\/a><span class="lineno"> 1105<\/span>&#160;  {<\/div><div class="line"><a name="l01106"><\/a><span class="lineno"> 1106<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit)<\/div><div class="line"><a name="l01107"><\/a><span class="lineno"> 1107<\/span>&#160;    {<\/div><div class="line"><a name="l01108"><\/a><span class="lineno"> 1108<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01109"><\/a><span class="lineno"> 1109<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w;<\/div><div class="line"><a name="l01110"><\/a><span class="lineno"> 1110<\/span>&#160;      <span class="comment">\/\/ w is idf if IDF, or 1 if BINARY<\/span><\/div><div class="line"><a name="l01111"><\/a><span class="lineno"> 1111<\/span>&#160;      <\/div><div class="line"><a name="l01112"><\/a><span class="lineno"> 1112<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01113"><\/a><span class="lineno"> 1113<\/span>&#160;      <\/div><div class="line"><a name="l01114"><\/a><span class="lineno"> 1114<\/span>&#160;      <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01115"><\/a><span class="lineno"> 1115<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) v.<a class="code" href="classDBoW2_1_1BowVector.html#a5ddf10e444d10425e5bd3568dc7ffe5e">addIfNotExist<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01116"><\/a><span class="lineno"> 1116<\/span>&#160;      <\/div><div class="line"><a name="l01117"><\/a><span class="lineno"> 1117<\/span>&#160;    } <span class="comment">\/\/ if add_features<\/span><\/div><div class="line"><a name="l01118"><\/a><span class="lineno"> 1118<\/span>&#160;  } <span class="comment">\/\/ if m_weighting == ...<\/span><\/div><div class="line"><a name="l01119"><\/a><span class="lineno"> 1119<\/span>&#160;  <\/div><div class="line"><a name="l01120"><\/a><span class="lineno"> 1120<\/span>&#160;  <span class="keywordflow">if<\/span>(must) v.<a class="code" href="classDBoW2_1_1BowVector.html#acd2dd34023e3053a4cc75d70c8b6ac13">normalize<\/a>(norm);<\/div><div class="line"><a name="l01121"><\/a><span class="lineno"> 1121<\/span>&#160;}<\/div><div class="line"><a name="l01122"><\/a><span class="lineno"> 1122<\/span>&#160;<\/div><div class="line"><a name="l01123"><\/a><span class="lineno"> 1123<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01124"><\/a><span class="lineno"> 1124<\/span>&#160;<\/div><div class="line"><a name="l01125"><\/a><span class="lineno"> 1125<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l01126"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#acae97a5b78d9850a627d45cb05969041"> 1126<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a>(<\/div><div class="line"><a name="l01127"><\/a><span class="lineno"> 1127<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features,<\/div><div class="line"><a name="l01128"><\/a><span class="lineno"> 1128<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fv, <span class="keywordtype">int<\/span> levelsup)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01129"><\/a><span class="lineno"> 1129<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01130"><\/a><span class="lineno"> 1130<\/span>&#160;  v.clear();<\/div><div class="line"><a name="l01131"><\/a><span class="lineno"> 1131<\/span>&#160;  fv.clear();<\/div><div class="line"><a name="l01132"><\/a><span class="lineno"> 1132<\/span>&#160;  <\/div><div class="line"><a name="l01133"><\/a><span class="lineno"> 1133<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>()) <span class="comment">\/\/ safe for subclasses<\/span><\/div><div class="line"><a name="l01134"><\/a><span class="lineno"> 1134<\/span>&#160;  {<\/div><div class="line"><a name="l01135"><\/a><span class="lineno"> 1135<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l01136"><\/a><span class="lineno"> 1136<\/span>&#160;  }<\/div><div class="line"><a name="l01137"><\/a><span class="lineno"> 1137<\/span>&#160;  <\/div><div class="line"><a name="l01138"><\/a><span class="lineno"> 1138<\/span>&#160;  <span class="comment">\/\/ normalize <\/span><\/div><div class="line"><a name="l01139"><\/a><span class="lineno"> 1139<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> norm;<\/div><div class="line"><a name="l01140"><\/a><span class="lineno"> 1140<\/span>&#160;  <span class="keywordtype">bool<\/span> must = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>-&gt;<a class="code" href="classDBoW2_1_1GeneralScoring.html#ab0cadafd50b0f2f559f6325a6944f72f">mustNormalize<\/a>(norm);<\/div><div class="line"><a name="l01141"><\/a><span class="lineno"> 1141<\/span>&#160;  <\/div><div class="line"><a name="l01142"><\/a><span class="lineno"> 1142<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l01143"><\/a><span class="lineno"> 1143<\/span>&#160;  <\/div><div class="line"><a name="l01144"><\/a><span class="lineno"> 1144<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF_IDF)<\/div><div class="line"><a name="l01145"><\/a><span class="lineno"> 1145<\/span>&#160;  {<\/div><div class="line"><a name="l01146"><\/a><span class="lineno"> 1146<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_feature = 0;<\/div><div class="line"><a name="l01147"><\/a><span class="lineno"> 1147<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit, ++i_feature)<\/div><div class="line"><a name="l01148"><\/a><span class="lineno"> 1148<\/span>&#160;    {<\/div><div class="line"><a name="l01149"><\/a><span class="lineno"> 1149<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01150"><\/a><span class="lineno"> 1150<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid;<\/div><div class="line"><a name="l01151"><\/a><span class="lineno"> 1151<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w; <\/div><div class="line"><a name="l01152"><\/a><span class="lineno"> 1152<\/span>&#160;      <span class="comment">\/\/ w is the idf value if TF_IDF, 1 if TF<\/span><\/div><div class="line"><a name="l01153"><\/a><span class="lineno"> 1153<\/span>&#160;      <\/div><div class="line"><a name="l01154"><\/a><span class="lineno"> 1154<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w, &amp;nid, levelsup);<\/div><div class="line"><a name="l01155"><\/a><span class="lineno"> 1155<\/span>&#160;      <\/div><div class="line"><a name="l01156"><\/a><span class="lineno"> 1156<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01157"><\/a><span class="lineno"> 1157<\/span>&#160;      { <\/div><div class="line"><a name="l01158"><\/a><span class="lineno"> 1158<\/span>&#160;        v.<a class="code" href="classDBoW2_1_1BowVector.html#a3ac92a805b252c93dc6535240d02df47">addWeight<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01159"><\/a><span class="lineno"> 1159<\/span>&#160;        fv.<a class="code" href="classDBoW2_1_1FeatureVector.html#ae9554bfcbebc85439616de08f47f2238">addFeature<\/a>(nid, i_feature);<\/div><div class="line"><a name="l01160"><\/a><span class="lineno"> 1160<\/span>&#160;      }<\/div><div class="line"><a name="l01161"><\/a><span class="lineno"> 1161<\/span>&#160;    }<\/div><div class="line"><a name="l01162"><\/a><span class="lineno"> 1162<\/span>&#160;    <\/div><div class="line"><a name="l01163"><\/a><span class="lineno"> 1163<\/span>&#160;    <span class="keywordflow">if<\/span>(!v.empty() &amp;&amp; !must)<\/div><div class="line"><a name="l01164"><\/a><span class="lineno"> 1164<\/span>&#160;    {<\/div><div class="line"><a name="l01165"><\/a><span class="lineno"> 1165<\/span>&#160;      <span class="comment">\/\/ unnecessary when normalizing<\/span><\/div><div class="line"><a name="l01166"><\/a><span class="lineno"> 1166<\/span>&#160;      <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> nd = v.size();<\/div><div class="line"><a name="l01167"><\/a><span class="lineno"> 1167<\/span>&#160;      <span class="keywordflow">for<\/span>(BowVector::iterator vit = v.begin(); vit != v.end(); vit++) <\/div><div class="line"><a name="l01168"><\/a><span class="lineno"> 1168<\/span>&#160;        vit-&gt;second \/= nd;<\/div><div class="line"><a name="l01169"><\/a><span class="lineno"> 1169<\/span>&#160;    }<\/div><div class="line"><a name="l01170"><\/a><span class="lineno"> 1170<\/span>&#160;  <\/div><div class="line"><a name="l01171"><\/a><span class="lineno"> 1171<\/span>&#160;  }<\/div><div class="line"><a name="l01172"><\/a><span class="lineno"> 1172<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="comment">\/\/ IDF || BINARY<\/span><\/div><div class="line"><a name="l01173"><\/a><span class="lineno"> 1173<\/span>&#160;  {<\/div><div class="line"><a name="l01174"><\/a><span class="lineno"> 1174<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_feature = 0;<\/div><div class="line"><a name="l01175"><\/a><span class="lineno"> 1175<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit, ++i_feature)<\/div><div class="line"><a name="l01176"><\/a><span class="lineno"> 1176<\/span>&#160;    {<\/div><div class="line"><a name="l01177"><\/a><span class="lineno"> 1177<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01178"><\/a><span class="lineno"> 1178<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid;<\/div><div class="line"><a name="l01179"><\/a><span class="lineno"> 1179<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w;<\/div><div class="line"><a name="l01180"><\/a><span class="lineno"> 1180<\/span>&#160;      <span class="comment">\/\/ w is idf if IDF, or 1 if BINARY<\/span><\/div><div class="line"><a name="l01181"><\/a><span class="lineno"> 1181<\/span>&#160;      <\/div><div class="line"><a name="l01182"><\/a><span class="lineno"> 1182<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w, &amp;nid, levelsup);<\/div><div class="line"><a name="l01183"><\/a><span class="lineno"> 1183<\/span>&#160;      <\/div><div class="line"><a name="l01184"><\/a><span class="lineno"> 1184<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01185"><\/a><span class="lineno"> 1185<\/span>&#160;      {<\/div><div class="line"><a name="l01186"><\/a><span class="lineno"> 1186<\/span>&#160;        v.<a class="code" href="classDBoW2_1_1BowVector.html#a5ddf10e444d10425e5bd3568dc7ffe5e">addIfNotExist<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01187"><\/a><span class="lineno"> 1187<\/span>&#160;        fv.<a class="code" href="classDBoW2_1_1FeatureVector.html#ae9554bfcbebc85439616de08f47f2238">addFeature<\/a>(nid, i_feature);<\/div><div class="line"><a name="l01188"><\/a><span class="lineno"> 1188<\/span>&#160;      }<\/div><div class="line"><a name="l01189"><\/a><span class="lineno"> 1189<\/span>&#160;    }<\/div><div class="line"><a name="l01190"><\/a><span class="lineno"> 1190<\/span>&#160;  } <span class="comment">\/\/ if m_weighting == ...<\/span><\/div><div class="line"><a name="l01191"><\/a><span class="lineno"> 1191<\/span>&#160;  <\/div><div class="line"><a name="l01192"><\/a><span class="lineno"> 1192<\/span>&#160;  <span class="keywordflow">if<\/span>(must) v.<a class="code" href="classDBoW2_1_1BowVector.html#acd2dd34023e3053a4cc75d70c8b6ac13">normalize<\/a>(norm);<\/div><div class="line"><a name="l01193"><\/a><span class="lineno"> 1193<\/span>&#160;}<\/div><div class="line"><a name="l01194"><\/a><span class="lineno"> 1194<\/span>&#160;<\/div><div class="line"><a name="l01195"><\/a><span class="lineno"> 1195<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01196"><\/a><span class="lineno"> 1196<\/span>&#160;<\/div><div class="line"><a name="l01197"><\/a><span class="lineno"> 1197<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l01198"><\/a><span class="lineno"> 1198<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9">TemplatedVocabulary&lt;TDescriptor,F&gt;::score<\/a><\/div><div class="line"><a name="l01199"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9"> 1199<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v1, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v2) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01200"><\/a><span class="lineno"> 1200<\/span>&#160;{<\/div><div class="line"><a name="l01201"><\/a><span class="lineno"> 1201<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>-&gt;<a class="code" href="classDBoW2_1_1GeneralScoring.html#a43b3f5fedb19e6a19e17b9813efd17e8">score<\/a>(v1, v2);<\/div><div class="line"><a name="l01202"><\/a><span class="lineno"> 1202<\/span>&#160;}<\/div><div class="line"><a name="l01203"><\/a><span class="lineno"> 1203<\/span>&#160;<\/div><div class="line"><a name="l01204"><\/a><span class="lineno"> 1204<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01205"><\/a><span class="lineno"> 1205<\/span>&#160;<\/div><div class="line"><a name="l01206"><\/a><span class="lineno"> 1206<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01207"><\/a><span class="lineno"> 1207<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a><\/div><div class="line"><a name="l01208"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a4369ffc35f61467b0987a89fcc5a7224"> 1208<\/a><\/span>&#160;  (<span class="keyword">const<\/span> TDescriptor &amp;feature, <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;<span class="keywordtype">id<\/span>) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01209"><\/a><span class="lineno"> 1209<\/span>&#160;{<\/div><div class="line"><a name="l01210"><\/a><span class="lineno"> 1210<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> weight;<\/div><div class="line"><a name="l01211"><\/a><span class="lineno"> 1211<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(feature, <span class="keywordtype">id<\/span>, weight);<\/div><div class="line"><a name="l01212"><\/a><span class="lineno"> 1212<\/span>&#160;}<\/div><div class="line"><a name="l01213"><\/a><span class="lineno"> 1213<\/span>&#160;<\/div><div class="line"><a name="l01214"><\/a><span class="lineno"> 1214<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01215"><\/a><span class="lineno"> 1215<\/span>&#160;<\/div><div class="line"><a name="l01216"><\/a><span class="lineno"> 1216<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01217"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a41e77294037788a9b2744f89ac64ecea"> 1217<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;feature, <\/div><div class="line"><a name="l01218"><\/a><span class="lineno"> 1218<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;word_id, <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> &amp;weight, <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> *nid, <span class="keywordtype">int<\/span> levelsup)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01219"><\/a><span class="lineno"> 1219<\/span>&#160;<span class="keyword"><\/span>{ <\/div><div class="line"><a name="l01220"><\/a><span class="lineno"> 1220<\/span>&#160;  <span class="comment">\/\/ propagate the feature down the tree<\/span><\/div><div class="line"><a name="l01221"><\/a><span class="lineno"> 1221<\/span>&#160;  std::vector&lt;NodeId&gt; nodes;<\/div><div class="line"><a name="l01222"><\/a><span class="lineno"> 1222<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;NodeId&gt;::const_iterator nit;<\/div><div class="line"><a name="l01223"><\/a><span class="lineno"> 1223<\/span>&#160;<\/div><div class="line"><a name="l01224"><\/a><span class="lineno"> 1224<\/span>&#160;  <span class="comment">\/\/ level at which the node must be stored in nid, if given<\/span><\/div><div class="line"><a name="l01225"><\/a><span class="lineno"> 1225<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> nid_level = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> - levelsup;<\/div><div class="line"><a name="l01226"><\/a><span class="lineno"> 1226<\/span>&#160;  <span class="keywordflow">if<\/span>(nid_level &lt;= 0 &amp;&amp; nid != NULL) *nid = 0; <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l01227"><\/a><span class="lineno"> 1227<\/span>&#160;<\/div><div class="line"><a name="l01228"><\/a><span class="lineno"> 1228<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> final_id = 0; <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l01229"><\/a><span class="lineno"> 1229<\/span>&#160;  <span class="keywordtype">int<\/span> current_level = 0;<\/div><div class="line"><a name="l01230"><\/a><span class="lineno"> 1230<\/span>&#160;<\/div><div class="line"><a name="l01231"><\/a><span class="lineno"> 1231<\/span>&#160;  <span class="keywordflow">do<\/span><\/div><div class="line"><a name="l01232"><\/a><span class="lineno"> 1232<\/span>&#160;  {<\/div><div class="line"><a name="l01233"><\/a><span class="lineno"> 1233<\/span>&#160;    ++current_level;<\/div><div class="line"><a name="l01234"><\/a><span class="lineno"> 1234<\/span>&#160;    nodes = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].children;<\/div><div class="line"><a name="l01235"><\/a><span class="lineno"> 1235<\/span>&#160;    final_id = nodes[0];<\/div><div class="line"><a name="l01236"><\/a><span class="lineno"> 1236<\/span>&#160; <\/div><div class="line"><a name="l01237"><\/a><span class="lineno"> 1237<\/span>&#160;    <span class="keywordtype">double<\/span> best_d = F::distance(feature, <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].descriptor);<\/div><div class="line"><a name="l01238"><\/a><span class="lineno"> 1238<\/span>&#160;<\/div><div class="line"><a name="l01239"><\/a><span class="lineno"> 1239<\/span>&#160;    <span class="keywordflow">for<\/span>(nit = nodes.begin() + 1; nit != nodes.end(); ++nit)<\/div><div class="line"><a name="l01240"><\/a><span class="lineno"> 1240<\/span>&#160;    {<\/div><div class="line"><a name="l01241"><\/a><span class="lineno"> 1241<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span> = *nit;<\/div><div class="line"><a name="l01242"><\/a><span class="lineno"> 1242<\/span>&#160;      <span class="keywordtype">double<\/span> d = F::distance(feature, <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[<span class="keywordtype">id<\/span>].descriptor);<\/div><div class="line"><a name="l01243"><\/a><span class="lineno"> 1243<\/span>&#160;      <span class="keywordflow">if<\/span>(d &lt; best_d)<\/div><div class="line"><a name="l01244"><\/a><span class="lineno"> 1244<\/span>&#160;      {<\/div><div class="line"><a name="l01245"><\/a><span class="lineno"> 1245<\/span>&#160;        best_d = d;<\/div><div class="line"><a name="l01246"><\/a><span class="lineno"> 1246<\/span>&#160;        final_id = id;<\/div><div class="line"><a name="l01247"><\/a><span class="lineno"> 1247<\/span>&#160;      }<\/div><div class="line"><a name="l01248"><\/a><span class="lineno"> 1248<\/span>&#160;    }<\/div><div class="line"><a name="l01249"><\/a><span class="lineno"> 1249<\/span>&#160;    <\/div><div class="line"><a name="l01250"><\/a><span class="lineno"> 1250<\/span>&#160;    <span class="keywordflow">if<\/span>(nid != NULL &amp;&amp; current_level == nid_level)<\/div><div class="line"><a name="l01251"><\/a><span class="lineno"> 1251<\/span>&#160;      *nid = final_id;<\/div><div class="line"><a name="l01252"><\/a><span class="lineno"> 1252<\/span>&#160;    <\/div><div class="line"><a name="l01253"><\/a><span class="lineno"> 1253<\/span>&#160;  } <span class="keywordflow">while<\/span>( !<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].isLeaf() );<\/div><div class="line"><a name="l01254"><\/a><span class="lineno"> 1254<\/span>&#160;<\/div><div class="line"><a name="l01255"><\/a><span class="lineno"> 1255<\/span>&#160;  <span class="comment">\/\/ turn node id into word id<\/span><\/div><div class="line"><a name="l01256"><\/a><span class="lineno"> 1256<\/span>&#160;  word_id = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].word_id;<\/div><div class="line"><a name="l01257"><\/a><span class="lineno"> 1257<\/span>&#160;  weight = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].weight;<\/div><div class="line"><a name="l01258"><\/a><span class="lineno"> 1258<\/span>&#160;}<\/div><div class="line"><a name="l01259"><\/a><span class="lineno"> 1259<\/span>&#160;<\/div><div class="line"><a name="l01260"><\/a><span class="lineno"> 1260<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01261"><\/a><span class="lineno"> 1261<\/span>&#160;<\/div><div class="line"><a name="l01262"><\/a><span class="lineno"> 1262<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01263"><\/a><span class="lineno"> 1263<\/span>&#160;<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa59e9b47d05bce5ecd4e90afbcd63727">TemplatedVocabulary&lt;TDescriptor,F&gt;::getParentNode<\/a><\/div><div class="line"><a name="l01264"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa59e9b47d05bce5ecd4e90afbcd63727"> 1264<\/a><\/span>&#160;  (<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid, <span class="keywordtype">int<\/span> levelsup) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01265"><\/a><span class="lineno"> 1265<\/span>&#160;{<\/div><div class="line"><a name="l01266"><\/a><span class="lineno"> 1266<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> ret = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid]-&gt;id; <span class="comment">\/\/ node id<\/span><\/div><div class="line"><a name="l01267"><\/a><span class="lineno"> 1267<\/span>&#160;  <span class="keywordflow">while<\/span>(levelsup &gt; 0 &amp;&amp; ret != 0) <span class="comment">\/\/ ret == 0 --&gt; root<\/span><\/div><div class="line"><a name="l01268"><\/a><span class="lineno"> 1268<\/span>&#160;  {<\/div><div class="line"><a name="l01269"><\/a><span class="lineno"> 1269<\/span>&#160;    --levelsup;<\/div><div class="line"><a name="l01270"><\/a><span class="lineno"> 1270<\/span>&#160;    ret = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[ret].parent;<\/div><div class="line"><a name="l01271"><\/a><span class="lineno"> 1271<\/span>&#160;  }<\/div><div class="line"><a name="l01272"><\/a><span class="lineno"> 1272<\/span>&#160;  <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l01273"><\/a><span class="lineno"> 1273<\/span>&#160;}<\/div><div class="line"><a name="l01274"><\/a><span class="lineno"> 1274<\/span>&#160;<\/div><div class="line"><a name="l01275"><\/a><span class="lineno"> 1275<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01276"><\/a><span class="lineno"> 1276<\/span>&#160;<\/div><div class="line"><a name="l01277"><\/a><span class="lineno"> 1277<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01278"><\/a><span class="lineno"> 1278<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a916015cc8e6cd6f53c6e067c7b829f75">TemplatedVocabulary&lt;TDescriptor,F&gt;::getWordsFromNode<\/a><\/div><div class="line"><a name="l01279"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a916015cc8e6cd6f53c6e067c7b829f75"> 1279<\/a><\/span>&#160;  (<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid, std::vector&lt;WordId&gt; &amp;words) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01280"><\/a><span class="lineno"> 1280<\/span>&#160;{<\/div><div class="line"><a name="l01281"><\/a><span class="lineno"> 1281<\/span>&#160;  words.clear();<\/div><div class="line"><a name="l01282"><\/a><span class="lineno"> 1282<\/span>&#160;  <\/div><div class="line"><a name="l01283"><\/a><span class="lineno"> 1283<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].isLeaf())<\/div><div class="line"><a name="l01284"><\/a><span class="lineno"> 1284<\/span>&#160;  {<\/div><div class="line"><a name="l01285"><\/a><span class="lineno"> 1285<\/span>&#160;    words.push_back(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].word_id);<\/div><div class="line"><a name="l01286"><\/a><span class="lineno"> 1286<\/span>&#160;  }<\/div><div class="line"><a name="l01287"><\/a><span class="lineno"> 1287<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01288"><\/a><span class="lineno"> 1288<\/span>&#160;  {<\/div><div class="line"><a name="l01289"><\/a><span class="lineno"> 1289<\/span>&#160;    words.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>); <span class="comment">\/\/ ^1, ^2, ...<\/span><\/div><div class="line"><a name="l01290"><\/a><span class="lineno"> 1290<\/span>&#160;    <\/div><div class="line"><a name="l01291"><\/a><span class="lineno"> 1291<\/span>&#160;    std::vector&lt;NodeId&gt; parents;<\/div><div class="line"><a name="l01292"><\/a><span class="lineno"> 1292<\/span>&#160;    parents.push_back(nid);<\/div><div class="line"><a name="l01293"><\/a><span class="lineno"> 1293<\/span>&#160;    <\/div><div class="line"><a name="l01294"><\/a><span class="lineno"> 1294<\/span>&#160;    <span class="keywordflow">while<\/span>(!parents.empty())<\/div><div class="line"><a name="l01295"><\/a><span class="lineno"> 1295<\/span>&#160;    {<\/div><div class="line"><a name="l01296"><\/a><span class="lineno"> 1296<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> parentid = parents.back();<\/div><div class="line"><a name="l01297"><\/a><span class="lineno"> 1297<\/span>&#160;      parents.pop_back();<\/div><div class="line"><a name="l01298"><\/a><span class="lineno"> 1298<\/span>&#160;      <\/div><div class="line"><a name="l01299"><\/a><span class="lineno"> 1299<\/span>&#160;      <span class="keyword">const<\/span> std::vector&lt;NodeId&gt; &amp;child_ids = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[parentid].children;<\/div><div class="line"><a name="l01300"><\/a><span class="lineno"> 1300<\/span>&#160;      std::vector&lt;NodeId&gt;::const_iterator cit;<\/div><div class="line"><a name="l01301"><\/a><span class="lineno"> 1301<\/span>&#160;      <\/div><div class="line"><a name="l01302"><\/a><span class="lineno"> 1302<\/span>&#160;      <span class="keywordflow">for<\/span>(cit = child_ids.begin(); cit != child_ids.end(); ++cit)<\/div><div class="line"><a name="l01303"><\/a><span class="lineno"> 1303<\/span>&#160;      {<\/div><div class="line"><a name="l01304"><\/a><span class="lineno"> 1304<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a> &amp;child_node = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[*cit];<\/div><div class="line"><a name="l01305"><\/a><span class="lineno"> 1305<\/span>&#160;        <\/div><div class="line"><a name="l01306"><\/a><span class="lineno"> 1306<\/span>&#160;        <span class="keywordflow">if<\/span>(child_node.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">isLeaf<\/a>())<\/div><div class="line"><a name="l01307"><\/a><span class="lineno"> 1307<\/span>&#160;          words.push_back(child_node.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#aa56418d848932be4583fac6b3021c708">word_id<\/a>);<\/div><div class="line"><a name="l01308"><\/a><span class="lineno"> 1308<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01309"><\/a><span class="lineno"> 1309<\/span>&#160;          parents.push_back(*cit);<\/div><div class="line"><a name="l01310"><\/a><span class="lineno"> 1310<\/span>&#160;        <\/div><div class="line"><a name="l01311"><\/a><span class="lineno"> 1311<\/span>&#160;      } <span class="comment">\/\/ for each child<\/span><\/div><div class="line"><a name="l01312"><\/a><span class="lineno"> 1312<\/span>&#160;    } <span class="comment">\/\/ while !parents.empty<\/span><\/div><div class="line"><a name="l01313"><\/a><span class="lineno"> 1313<\/span>&#160;  }<\/div><div class="line"><a name="l01314"><\/a><span class="lineno"> 1314<\/span>&#160;}<\/div><div class="line"><a name="l01315"><\/a><span class="lineno"> 1315<\/span>&#160;<\/div><div class="line"><a name="l01316"><\/a><span class="lineno"> 1316<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01317"><\/a><span class="lineno"> 1317<\/span>&#160;<\/div><div class="line"><a name="l01318"><\/a><span class="lineno"> 1318<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01319"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a0b6721fde54bd8cd008f6a120398741e"> 1319<\/a><\/span>&#160;<span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0b6721fde54bd8cd008f6a120398741e">TemplatedVocabulary&lt;TDescriptor,F&gt;::stopWords<\/a>(<span class="keywordtype">double<\/span> minWeight)<\/div><div class="line"><a name="l01320"><\/a><span class="lineno"> 1320<\/span>&#160;{<\/div><div class="line"><a name="l01321"><\/a><span class="lineno"> 1321<\/span>&#160;  <span class="keywordtype">int<\/span> c = 0;<\/div><div class="line"><a name="l01322"><\/a><span class="lineno"> 1322<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;Node*&gt;::iterator wit;<\/div><div class="line"><a name="l01323"><\/a><span class="lineno"> 1323<\/span>&#160;  <span class="keywordflow">for<\/span>(wit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin(); wit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.end(); ++wit)<\/div><div class="line"><a name="l01324"><\/a><span class="lineno"> 1324<\/span>&#160;  {<\/div><div class="line"><a name="l01325"><\/a><span class="lineno"> 1325<\/span>&#160;    <span class="keywordflow">if<\/span>((*wit)-&gt;weight &lt; minWeight)<\/div><div class="line"><a name="l01326"><\/a><span class="lineno"> 1326<\/span>&#160;    {<\/div><div class="line"><a name="l01327"><\/a><span class="lineno"> 1327<\/span>&#160;      ++c;<\/div><div class="line"><a name="l01328"><\/a><span class="lineno"> 1328<\/span>&#160;      (*wit)-&gt;weight = 0;<\/div><div class="line"><a name="l01329"><\/a><span class="lineno"> 1329<\/span>&#160;    }<\/div><div class="line"><a name="l01330"><\/a><span class="lineno"> 1330<\/span>&#160;  }<\/div><div class="line"><a name="l01331"><\/a><span class="lineno"> 1331<\/span>&#160;  <span class="keywordflow">return<\/span> c;<\/div><div class="line"><a name="l01332"><\/a><span class="lineno"> 1332<\/span>&#160;}<\/div><div class="line"><a name="l01333"><\/a><span class="lineno"> 1333<\/span>&#160;<\/div><div class="line"><a name="l01334"><\/a><span class="lineno"> 1334<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01335"><\/a><span class="lineno"> 1335<\/span>&#160;<\/div><div class="line"><a name="l01336"><\/a><span class="lineno"> 1336<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01337"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d"> 1337<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">TemplatedVocabulary&lt;TDescriptor,F&gt;::save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01338"><\/a><span class="lineno"> 1338<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01339"><\/a><span class="lineno"> 1339<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::WRITE);<\/div><div class="line"><a name="l01340"><\/a><span class="lineno"> 1340<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01341"><\/a><span class="lineno"> 1341<\/span>&#160;  <\/div><div class="line"><a name="l01342"><\/a><span class="lineno"> 1342<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">save<\/a>(fs);<\/div><div class="line"><a name="l01343"><\/a><span class="lineno"> 1343<\/span>&#160;}<\/div><div class="line"><a name="l01344"><\/a><span class="lineno"> 1344<\/span>&#160;<\/div><div class="line"><a name="l01345"><\/a><span class="lineno"> 1345<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01346"><\/a><span class="lineno"> 1346<\/span>&#160;<\/div><div class="line"><a name="l01347"><\/a><span class="lineno"> 1347<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01348"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0"> 1348<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">TemplatedVocabulary&lt;TDescriptor,F&gt;::load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<\/div><div class="line"><a name="l01349"><\/a><span class="lineno"> 1349<\/span>&#160;{<\/div><div class="line"><a name="l01350"><\/a><span class="lineno"> 1350<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::READ);<\/div><div class="line"><a name="l01351"><\/a><span class="lineno"> 1351<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01352"><\/a><span class="lineno"> 1352<\/span>&#160;  <\/div><div class="line"><a name="l01353"><\/a><span class="lineno"> 1353<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">load<\/a>(fs);<\/div><div class="line"><a name="l01354"><\/a><span class="lineno"> 1354<\/span>&#160;}<\/div><div class="line"><a name="l01355"><\/a><span class="lineno"> 1355<\/span>&#160;<\/div><div class="line"><a name="l01356"><\/a><span class="lineno"> 1356<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01357"><\/a><span class="lineno"> 1357<\/span>&#160;<\/div><div class="line"><a name="l01358"><\/a><span class="lineno"> 1358<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01359"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a19159c3993fce7b4573a6de208b4a973"> 1359<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">TemplatedVocabulary&lt;TDescriptor,F&gt;::save<\/a>(cv::FileStorage &amp;f,<\/div><div class="line"><a name="l01360"><\/a><span class="lineno"> 1360<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01361"><\/a><span class="lineno"> 1361<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01362"><\/a><span class="lineno"> 1362<\/span>&#160;  <span class="comment">\/\/ Format YAML:<\/span><\/div><div class="line"><a name="l01363"><\/a><span class="lineno"> 1363<\/span>&#160;  <span class="comment">\/\/ vocabulary <\/span><\/div><div class="line"><a name="l01364"><\/a><span class="lineno"> 1364<\/span>&#160;  <span class="comment">\/\/ {<\/span><\/div><div class="line"><a name="l01365"><\/a><span class="lineno"> 1365<\/span>&#160;  <span class="comment">\/\/   k:<\/span><\/div><div class="line"><a name="l01366"><\/a><span class="lineno"> 1366<\/span>&#160;  <span class="comment">\/\/   L:<\/span><\/div><div class="line"><a name="l01367"><\/a><span class="lineno"> 1367<\/span>&#160;  <span class="comment">\/\/   scoringType:<\/span><\/div><div class="line"><a name="l01368"><\/a><span class="lineno"> 1368<\/span>&#160;  <span class="comment">\/\/   weightingType:<\/span><\/div><div class="line"><a name="l01369"><\/a><span class="lineno"> 1369<\/span>&#160;  <span class="comment">\/\/   nodes <\/span><\/div><div class="line"><a name="l01370"><\/a><span class="lineno"> 1370<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01371"><\/a><span class="lineno"> 1371<\/span>&#160;  <span class="comment">\/\/     {<\/span><\/div><div class="line"><a name="l01372"><\/a><span class="lineno"> 1372<\/span>&#160;  <span class="comment">\/\/       nodeId:<\/span><\/div><div class="line"><a name="l01373"><\/a><span class="lineno"> 1373<\/span>&#160;  <span class="comment">\/\/       parentId:<\/span><\/div><div class="line"><a name="l01374"><\/a><span class="lineno"> 1374<\/span>&#160;  <span class="comment">\/\/       weight:<\/span><\/div><div class="line"><a name="l01375"><\/a><span class="lineno"> 1375<\/span>&#160;  <span class="comment">\/\/       descriptor: <\/span><\/div><div class="line"><a name="l01376"><\/a><span class="lineno"> 1376<\/span>&#160;  <span class="comment">\/\/     }<\/span><\/div><div class="line"><a name="l01377"><\/a><span class="lineno"> 1377<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01378"><\/a><span class="lineno"> 1378<\/span>&#160;  <span class="comment">\/\/   words<\/span><\/div><div class="line"><a name="l01379"><\/a><span class="lineno"> 1379<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01380"><\/a><span class="lineno"> 1380<\/span>&#160;  <span class="comment">\/\/     {<\/span><\/div><div class="line"><a name="l01381"><\/a><span class="lineno"> 1381<\/span>&#160;  <span class="comment">\/\/       wordId:<\/span><\/div><div class="line"><a name="l01382"><\/a><span class="lineno"> 1382<\/span>&#160;  <span class="comment">\/\/       nodeId:<\/span><\/div><div class="line"><a name="l01383"><\/a><span class="lineno"> 1383<\/span>&#160;  <span class="comment">\/\/     }<\/span><\/div><div class="line"><a name="l01384"><\/a><span class="lineno"> 1384<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01385"><\/a><span class="lineno"> 1385<\/span>&#160;  <span class="comment">\/\/ }<\/span><\/div><div class="line"><a name="l01386"><\/a><span class="lineno"> 1386<\/span>&#160;  <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l01387"><\/a><span class="lineno"> 1387<\/span>&#160;  <span class="comment">\/\/ The root node (index 0) is not included in the node vector<\/span><\/div><div class="line"><a name="l01388"><\/a><span class="lineno"> 1388<\/span>&#160;  <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l01389"><\/a><span class="lineno"> 1389<\/span>&#160;  <\/div><div class="line"><a name="l01390"><\/a><span class="lineno"> 1390<\/span>&#160;  f &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;{&quot;<\/span>;<\/div><div class="line"><a name="l01391"><\/a><span class="lineno"> 1391<\/span>&#160;  <\/div><div class="line"><a name="l01392"><\/a><span class="lineno"> 1392<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;k&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>;<\/div><div class="line"><a name="l01393"><\/a><span class="lineno"> 1393<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;L&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>;<\/div><div class="line"><a name="l01394"><\/a><span class="lineno"> 1394<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;scoringType&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>;<\/div><div class="line"><a name="l01395"><\/a><span class="lineno"> 1395<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;weightingType&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>;<\/div><div class="line"><a name="l01396"><\/a><span class="lineno"> 1396<\/span>&#160;  <\/div><div class="line"><a name="l01397"><\/a><span class="lineno"> 1397<\/span>&#160;  <span class="comment">\/\/ tree<\/span><\/div><div class="line"><a name="l01398"><\/a><span class="lineno"> 1398<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;nodes&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01399"><\/a><span class="lineno"> 1399<\/span>&#160;  std::vector&lt;NodeId&gt; parents, children;<\/div><div class="line"><a name="l01400"><\/a><span class="lineno"> 1400<\/span>&#160;  std::vector&lt;NodeId&gt;::const_iterator pit;<\/div><div class="line"><a name="l01401"><\/a><span class="lineno"> 1401<\/span>&#160;<\/div><div class="line"><a name="l01402"><\/a><span class="lineno"> 1402<\/span>&#160;  parents.push_back(0); <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l01403"><\/a><span class="lineno"> 1403<\/span>&#160;<\/div><div class="line"><a name="l01404"><\/a><span class="lineno"> 1404<\/span>&#160;  <span class="keywordflow">while<\/span>(!parents.empty())<\/div><div class="line"><a name="l01405"><\/a><span class="lineno"> 1405<\/span>&#160;  {<\/div><div class="line"><a name="l01406"><\/a><span class="lineno"> 1406<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> pid = parents.back();<\/div><div class="line"><a name="l01407"><\/a><span class="lineno"> 1407<\/span>&#160;    parents.pop_back();<\/div><div class="line"><a name="l01408"><\/a><span class="lineno"> 1408<\/span>&#160;<\/div><div class="line"><a name="l01409"><\/a><span class="lineno"> 1409<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>&amp; parent = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[pid];<\/div><div class="line"><a name="l01410"><\/a><span class="lineno"> 1410<\/span>&#160;    children = parent.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a54acc0958e378306cc03f20a186c1fdc">children<\/a>;<\/div><div class="line"><a name="l01411"><\/a><span class="lineno"> 1411<\/span>&#160;<\/div><div class="line"><a name="l01412"><\/a><span class="lineno"> 1412<\/span>&#160;    <span class="keywordflow">for<\/span>(pit = children.begin(); pit != children.end(); pit++)<\/div><div class="line"><a name="l01413"><\/a><span class="lineno"> 1413<\/span>&#160;    {<\/div><div class="line"><a name="l01414"><\/a><span class="lineno"> 1414<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>&amp; child = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[*pit];<\/div><div class="line"><a name="l01415"><\/a><span class="lineno"> 1415<\/span>&#160;<\/div><div class="line"><a name="l01416"><\/a><span class="lineno"> 1416<\/span>&#160;      <span class="comment">\/\/ save node data<\/span><\/div><div class="line"><a name="l01417"><\/a><span class="lineno"> 1417<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;{:&quot;<\/span>;<\/div><div class="line"><a name="l01418"><\/a><span class="lineno"> 1418<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;nodeId&quot;<\/span> &lt;&lt; (int)child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">id<\/a>;<\/div><div class="line"><a name="l01419"><\/a><span class="lineno"> 1419<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;parentId&quot;<\/span> &lt;&lt; (<span class="keywordtype">int<\/span>)pid;<\/div><div class="line"><a name="l01420"><\/a><span class="lineno"> 1420<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;weight&quot;<\/span> &lt;&lt; (double)child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">weight<\/a>;<\/div><div class="line"><a name="l01421"><\/a><span class="lineno"> 1421<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;descriptor&quot;<\/span> &lt;&lt; F::toString(child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ab785e994eeae8e6c1d67ee45ad4c8450">descriptor<\/a>);<\/div><div class="line"><a name="l01422"><\/a><span class="lineno"> 1422<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01423"><\/a><span class="lineno"> 1423<\/span>&#160;      <\/div><div class="line"><a name="l01424"><\/a><span class="lineno"> 1424<\/span>&#160;      <span class="comment">\/\/ add to parent list<\/span><\/div><div class="line"><a name="l01425"><\/a><span class="lineno"> 1425<\/span>&#160;      <span class="keywordflow">if<\/span>(!child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">isLeaf<\/a>())<\/div><div class="line"><a name="l01426"><\/a><span class="lineno"> 1426<\/span>&#160;      {<\/div><div class="line"><a name="l01427"><\/a><span class="lineno"> 1427<\/span>&#160;        parents.push_back(*pit);<\/div><div class="line"><a name="l01428"><\/a><span class="lineno"> 1428<\/span>&#160;      }<\/div><div class="line"><a name="l01429"><\/a><span class="lineno"> 1429<\/span>&#160;    }<\/div><div class="line"><a name="l01430"><\/a><span class="lineno"> 1430<\/span>&#160;  }<\/div><div class="line"><a name="l01431"><\/a><span class="lineno"> 1431<\/span>&#160;  <\/div><div class="line"><a name="l01432"><\/a><span class="lineno"> 1432<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ nodes<\/span><\/div><div class="line"><a name="l01433"><\/a><span class="lineno"> 1433<\/span>&#160;<\/div><div class="line"><a name="l01434"><\/a><span class="lineno"> 1434<\/span>&#160;  <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01435"><\/a><span class="lineno"> 1435<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;words&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01436"><\/a><span class="lineno"> 1436<\/span>&#160;  <\/div><div class="line"><a name="l01437"><\/a><span class="lineno"> 1437<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;Node*&gt;::const_iterator wit;<\/div><div class="line"><a name="l01438"><\/a><span class="lineno"> 1438<\/span>&#160;  <span class="keywordflow">for<\/span>(wit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin(); wit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.end(); wit++)<\/div><div class="line"><a name="l01439"><\/a><span class="lineno"> 1439<\/span>&#160;  {<\/div><div class="line"><a name="l01440"><\/a><span class="lineno"> 1440<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <span class="keywordtype">id<\/span> = wit - <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin();<\/div><div class="line"><a name="l01441"><\/a><span class="lineno"> 1441<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;{:&quot;<\/span>;<\/div><div class="line"><a name="l01442"><\/a><span class="lineno"> 1442<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;wordId&quot;<\/span> &lt;&lt; (int)<span class="keywordtype">id<\/span>;<\/div><div class="line"><a name="l01443"><\/a><span class="lineno"> 1443<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;nodeId&quot;<\/span> &lt;&lt; (int)(*wit)-&gt;id;<\/div><div class="line"><a name="l01444"><\/a><span class="lineno"> 1444<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01445"><\/a><span class="lineno"> 1445<\/span>&#160;  }<\/div><div class="line"><a name="l01446"><\/a><span class="lineno"> 1446<\/span>&#160;  <\/div><div class="line"><a name="l01447"><\/a><span class="lineno"> 1447<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01448"><\/a><span class="lineno"> 1448<\/span>&#160;<\/div><div class="line"><a name="l01449"><\/a><span class="lineno"> 1449<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01450"><\/a><span class="lineno"> 1450<\/span>&#160;<\/div><div class="line"><a name="l01451"><\/a><span class="lineno"> 1451<\/span>&#160;}<\/div><div class="line"><a name="l01452"><\/a><span class="lineno"> 1452<\/span>&#160;<\/div><div class="line"><a name="l01453"><\/a><span class="lineno"> 1453<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01454"><\/a><span class="lineno"> 1454<\/span>&#160;<\/div><div class="line"><a name="l01455"><\/a><span class="lineno"> 1455<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01456"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a037ba240314ff30f3620fb4de6845c66"> 1456<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">TemplatedVocabulary&lt;TDescriptor,F&gt;::load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs,<\/div><div class="line"><a name="l01457"><\/a><span class="lineno"> 1457<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<\/div><div class="line"><a name="l01458"><\/a><span class="lineno"> 1458<\/span>&#160;{<\/div><div class="line"><a name="l01459"><\/a><span class="lineno"> 1459<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l01460"><\/a><span class="lineno"> 1460<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l01461"><\/a><span class="lineno"> 1461<\/span>&#160;  <\/div><div class="line"><a name="l01462"><\/a><span class="lineno"> 1462<\/span>&#160;  cv::FileNode fvoc = fs[name];<\/div><div class="line"><a name="l01463"><\/a><span class="lineno"> 1463<\/span>&#160;  <\/div><div class="line"><a name="l01464"><\/a><span class="lineno"> 1464<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = (int)fvoc[<span class="stringliteral">&quot;k&quot;<\/span>];<\/div><div class="line"><a name="l01465"><\/a><span class="lineno"> 1465<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = (int)fvoc[<span class="stringliteral">&quot;L&quot;<\/span>];<\/div><div class="line"><a name="l01466"><\/a><span class="lineno"> 1466<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = (<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a>)((<span class="keywordtype">int<\/span>)fvoc[<span class="stringliteral">&quot;scoringType&quot;<\/span>]);<\/div><div class="line"><a name="l01467"><\/a><span class="lineno"> 1467<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = (<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a>)((<span class="keywordtype">int<\/span>)fvoc[<span class="stringliteral">&quot;weightingType&quot;<\/span>]);<\/div><div class="line"><a name="l01468"><\/a><span class="lineno"> 1468<\/span>&#160;  <\/div><div class="line"><a name="l01469"><\/a><span class="lineno"> 1469<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l01470"><\/a><span class="lineno"> 1470<\/span>&#160;<\/div><div class="line"><a name="l01471"><\/a><span class="lineno"> 1471<\/span>&#160;  <span class="comment">\/\/ nodes<\/span><\/div><div class="line"><a name="l01472"><\/a><span class="lineno"> 1472<\/span>&#160;  cv::FileNode fn = fvoc[<span class="stringliteral">&quot;nodes&quot;<\/span>];<\/div><div class="line"><a name="l01473"><\/a><span class="lineno"> 1473<\/span>&#160;<\/div><div class="line"><a name="l01474"><\/a><span class="lineno"> 1474<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.resize(fn.size() + 1); <span class="comment">\/\/ +1 to include root<\/span><\/div><div class="line"><a name="l01475"><\/a><span class="lineno"> 1475<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[0].id = 0;<\/div><div class="line"><a name="l01476"><\/a><span class="lineno"> 1476<\/span>&#160;<\/div><div class="line"><a name="l01477"><\/a><span class="lineno"> 1477<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fn.size(); ++i)<\/div><div class="line"><a name="l01478"><\/a><span class="lineno"> 1478<\/span>&#160;  {<\/div><div class="line"><a name="l01479"><\/a><span class="lineno"> 1479<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (int)fn[i][<span class="stringliteral">&quot;nodeId&quot;<\/span>];<\/div><div class="line"><a name="l01480"><\/a><span class="lineno"> 1480<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> pid = (int)fn[i][<span class="stringliteral">&quot;parentId&quot;<\/span>];<\/div><div class="line"><a name="l01481"><\/a><span class="lineno"> 1481<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> weight = (<a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>)fn[i][<span class="stringliteral">&quot;weight&quot;<\/span>];<\/div><div class="line"><a name="l01482"><\/a><span class="lineno"> 1482<\/span>&#160;    std::string d = (std::string)fn[i][<span class="stringliteral">&quot;descriptor&quot;<\/span>];<\/div><div class="line"><a name="l01483"><\/a><span class="lineno"> 1483<\/span>&#160;    <\/div><div class="line"><a name="l01484"><\/a><span class="lineno"> 1484<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].id = nid;<\/div><div class="line"><a name="l01485"><\/a><span class="lineno"> 1485<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].parent = pid;<\/div><div class="line"><a name="l01486"><\/a><span class="lineno"> 1486<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].weight = weight;<\/div><div class="line"><a name="l01487"><\/a><span class="lineno"> 1487<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[pid].children.push_back(nid);<\/div><div class="line"><a name="l01488"><\/a><span class="lineno"> 1488<\/span>&#160;    <\/div><div class="line"><a name="l01489"><\/a><span class="lineno"> 1489<\/span>&#160;    F::fromString(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].descriptor, d);<\/div><div class="line"><a name="l01490"><\/a><span class="lineno"> 1490<\/span>&#160;  }<\/div><div class="line"><a name="l01491"><\/a><span class="lineno"> 1491<\/span>&#160;  <\/div><div class="line"><a name="l01492"><\/a><span class="lineno"> 1492<\/span>&#160;  <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01493"><\/a><span class="lineno"> 1493<\/span>&#160;  fn = fvoc[<span class="stringliteral">&quot;words&quot;<\/span>];<\/div><div class="line"><a name="l01494"><\/a><span class="lineno"> 1494<\/span>&#160;  <\/div><div class="line"><a name="l01495"><\/a><span class="lineno"> 1495<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.resize(fn.size());<\/div><div class="line"><a name="l01496"><\/a><span class="lineno"> 1496<\/span>&#160;<\/div><div class="line"><a name="l01497"><\/a><span class="lineno"> 1497<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fn.size(); ++i)<\/div><div class="line"><a name="l01498"><\/a><span class="lineno"> 1498<\/span>&#160;  {<\/div><div class="line"><a name="l01499"><\/a><span class="lineno"> 1499<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> wid = (int)fn[i][<span class="stringliteral">&quot;wordId&quot;<\/span>];<\/div><div class="line"><a name="l01500"><\/a><span class="lineno"> 1500<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (int)fn[i][<span class="stringliteral">&quot;nodeId&quot;<\/span>];<\/div><div class="line"><a name="l01501"><\/a><span class="lineno"> 1501<\/span>&#160;    <\/div><div class="line"><a name="l01502"><\/a><span class="lineno"> 1502<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].word_id = wid;<\/div><div class="line"><a name="l01503"><\/a><span class="lineno"> 1503<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid] = &amp;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid];<\/div><div class="line"><a name="l01504"><\/a><span class="lineno"> 1504<\/span>&#160;  }<\/div><div class="line"><a name="l01505"><\/a><span class="lineno"> 1505<\/span>&#160;}<\/div><div class="line"><a name="l01506"><\/a><span class="lineno"> 1506<\/span>&#160;    <\/div><div class="line"><a name="l01507"><\/a><span class="lineno"> 1507<\/span>&#160;<span class="comment">\/\/ Added by VINS [[[<\/span><\/div><div class="line"><a name="l01508"><\/a><span class="lineno"> 1508<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01509"><\/a><span class="lineno"> 1509<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;::loadBin<\/a>(<span class="keyword">const<\/span> std::string &amp;filename) {<\/div><div class="line"><a name="l01510"><\/a><span class="lineno"> 1510<\/span>&#160;    <\/div><div class="line"><a name="l01511"><\/a><span class="lineno"> 1511<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l01512"><\/a><span class="lineno"> 1512<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l01513"><\/a><span class="lineno"> 1513<\/span>&#160;  <span class="comment">\/\/printf(&quot;loop load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l01514"><\/a><span class="lineno"> 1514<\/span>&#160;  std::ifstream ifStream(filename);<\/div><div class="line"><a name="l01515"><\/a><span class="lineno"> 1515<\/span>&#160;  VINSLoop::Vocabulary voc;<\/div><div class="line"><a name="l01516"><\/a><span class="lineno"> 1516<\/span>&#160;  voc.deserialize(ifStream);<\/div><div class="line"><a name="l01517"><\/a><span class="lineno"> 1517<\/span>&#160;  ifStream.close();<\/div><div class="line"><a name="l01518"><\/a><span class="lineno"> 1518<\/span>&#160;  <\/div><div class="line"><a name="l01519"><\/a><span class="lineno"> 1519<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = voc.k;<\/div><div class="line"><a name="l01520"><\/a><span class="lineno"> 1520<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = voc.L;<\/div><div class="line"><a name="l01521"><\/a><span class="lineno"> 1521<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = (<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a>)voc.scoringType;<\/div><div class="line"><a name="l01522"><\/a><span class="lineno"> 1522<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = (<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a>)voc.weightingType;<\/div><div class="line"><a name="l01523"><\/a><span class="lineno"> 1523<\/span>&#160;  <\/div><div class="line"><a name="l01524"><\/a><span class="lineno"> 1524<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l01525"><\/a><span class="lineno"> 1525<\/span>&#160;<\/div><div class="line"><a name="l01526"><\/a><span class="lineno"> 1526<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.resize(voc.nNodes + 1); <span class="comment">\/\/ +1 to include root<\/span><\/div><div class="line"><a name="l01527"><\/a><span class="lineno"> 1527<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[0].id = 0;<\/div><div class="line"><a name="l01528"><\/a><span class="lineno"> 1528<\/span>&#160;<\/div><div class="line"><a name="l01529"><\/a><span class="lineno"> 1529<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; voc.nNodes; ++i)<\/div><div class="line"><a name="l01530"><\/a><span class="lineno"> 1530<\/span>&#160;  {<\/div><div class="line"><a name="l01531"><\/a><span class="lineno"> 1531<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = voc.nodes[i].nodeId;<\/div><div class="line"><a name="l01532"><\/a><span class="lineno"> 1532<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> pid = voc.nodes[i].parentId;<\/div><div class="line"><a name="l01533"><\/a><span class="lineno"> 1533<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> weight = voc.nodes[i].weight;<\/div><div class="line"><a name="l01534"><\/a><span class="lineno"> 1534<\/span>&#160;      <\/div><div class="line"><a name="l01535"><\/a><span class="lineno"> 1535<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].id = nid;<\/div><div class="line"><a name="l01536"><\/a><span class="lineno"> 1536<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].parent = pid;<\/div><div class="line"><a name="l01537"><\/a><span class="lineno"> 1537<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].weight = weight;<\/div><div class="line"><a name="l01538"><\/a><span class="lineno"> 1538<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[pid].children.push_back(nid);<\/div><div class="line"><a name="l01539"><\/a><span class="lineno"> 1539<\/span>&#160;      <\/div><div class="line"><a name="l01540"><\/a><span class="lineno"> 1540<\/span>&#160;    <span class="comment">\/\/ Sorry to break template here<\/span><\/div><div class="line"><a name="l01541"><\/a><span class="lineno"> 1541<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].descriptor = boost::dynamic_bitset&lt;&gt;(voc.nodes[i].descriptor, voc.nodes[i].descriptor + 4);<\/div><div class="line"><a name="l01542"><\/a><span class="lineno"> 1542<\/span>&#160;    <\/div><div class="line"><a name="l01543"><\/a><span class="lineno"> 1543<\/span>&#160;    <span class="keywordflow">if<\/span> (i &lt; 5) {<\/div><div class="line"><a name="l01544"><\/a><span class="lineno"> 1544<\/span>&#160;      std::string test;<\/div><div class="line"><a name="l01545"><\/a><span class="lineno"> 1545<\/span>&#160;      boost::to_string(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].descriptor, test);<\/div><div class="line"><a name="l01546"><\/a><span class="lineno"> 1546<\/span>&#160;      <span class="comment">\/\/cout &lt;&lt; &quot;descriptor[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; test &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l01547"><\/a><span class="lineno"> 1547<\/span>&#160;    }<\/div><div class="line"><a name="l01548"><\/a><span class="lineno"> 1548<\/span>&#160;  }<\/div><div class="line"><a name="l01549"><\/a><span class="lineno"> 1549<\/span>&#160;  <\/div><div class="line"><a name="l01550"><\/a><span class="lineno"> 1550<\/span>&#160;  <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01551"><\/a><span class="lineno"> 1551<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.resize(voc.nWords);<\/div><div class="line"><a name="l01552"><\/a><span class="lineno"> 1552<\/span>&#160;<\/div><div class="line"><a name="l01553"><\/a><span class="lineno"> 1553<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; voc.nWords; ++i)<\/div><div class="line"><a name="l01554"><\/a><span class="lineno"> 1554<\/span>&#160;  {<\/div><div class="line"><a name="l01555"><\/a><span class="lineno"> 1555<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> wid = (int)voc.words[i].wordId;<\/div><div class="line"><a name="l01556"><\/a><span class="lineno"> 1556<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (<span class="keywordtype">int<\/span>)voc.words[i].nodeId;<\/div><div class="line"><a name="l01557"><\/a><span class="lineno"> 1557<\/span>&#160;    <\/div><div class="line"><a name="l01558"><\/a><span class="lineno"> 1558<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].word_id = wid;<\/div><div class="line"><a name="l01559"><\/a><span class="lineno"> 1559<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid] = &amp;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid];<\/div><div class="line"><a name="l01560"><\/a><span class="lineno"> 1560<\/span>&#160;  }<\/div><div class="line"><a name="l01561"><\/a><span class="lineno"> 1561<\/span>&#160;}<\/div><div class="line"><a name="l01562"><\/a><span class="lineno"> 1562<\/span>&#160;    <\/div><div class="line"><a name="l01563"><\/a><span class="lineno"> 1563<\/span>&#160;<span class="comment">\/\/ Added by VINS ]]]<\/span><\/div><div class="line"><a name="l01564"><\/a><span class="lineno"> 1564<\/span>&#160;<\/div><div class="line"><a name="l01565"><\/a><span class="lineno"> 1565<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01566"><\/a><span class="lineno"> 1566<\/span>&#160;<\/div><div class="line"><a name="l01572"><\/a><span class="lineno"> 1572<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01573"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#aecdf616fe16d2cf09f521a603b9d43f1"> 1573<\/a><\/span>&#160;std::ostream&amp; <a class="code" href="namespaceDBoW2.html#ac1f00f5484f61d6ab3b1f650955210d8">operator&lt;&lt;<\/a>(std::ostream &amp;os, <\/div><div class="line"><a name="l01574"><\/a><span class="lineno"> 1574<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;<\/a> &amp;voc)<\/div><div class="line"><a name="l01575"><\/a><span class="lineno"> 1575<\/span>&#160;{<\/div><div class="line"><a name="l01576"><\/a><span class="lineno"> 1576<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;Vocabulary: k = &quot;<\/span> &lt;&lt; voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afadb7942a23548903deb4548ca1d6e7d">getBranchingFactor<\/a>() <\/div><div class="line"><a name="l01577"><\/a><span class="lineno"> 1577<\/span>&#160;    &lt;&lt; <span class="stringliteral">&quot;, L = &quot;<\/span> &lt;&lt; voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a60d5e4d240d69042c47473d4c6497e01">getDepthLevels<\/a>()<\/div><div class="line"><a name="l01578"><\/a><span class="lineno"> 1578<\/span>&#160;    &lt;&lt; <span class="stringliteral">&quot;, Weighting = &quot;<\/span>;<\/div><div class="line"><a name="l01579"><\/a><span class="lineno"> 1579<\/span>&#160;<\/div><div class="line"><a name="l01580"><\/a><span class="lineno"> 1580<\/span>&#160;  <span class="keywordflow">switch<\/span>(voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa1b7c6f984353736ecf4a2483b1c1b6b">getWeightingType<\/a>())<\/div><div class="line"><a name="l01581"><\/a><span class="lineno"> 1581<\/span>&#160;  {<\/div><div class="line"><a name="l01582"><\/a><span class="lineno"> 1582<\/span>&#160;    <span class="keywordflow">case<\/span> TF_IDF: os &lt;&lt; <span class="stringliteral">&quot;tf-idf&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01583"><\/a><span class="lineno"> 1583<\/span>&#160;    <span class="keywordflow">case<\/span> TF: os &lt;&lt; <span class="stringliteral">&quot;tf&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01584"><\/a><span class="lineno"> 1584<\/span>&#160;    <span class="keywordflow">case<\/span> IDF: os &lt;&lt; <span class="stringliteral">&quot;idf&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01585"><\/a><span class="lineno"> 1585<\/span>&#160;    <span class="keywordflow">case<\/span> BINARY: os &lt;&lt; <span class="stringliteral">&quot;binary&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01586"><\/a><span class="lineno"> 1586<\/span>&#160;  }<\/div><div class="line"><a name="l01587"><\/a><span class="lineno"> 1587<\/span>&#160;<\/div><div class="line"><a name="l01588"><\/a><span class="lineno"> 1588<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;, Scoring = &quot;<\/span>;<\/div><div class="line"><a name="l01589"><\/a><span class="lineno"> 1589<\/span>&#160;  <span class="keywordflow">switch<\/span>(voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#adca2e844333011cd9341d42be9cec5e3">getScoringType<\/a>())<\/div><div class="line"><a name="l01590"><\/a><span class="lineno"> 1590<\/span>&#160;  {<\/div><div class="line"><a name="l01591"><\/a><span class="lineno"> 1591<\/span>&#160;    <span class="keywordflow">case<\/span> L1_NORM: os &lt;&lt; <span class="stringliteral">&quot;L1-norm&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01592"><\/a><span class="lineno"> 1592<\/span>&#160;    <span class="keywordflow">case<\/span> L2_NORM: os &lt;&lt; <span class="stringliteral">&quot;L2-norm&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01593"><\/a><span class="lineno"> 1593<\/span>&#160;    <span class="keywordflow">case<\/span> CHI_SQUARE: os &lt;&lt; <span class="stringliteral">&quot;Chi square distance&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01594"><\/a><span class="lineno"> 1594<\/span>&#160;    <span class="keywordflow">case<\/span> KL: os &lt;&lt; <span class="stringliteral">&quot;KL-divergence&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01595"><\/a><span class="lineno"> 1595<\/span>&#160;    <span class="keywordflow">case<\/span> BHATTACHARYYA: os &lt;&lt; <span class="stringliteral">&quot;Bhattacharyya coefficient&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01596"><\/a><span class="lineno"> 1596<\/span>&#160;    <span class="keywordflow">case<\/span> DOT_PRODUCT: os &lt;&lt; <span class="stringliteral">&quot;Dot product&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01597"><\/a><span class="lineno"> 1597<\/span>&#160;  }<\/div><div class="line"><a name="l01598"><\/a><span class="lineno"> 1598<\/span>&#160;  <\/div><div class="line"><a name="l01599"><\/a><span class="lineno"> 1599<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;, Number of words = &quot;<\/span> &lt;&lt; voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>();<\/div><div class="line"><a name="l01600"><\/a><span class="lineno"> 1600<\/span>&#160;<\/div><div class="line"><a name="l01601"><\/a><span class="lineno"> 1601<\/span>&#160;  <span class="keywordflow">return<\/span> os;<\/div><div class="line"><a name="l01602"><\/a><span class="lineno"> 1602<\/span>&#160;}<\/div><div class="line"><a name="l01603"><\/a><span class="lineno"> 1603<\/span>&#160;<\/div><div class="line"><a name="l01604"><\/a><span class="lineno"> 1604<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l01605"><\/a><span class="lineno"> 1605<\/span>&#160;<\/div><div class="line"><a name="l01606"><\/a><span class="lineno"> 1606<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDBoW2_1_1TemplatedVocabulary_html_a4988c1ab067de25259115bf9963b02d9"><div class="ttname"><a href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9">DBoW2::TemplatedVocabulary::score<\/a><\/div><div class="ttdeci">double score(const BowVector &amp;a, const BowVector &amp;b) const <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedVocabulary.h:1199<\/div><\/div>$/;"	a
l00001	doc/html/Timestamp_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: Timestamp.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Date: March 2009<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Description: timestamping functions<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_TIMESTAMP__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_TIMESTAMP__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a> {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html">   19<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#a5a8a3cb7f9e0f73bf11fce42688b06c8">   24<\/a><\/span>&#160;  <span class="keyword">enum<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#a5a8a3cb7f9e0f73bf11fce42688b06c8">tOptions<\/a><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  {<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    NONE = 0,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    CURRENT_TIME = 0x1,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    ZERO = 0x2<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  };<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>(<a class="code" href="classDUtils_1_1Timestamp.html#a5a8a3cb7f9e0f73bf11fce42688b06c8">Timestamp::tOptions<\/a> option = NONE);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">virtual<\/span> ~<a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keywordtype">bool<\/span> empty() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">void<\/span> setToCurrentTime();<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#a439bcff577f3ae30e8918897ecb33e76">   61<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#a439bcff577f3ae30e8918897ecb33e76">setTime<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> secs, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> usecs){<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        m_secs = secs;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        m_usecs = usecs;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <\/div><div class="line"><a name="l00071"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#af28ca416f5960805b7a517c11df7d3c6">   71<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#af28ca416f5960805b7a517c11df7d3c6">getTime<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> &amp;secs, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> &amp;usecs)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;      secs = m_secs;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;      usecs = m_usecs;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    }<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">void<\/span> setTime(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;stime);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keywordtype">void<\/span> setTime(<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keywordtype">double<\/span> getFloatTime() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordtype">string<\/span> getStringTime() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keywordtype">double<\/span> operator- (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> plus(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> s, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> us) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;  <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> minus(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> s, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> us) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;  <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>&amp; operator+= (<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;  <\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>&amp; operator-= (<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> operator+ (<span class="keywordtype">double<\/span> s) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> operator- (<span class="keywordtype">double<\/span> s) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&gt; (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&gt;= (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    <span class="keywordtype">bool<\/span> operator== (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&lt; (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&lt;= (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;  <span class="keywordtype">string<\/span> Format(<span class="keywordtype">bool<\/span> machine_friendly = <span class="keyword">false<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">string<\/span> Format(<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00196"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#a88b8dff916bb011ef4142ca5cc655425">  196<\/a><\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#a88b8dff916bb011ef4142ca5cc655425">m_secs<\/a>;   <span class="comment">\/\/ seconds<\/span><\/div><div class="line"><a name="l00198"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#afb8947a2cf3b04919f782f4490ca0935">  198<\/a><\/span>&#160;<span class="comment"><\/span>    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#afb8947a2cf3b04919f782f4490ca0935">m_usecs<\/a>;  <span class="comment">\/\/ microseconds<\/span><\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;};<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;}<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="ttc" id="namespaceDUtils_html"><div class="ttname"><a href="namespaceDUtils.html">DUtils<\/a><\/div><div class="ttdoc">Several utilities for C++ programs. <\/div><div class="ttdef"><b>Definition:<\/b> DException.h:20<\/div><\/div>$/;"	a
l00001	doc/html/Transform_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TRANSFORM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TRANSFORM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Transform.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Transform.html">Transform<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classcamodocal_1_1Transform.html">Transform<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    Transform(<span class="keyword">const<\/span> Eigen::Matrix4d&amp; H);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    Eigen::Quaterniond&amp; rotation(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Quaterniond&amp; rotation(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">double<\/span>* rotationData(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* <span class="keyword">const<\/span> rotationData(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    Eigen::Vector3d&amp; translation(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Vector3d&amp; translation(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">double<\/span>* translationData(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* <span class="keyword">const<\/span> translationData(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    Eigen::Matrix4d toMatrix(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    Eigen::Quaterniond m_q;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Eigen::Vector3d m_t;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;}<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1Transform_html"><div class="ttname"><a href="classcamodocal_1_1Transform.html">camodocal::Transform<\/a><\/div><div class="ttdef"><b>Definition:<\/b> Transform.h:11<\/div><\/div>$/;"	a
l00001	doc/html/__cassert_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2011-2012<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_DETAIL__CASSERT_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DETAIL__CASSERT_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#if defined(__cplusplus)<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;cassert&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/__prefix_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2013<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_LIBRARY_C__PREFIX_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_LIBRARY_C__PREFIX_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/_cassert.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/android_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_ADROID_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_ADROID_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">[heading `BOOST_OS_ANDROID`]<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Android_%28operating_system%29 Android] operating system.<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    [[`__ANDROID__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#define BOOST_OS_ANDROID BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    defined(__ANDROID__) \\<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_ANDROID<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_ANDROID BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#if BOOST_OS_ANDROID<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_ANDROID_AVAILABLE<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define BOOST_OS_ANDROID_NAME &quot;Android&quot;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_ANDROID,BOOST_OS_ANDROID_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/armor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __ARMOR_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __ARMOR_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;tuple&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__info.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>(<span class="keywordtype">int<\/span> type_, cv::RotatedRect armor_, cv::RotatedRect left_=cv::RotatedRect(), cv::RotatedRect right_=cv::RotatedRect())<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  {<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    type = type_;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    armor = armor_;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    left_light = left_;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    right_light = right_;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    score = 0.0f;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  }<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keywordtype">int<\/span> type;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  cv::RotatedRect armor;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  cv::RotatedRect left_light;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  cv::RotatedRect right_light;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  <span class="keywordtype">float<\/span> score;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;};<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__detecter.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;{<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_max_angle;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_min_area;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_lower;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_upper;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_len;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_height;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_gray;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a>();<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  cv::Mat highlight_blue_or_red(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  std::vector&lt;std::vector&lt;cv::Point&gt;&gt; find_contours(<span class="keyword">const<\/span> cv::Mat &amp;binary);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; to_light_rects(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_light, <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_brightness);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; detect_lights(<span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; filter_lights(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thresh_max_angle, <span class="keywordtype">float<\/span> thresh_min_area);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;  std::vector&lt;armor_info&gt; possible_armors(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thres_max_angle, <span class="keywordtype">float<\/span> thres_dis_lower, \\<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;                                                   <span class="keywordtype">float<\/span> thres_dis_upper, <span class="keywordtype">float<\/span> thres_len, <span class="keywordtype">float<\/span> thres_height, <span class="keywordtype">float<\/span> thres_gray, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  std::vector&lt;armor_info&gt; filter_by_features(std::vector&lt;armor_info&gt; &amp;armors);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  std::vector&lt;armor_info&gt; detect(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  <span class="keywordtype">bool<\/span> detect_all(<span class="keyword">const<\/span> cv::Mat &amp;image);<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;  <span class="keywordtype">void<\/span> slect_final_armor(std::vector&lt;armor_info&gt; all_armors);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  <span class="keywordtype">void<\/span> debug_vision();<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  cv::Mat m_common;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;  cv::Mat m_image;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;  cv::Mat m_show;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;  cv::Mat m_gray;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  cv::Mat m_binary_brightness;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  cv::Mat m_binary_color;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;  cv::Mat m_binary_light;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;  std::chrono::system_clock::time_point speed_test_start_begin_time;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;};<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;}<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;}<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">#endif \/\/ !__ARMOR_H__<\/span><\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor.h:14<\/div><\/div>$/;"	a
l00001	doc/html/armor__detect_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __ARMOR_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __ARMOR_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;tuple&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;detect_factory.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__info.html">   15<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>(<span class="keywordtype">int<\/span> type_, cv::RotatedRect armor_, cv::RotatedRect left_=cv::RotatedRect(), cv::RotatedRect right_=cv::RotatedRect())<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  {<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    type = type_;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    armor = armor_;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    left_light = left_;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    right_light = right_;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    score = 0.0f;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>();<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keywordtype">int<\/span> type;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  cv::RotatedRect armor;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  cv::RotatedRect left_light;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  cv::RotatedRect right_light;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="keywordtype">float<\/span> score;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__detecter.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;{<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_max_angle;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_min_area;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_lower;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_upper;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_len;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_height;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_gray;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a>();<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;  cv::Mat highlight_blue_or_red(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  std::vector&lt;std::vector&lt;cv::Point&gt;&gt; find_contours(<span class="keyword">const<\/span> cv::Mat &amp;binary);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; to_light_rects(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_light, <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_brightness);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; detect_lights(<span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; filter_lights(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thresh_max_angle, <span class="keywordtype">float<\/span> thresh_min_area);<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;  std::vector&lt;armor_info&gt; possible_armors(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thres_max_angle, <span class="keywordtype">float<\/span> thres_dis_lower, \\<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;                                                <span class="keywordtype">float<\/span> thres_dis_upper, <span class="keywordtype">float<\/span> thres_len, <span class="keywordtype">float<\/span> thres_height, <span class="keywordtype">float<\/span> thres_gray, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  std::vector&lt;armor_info&gt; filter_by_features(std::vector&lt;armor_info&gt; &amp;armors);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  <span class="keywordtype">bool<\/span> detect(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  <span class="keywordtype">void<\/span> slect_final_armor(std::vector&lt;armor_info&gt; all_armors);<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;  <span class="keywordtype">void<\/span> debug_vision();<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;  cv::Mat m_common;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  cv::Mat m_image;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  cv::Mat m_show;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;  cv::Mat m_gray;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;  cv::Mat m_binary_brightness;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;  cv::Mat m_binary_color;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  cv::Mat m_binary_light;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;  std::chrono::system_clock::time_point speed_test_start_begin_time;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;};<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;}<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;}<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">#endif \/\/ !__ARMOR_H__<\/span><\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor_detect.h:15<\/div><\/div>$/;"	a
l00001	doc/html/armor__detect__node_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;boost\/thread.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;boost\/atomic.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;logical_core\/SetGoal.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/armor_msg.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseStamped.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseWithCovarianceStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;move_base_msgs\/MoveBaseAction.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;vision_param.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;{<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">armor_detect_node<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">armor_detect_node<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    ~<a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">armor_detect_node<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#ac58417b5cb8c05ab5a526ffedddb5e6d">running<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#ad7174eec1f1854a0e156d4ebfb3f0043">if_detected_armor<\/a>();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#ac17cf58f8c4281c477b4fee9b619e53a">get_camera_num<\/a>();<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#a4a40e0e980535c48fa552b18fde8afbf">get_armor<\/a>();<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">void<\/span> set_image_points(cv::RotatedRect rect);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html">vision_param<\/a> *param;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">bool<\/span> detected_armor;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor_;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    geometry_msgs::PoseWithCovarianceStamped car_position;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    cv::Mat m_img_buff[2];<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordtype">bool<\/span> forward_back = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    ros::Publisher pub_armor_pos;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    vision_unit::armor_msg armor_pos;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    ros::Publisher pub_goal;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    move_base_msgs::MoveBaseGoal goal;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    move_base_msgs::MoveBaseGoal goal_pose;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    cv::Mat camera_matrix;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    cv::Mat dist_coeffs;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    cv::Mat obj_points;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    cv::Mat img_points;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    std::vector&lt;cv::Point3f&gt; obj_p;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    std::vector&lt;cv::Point2f&gt; img_p;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    cv::Mat rvec;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    cv::Mat tvec;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">double<\/span> ang_lim = 3.0\/180*3.14;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordtype">double<\/span> cam[9] = {839.923052, 0.0,        340.780730,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                     0.0,        837.671081, 261.766523,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                     0.0,        0.0,        1.0       };<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">double<\/span> dist_c[5] = {0.082613, 0.043275, 0.002486, -0.000823, 0.0};<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;};<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;}<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;}<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#endif \/\/ !__THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor_detect.h:15<\/div><\/div>$/;"	a
l00001	doc/html/bsd_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">\/* Special case: OSX will define BSD predefs if the sys\/param.h<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment"> * header is included. We can guard against that, but only if we<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"> * detect OSX first. Hence we will force include OSX detection<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment"> * before doing any BSD detection.<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/macos.h&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD`]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Berkeley_Software_Distribution BSD] operating system.<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">BSD has various branch operating systems possible and each detected<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">individually. This detects the following variations and sets a specific<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">version number macro to match:<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_DRAGONFLY` [@http:\/\/en.wikipedia.org\/wiki\/DragonFly_BSD DragonFly BSD]<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_FREE` [@http:\/\/en.wikipedia.org\/wiki\/Freebsd FreeBSD]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_BSDI` [@http:\/\/en.wikipedia.org\/wiki\/BSD\/OS BSDi BSD\/OS]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_NET` [@http:\/\/en.wikipedia.org\/wiki\/Netbsd NetBSD]<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_OPEN` [@http:\/\/en.wikipedia.org\/wiki\/Openbsd OpenBSD]<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">[note The general `BOOST_OS_BSD` is set in all cases to indicate some form<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">of BSD. If the above variants is detected the corresponding macro is also set.]<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">    [[`BSD`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">    [[`_SYSTYPE_BSD`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">    [[`BSD4_2`] [4.2.0]]<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">    [[`BSD4_3`] [4.3.0]]<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">    [[`BSD4_4`] [4.4.0]]<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">    [[`BSD`] [V.R.0]]<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/bsdi.h&gt;<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/dragonfly.h&gt;<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/free.h&gt;<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/open.h&gt;<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/net.h&gt;<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#ifndef BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">    defined(BSD) || \\<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">    defined(_SYSTYPE_BSD) \\<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#   include &lt;sys\/param.h&gt;<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD4_4)<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER(4,4,0)<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD4_3)<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER(4,3,0)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD4_2)<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER(4,2,0)<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD)<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_PREDEF_MAKE_10_VVRR(BSD)<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD)<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_NAME &quot;BSD&quot;<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/bsdi.h&gt;<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/dragonfly.h&gt;<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/free.h&gt;<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/open.h&gt;<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/net.h&gt;<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD,BOOST_OS_BSD_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/bsdi_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_BSDI_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_BSDI_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_BSDI`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/BSD\/OS BSDi BSD\/OS] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__bsdi__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_BSDI BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">    defined(__bsdi__) \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_BSDI<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_BSDI BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_BSDI<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_BSDI_AVAILABLE<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_BSDI_NAME &quot;BSDi BSD\/OS&quot;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_BSDI,BOOST_OS_BSD_BSDI_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/commCtrl_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMMCTRL_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMMCTRL_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/include\/sysHeaders.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;..\/include\/stdHeaders.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keywordtype">int<\/span> commWrite(<span class="keywordtype">string<\/span> data, <span class="keywordtype">string<\/span> port);<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keywordtype">int<\/span> commRead(<span class="keywordtype">string<\/span>&amp; data, <span class="keywordtype">string<\/span> port);<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">static<\/span> <span class="keywordtype">int<\/span> isOpened = 0;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">static<\/span> <span class="keywordtype">int<\/span> fd;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#endif \/\/ COMMCTRL_H<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/comm__read_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMMREAD_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMMREAD_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;serial_comm\/car_speed.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sys\/types.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;sys\/stat.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;memory&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;math.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;<\/span>      <span class="comment">\/*file control lib*\/<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;termios.h&gt;<\/span>    <span class="comment">\/*PPSIX terminal*\/<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span>      <span class="comment">\/*error information*\/<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span>     <span class="comment">\/*standard lib*\/<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span>     <span class="comment">\/*Unix standard func*\/<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;serial_param.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">namespace <\/span>serial_mul<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;{<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="structautocar_1_1serial__mul_1_1____attribute____.html">   25<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;{<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  uint8_t sof;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  int16_t angle;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  int16_t v_w;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  int16_t v_x;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  int16_t v_y;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  uint8_t flag;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  uint32_t x;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  uint32_t y;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  uint32_t z;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  uint32_t compass;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  uint8_t data_status;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keywordtype">float<\/span> pan_title_yaw;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">float<\/span> pan_title_pitch;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  uint8_t end;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;}<a class="code" href="structautocar_1_1serial__mul_1_1____attribute____.html">__attribute__<\/a>((packed)) data_t;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classautocar_1_1serial__mul_1_1comm__read.html">   46<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html">comm_read<\/a>{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html">comm_read<\/a>();<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  ~<a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html">comm_read<\/a>();<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html#a9c8c604663274eb36fecd0f3f363f038">read_setup<\/a>();<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html#a1fbcf3b3bea948725c13ba193fd015b6">read_init<\/a>();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html#ab9f0857bbd2a963168306e81f91a9133">read_data<\/a>();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  serial_comm::car_speed pubData;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html">serial_param<\/a> read_param;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;  std::string dev;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;  <span class="keywordtype">int<\/span> serial_baudrate;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  <span class="keywordtype">int<\/span> fd;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  <span class="keywordtype">int<\/span> data_len;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  int16_t ForeBack, LeftRight, Y, R;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  <span class="keywordtype">double<\/span> YawAngle, Rotate;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;  int16_t init_yaw;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  data_t data;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;};<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;}<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;}<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#endif \/\/ COMMREAD_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/comm__write_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMM_WRITE_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMM_WRITE_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;math.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/String.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;<\/span>      <span class="comment">\/*file control lib*\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;termios.h&gt;<\/span>    <span class="comment">\/*PPSIX terminal*\/<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span>      <span class="comment">\/*error information*\/<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span>     <span class="comment">\/*standard lib*\/<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span>     <span class="comment">\/*Unix standard func*\/<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;serial_param.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span>serial_mul<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;{<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    uint8_t sof;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    int16_t auto_vx;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    int16_t auto_vy;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    int16_t auto_vw;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    uint8_t vision_data_status;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    int16_t vision_data_x;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    int16_t vision_data_y;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    int16_t vision_data_w;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    int16_t vision_data_h;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    uint8_t end;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;}__attribute__((packed)) data_t;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classautocar_1_1serial__mul_1_1comm__write.html">   35<\/a><\/span>&#160;class <a class="code" href="classautocar_1_1serial__mul_1_1comm__write.html">comm_write<\/a>{<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  comm_write();<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  ~comm_write();<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keywordtype">bool<\/span> write_setup();<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <span class="keywordtype">void<\/span> write_data(data_t data_to_write);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html">serial_param<\/a> write_param;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  data_t data;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  std::string dev;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <span class="keywordtype">int<\/span> serial_baudrate;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;  std_msgs::String pubData;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keywordtype">int<\/span> fd;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keywordtype">int<\/span> data_len;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;};<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;}<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;}<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#endif \/\/ COMM_WRITE_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/cv__bridge_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*********************************************************************<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">* Software License Agreement (BSD License)<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">*  Copyright (c) 2011, Willow Garage, Inc,<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">*  Copyright (c) 2015, Tal Regev.<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*  All rights reserved.<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment">*  Redistribution and use in source and binary forms, with or without<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment">*  modification, are permitted provided that the following conditions<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">*  are met:<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">*   * Redistributions of source code must retain the above copyright<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">*     notice, this list of conditions and the following disclaimer.<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">*   * Redistributions in binary form must reproduce the above<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">*     copyright notice, this list of conditions and the following<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">*     disclaimer in the documentation and\/or other materials provided<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">*     with the distribution.<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">*   * Neither the name of the Willow Garage nor the names of its<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">*     contributors may be used to endorse or promote products derived<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">*     from this software without specific prior written permission.<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">*  &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">*  POSSIBILITY OF SUCH DAMAGE.<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">*********************************************************************\/<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#ifndef CV_BRIDGE_CV_BRIDGE_H<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#define CV_BRIDGE_CV_BRIDGE_H<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/Image.h&gt;<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/CompressedImage.h&gt;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/image_encodings.h&gt;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#include &lt;ros\/static_assert.h&gt;<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/imgproc\/imgproc.hpp&gt;<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/imgproc\/types_c.h&gt;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecv__bridge.html">cv_bridge<\/a> {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1Exception.html">   50<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcv__bridge_1_1Exception.html">Exception<\/a> : <span class="keyword">public<\/span> std::runtime_error<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;{<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;  <a class="code" href="classcv__bridge_1_1Exception.html">Exception<\/a>(<span class="keyword">const<\/span> std::string&amp; description) : std::runtime_error(description) {}<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage&gt; CvImagePtr;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage const&gt; CvImageConstPtr;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/\/from: http:\/\/docs.opencv.org\/modules\/highgui\/doc\/reading_and_writing_images_and_video.html#Mat imread(const string&amp; filename, int flags)<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    BMP, DIB,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    JPG, JPEG, JPE,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    JP2,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    PNG,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    PBM, PGM, PPM,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    SR, RAS,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    TIFF, TIF,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;} Format;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html">   76<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;{<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00079"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">   79<\/a><\/span>&#160;  std_msgs::Header <a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>; <\/div><div class="line"><a name="l00080"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">   80<\/a><\/span>&#160;  std::string <a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>;    <\/div><div class="line"><a name="l00081"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">   81<\/a><\/span>&#160;  cv::Mat <a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>;           <\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#adcb3774384cd81c101f3c9beedede4e7">   86<\/a><\/span>&#160;  <a class="code" href="classcv__bridge_1_1CvImage.html#adcb3774384cd81c101f3c9beedede4e7">CvImage<\/a>() {}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#a6dcfaf2291cb7ce7ece6c422d616bd03">   91<\/a><\/span>&#160;  <a class="code" href="classcv__bridge_1_1CvImage.html#a6dcfaf2291cb7ce7ece6c422d616bd03">CvImage<\/a>(<span class="keyword">const<\/span> std_msgs::Header&amp; header, <span class="keyword">const<\/span> std::string&amp; encoding,<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;          <span class="keyword">const<\/span> cv::Mat&amp; image = cv::Mat())<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    : header(header), encoding(encoding), image(image)<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;  {<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;  }<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;  <\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;  sensor_msgs::ImagePtr toImageMsg() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;  sensor_msgs::CompressedImagePtr toCompressedImageMsg(<span class="keyword">const<\/span> Format dst_format = JPG) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;  <span class="keywordtype">void<\/span> toImageMsg(sensor_msgs::Image&amp; ros_image) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;  <span class="keywordtype">void<\/span> toCompressedImageMsg(sensor_msgs::CompressedImage&amp; ros_image, <span class="keyword">const<\/span> Format dst_format = JPG) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;  <span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage&gt; Ptr;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  <span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage const&gt; ConstPtr;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;  boost::shared_ptr&lt;void const&gt; tracked_object_; <span class="comment">\/\/ for sharing ownership<\/span><\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;  <span class="keyword">friend<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;  CvImageConstPtr toCvShare(<span class="keyword">const<\/span> sensor_msgs::Image&amp; source,<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                            <span class="keyword">const<\/span> boost::shared_ptr&lt;void const&gt;&amp; tracked_object,<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                            <span class="keyword">const<\/span> std::string&amp; encoding);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;};<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::ImageConstPtr&amp; source,<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::CompressedImageConstPtr&amp; source,<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::Image&amp; source,<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::CompressedImage&amp; source,<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;CvImageConstPtr toCvShare(<span class="keyword">const<\/span> sensor_msgs::ImageConstPtr&amp; source,<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;                          <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;CvImageConstPtr toCvShare(<span class="keyword">const<\/span> sensor_msgs::Image&amp; source,<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;                          <span class="keyword">const<\/span> boost::shared_ptr&lt;void const&gt;&amp; tracked_object,<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;                          <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;CvImagePtr cvtColor(<span class="keyword">const<\/span> CvImageConstPtr&amp; source,<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding);<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno"><a class="line" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">  250<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a> {<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a>() :<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    do_dynamic_scaling(<span class="keyword">false<\/span>),<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;    min_image_value(0.0),<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;    max_image_value(0.0),<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;    colormap(-1),<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;    bg_label(-1) {}<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <span class="keywordtype">bool<\/span> do_dynamic_scaling;<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;  <span class="keywordtype">double<\/span> min_image_value;<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;  <span class="keywordtype">double<\/span> max_image_value;<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  <span class="keywordtype">int<\/span> colormap;<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;  <span class="keywordtype">int<\/span> bg_label;<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;};<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;CvImageConstPtr cvtColorForDisplay(<span class="keyword">const<\/span> CvImageConstPtr&amp; source,<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;                                   <span class="keyword">const<\/span> std::string&amp; encoding = std::string(),<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;                                   <span class="keyword">const<\/span> <a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a> options = <a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a>());<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<span class="keywordtype">int<\/span> getCvType(<span class="keyword">const<\/span> std::string&amp; encoding);<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;} <span class="comment">\/\/ namespace cv_bridge<\/span><\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<span class="comment">\/\/ CvImage as a first class message type<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<span class="comment">\/\/ The rest of this file hooks into the roscpp serialization API to make CvImage<\/span><\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="comment">\/\/ a first-class message type you can publish and subscribe to directly.<\/span><\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<span class="comment">\/\/ Unfortunately this doesn&#39;t yet work with image_transport, so don&#39;t rewrite all<\/span><\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<span class="comment">\/\/ your callbacks to use CvImage! It might be useful for specific tasks, like<\/span><\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<span class="comment">\/\/ processing bag files.<\/span><\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<span class="keyword">namespace <\/span>ros {<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<span class="keyword">namespace <\/span>message_traits {<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>MD5Sum&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;{<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value() { <span class="keywordflow">return<\/span> MD5Sum&lt;sensor_msgs::Image&gt;::value(); }<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp;) { <span class="keywordflow">return<\/span> value(); }<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint64_t static_value1 = MD5Sum&lt;sensor_msgs::Image&gt;::static_value1;<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint64_t static_value2 = MD5Sum&lt;sensor_msgs::Image&gt;::static_value2;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;  <\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;  <span class="comment">\/\/ If the definition of sensor_msgs\/Image changes, we&#39;ll get a compile error here.<\/span><\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;  ROS_STATIC_ASSERT(MD5Sum&lt;sensor_msgs::Image&gt;::static_value1 == 0x060021388200f6f0ULL);<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;  ROS_STATIC_ASSERT(MD5Sum&lt;sensor_msgs::Image&gt;::static_value2 == 0xf447d0fcd9c64743ULL);<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;};<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>DataType&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;{<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value() { <span class="keywordflow">return<\/span> DataType&lt;sensor_msgs::Image&gt;::value(); }<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp;) { <span class="keywordflow">return<\/span> value(); }<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;};<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>Definition&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;{<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value() { <span class="keywordflow">return<\/span> Definition&lt;sensor_msgs::Image&gt;::value(); }<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp;) { <span class="keywordflow">return<\/span> value(); }<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;};<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>HasHeader&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt; : TrueType {};<\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;} <span class="comment">\/\/ namespace ros::message_traits<\/span><\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<span class="keyword">namespace <\/span>serialization {<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>Serializer&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;{<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;  <\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Stream&gt;<\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> write(Stream&amp; stream, <span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;  {<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>);<\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    stream.next((uint32_t)m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.rows); <span class="comment">\/\/ height<\/span><\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    stream.next((uint32_t)m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.cols); <span class="comment">\/\/ width<\/span><\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>);<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    uint8_t is_bigendian = 0;<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    stream.next(is_bigendian);<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;    stream.next((uint32_t)m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.step);<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;    <span class="keywordtype">size_t<\/span> data_size = m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.step*m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.rows;<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;    stream.next((uint32_t)data_size);<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;    <span class="keywordflow">if<\/span> (data_size &gt; 0)<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;      memcpy(stream.advance(data_size), m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.data, data_size);<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;  }<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Stream&gt;<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> read(Stream&amp; stream, <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;  {<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>);<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;    uint32_t height, width;<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;    stream.next(height);<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;    stream.next(width);<\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>);<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;    uint8_t is_bigendian;<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;    stream.next(is_bigendian);<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;    uint32_t step, data_size;<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;    stream.next(step);<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;    stream.next(data_size);<\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;    <span class="keywordtype">int<\/span> type = cv_bridge::getCvType(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>);<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;    <span class="comment">\/\/ Construct matrix pointing to the stream data, then copy it to m.image<\/span><\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;    cv::Mat tmp((<span class="keywordtype">int<\/span>)height, (<span class="keywordtype">int<\/span>)width, type, stream.advance(data_size), (size_t)step);<\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;    tmp.copyTo(m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>);<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;  }<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> uint32_t serializedLength(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;  {<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    <span class="keywordtype">size_t<\/span> data_size = m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.step*m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.rows;<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;    <span class="keywordflow">return<\/span> serializationLength(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>) + serializationLength(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>) + 17 + data_size;<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;  }<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;};<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;} <span class="comment">\/\/ namespace ros::serialization<\/span><\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;<span class="keyword">namespace <\/span>message_operations {<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>Printer&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;{<\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Stream&gt;<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> stream(Stream&amp; s, <span class="keyword">const<\/span> std::string&amp; indent, <span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;  {<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;  }<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;};<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;} <span class="comment">\/\/ namespace ros::message_operations<\/span><\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;} <span class="comment">\/\/ namespace ros<\/span><\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecv__bridge.html">cv_bridge<\/a> {<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="keyword">inline<\/span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, <span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;{<\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;  ros::message_operations::Printer&lt;CvImage&gt;::stream(s, <span class="stringliteral">&quot;&quot;<\/span>, m);<\/div><div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;  <span class="keywordflow">return<\/span> s;<\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;}<\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;<\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;} <span class="comment">\/\/ namespace cv_bridge<\/span><\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;<\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;<\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcv__bridge_1_1Exception_html"><div class="ttname"><a href="classcv__bridge_1_1Exception.html">cv_bridge::Exception<\/a><\/div><div class="ttdef"><b>Definition:<\/b> cv_bridge.h:50<\/div><\/div>$/;"	a
l00001	doc/html/demoDetector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef __DEMO_DETECTOR__<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define __DEMO_DETECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">\/\/ OpenCV<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/cv.h&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/highgui.h&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">\/\/ DLoopDetector and DBoW2<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/DBoW2.h&quot;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;DLoopDetector.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">\/\/for time<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;cctype&gt;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#include &lt;string.h&gt;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;time.h&gt;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;dirent.h&quot;<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="classFeatureExtractor.html">   45<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeatureExtractor.html">FeatureExtractor<\/a><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> operator()(<span class="keyword">const<\/span> cv::Mat &amp;im, <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; window_pts,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    vector&lt;cv::KeyPoint&gt; &amp;keys, vector&lt;TDescriptor&gt; &amp;descriptors) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;};<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="comment">\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html">   65<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classdemoDetector.html">demoDetector<\/a><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;{<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  <a class="code" href="classdemoDetector.html">demoDetector<\/a>(<span class="keyword">const<\/span> std::string &amp;vocfile, <span class="keywordtype">int<\/span> width, <span class="keywordtype">int<\/span> height);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;  ~<a class="code" href="classdemoDetector.html">demoDetector<\/a>(){}<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;  <span class="keywordtype">void<\/span> initCameraModel(<span class="keyword">const<\/span> std::string &amp;calib_file);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;  <span class="keywordtype">bool<\/span> run(<span class="keyword">const<\/span> std::string &amp;name,<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;           <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;           <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;           std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;           std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;           <span class="keywordtype">int<\/span> &amp;old_index);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;  <span class="keywordtype">void<\/span> eraseIndex(std::vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;  <span class="comment">\/*Data*\/<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;  std::string m_vocfile;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;  <span class="keywordtype">int<\/span> m_width;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;  <span class="keywordtype">int<\/span> m_height;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;  <span class="keyword">typename<\/span> TDetector::Parameters params;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  TVocabulary voc;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;  TDetector detector;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  <span class="keywordtype">void<\/span> readPoseFile(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename, std::vector&lt;double&gt; &amp;xs, <\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    std::vector&lt;double&gt; &amp;ys) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;  <span class="comment">\/\/std::string m_imagedir;<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;  <span class="comment">\/\/std::string m_posefile;<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;};<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<a class="code" href="classdemoDetector.html#a2d5237b35c6f3081c633941e2498fbd8">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::demoDetector<\/a><\/div><div class="line"><a name="l00124"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html#a2d5237b35c6f3081c633941e2498fbd8">  124<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;vocfile, <span class="keywordtype">int<\/span> width, <span class="keywordtype">int<\/span> height)<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;  : m_vocfile(vocfile), m_width(width), m_height(height),<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    params(height, width), voc(vocfile), detector(voc, params)<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;{<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="comment">\/\/params.use_nss = true; \/\/ use normalized similarity score instead of raw score<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="comment">\/\/params.alpha = 0.3; \/\/ nss threshold<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="comment">\/\/params.k = 1; \/\/ a loop must be consistent with 1 previous matches<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="comment">\/\/params.geom_check = GEOM_FLANN; \/\/ use direct index for geometrical checking<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="comment">\/\/params.di_levels = 2; \/\/ use two direct index levels<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <span class="comment">\/\/printf(&quot;load vocfile %s finish\\n&quot;, vocfile);<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="comment">\/\/printf(&quot;loop image size width: %d height: %d\\n&quot;, params.image_cols,params.image_rows);<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;}<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classdemoDetector.html">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::initCameraModel<\/a><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;calib_file)<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;{<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    detector.initCameraModel(calib_file);<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;}<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classdemoDetector.html">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::eraseIndex<\/a><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;(std::vector&lt;int&gt; &amp;erase_index)<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;{<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    detector.eraseIndex(erase_index);<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;}<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classdemoDetector.html#a5ceb5319abb4e88181bff6cb4260c72f">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::run<\/a><\/div><div class="line"><a name="l00159"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html#a5ceb5319abb4e88181bff6cb4260c72f">  159<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;name, <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;   <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;   std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;   std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;   <span class="keywordtype">int<\/span> &amp;old_index)<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;{  <\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;  <span class="keywordtype">int<\/span> count = 0;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a> result;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;  detector.detectLoop(keys, descriptors, result, cur_pts, old_pts); <\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    <\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;  <span class="keywordflow">if<\/span>(result.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">detection<\/a>())<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;  {<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;      <span class="comment">\/\/cout &lt;&lt; &quot;- loop found with image &quot; &lt;&lt; result.match &lt;&lt; &quot;!&quot;<\/span><\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;      <span class="comment">\/\/  &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;      ++count;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;      old_index = result.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a>;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;  }<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;  {<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;      <span class="comment">\/\/cout &lt;&lt; &quot;- No loop: &quot;;<\/span><\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;      <span class="keywordflow">switch<\/span>(result.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a>)<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;      {<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">CLOSE_MATCHES_ONLY<\/a>:<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;All the images in the database are very recent&quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;          <\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">NO_DB_RESULTS<\/a>:<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;There are no matches against the database (few features in&quot;<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;          <span class="comment">\/\/  &quot; the image?)&quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;          <\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">LOW_NSS_FACTOR<\/a>:<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;Little overlap between this image and the previous one&quot;<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;            <\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">LOW_SCORES<\/a>:<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;No match reaches the score threshold (alpha: &quot; &lt;&lt;<\/span><\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;          <span class="comment">\/\/  params.alpha &lt;&lt; &quot;)&quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;          <\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">NO_GROUPS<\/a>:<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;Not enough close matches to create groups. &quot;<\/span><\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; &quot;Best candidate: &quot; &lt;&lt; result.match &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;          <\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">NO_TEMPORAL_CONSISTENCY<\/a>:<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;No temporal consistency (k: &quot; &lt;&lt; params.k &lt;&lt; &quot;). &quot;<\/span><\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; &quot;Best candidate: &quot; &lt;&lt; result.match &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;          <\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">NO_GEOMETRICAL_CONSISTENCY<\/a>:<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;No geometrical consistency. Best candidate: &quot; <\/span><\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; result.match &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;          <\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;        <span class="keywordflow">default<\/span>:<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;      }<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;  }<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;}<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classdemoDetector.html#a3a4eb4f48ebc421c4f76c813b46b0b21">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::readPoseFile<\/a><\/div><div class="line"><a name="l00229"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html#a3a4eb4f48ebc421c4f76c813b46b0b21">  229<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename, std::vector&lt;double&gt; &amp;xs, std::vector&lt;double&gt; &amp;ys)<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;  <span class="keyword">const<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;{<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;  xs.clear();<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;  ys.clear();<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;  <\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;  fstream f(filename, ios::in);<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <span class="keywordtype">string<\/span> s;<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;  <span class="keywordtype">double<\/span> ts, x, y, t;<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;  <span class="keywordflow">while<\/span>(!f.eof())<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;  {<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    getline(f, s);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;    <span class="keywordflow">if<\/span>(!f.eof() &amp;&amp; !s.empty())<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    {<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;      sscanf(s.c_str(), <span class="stringliteral">&quot;%lf, %lf, %lf, %lf&quot;<\/span>, &amp;ts, &amp;x, &amp;y, &amp;t);<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;      xs.push_back(x);<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;      ys.push_back(y);<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    }<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;  }<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  f.close();<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;}<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<\/div><div class="ttc" id="classdemoDetector_html_a5ceb5319abb4e88181bff6cb4260c72f"><div class="ttname"><a href="classdemoDetector.html#a5ceb5319abb4e88181bff6cb4260c72f">demoDetector::run<\/a><\/div><div class="ttdeci">bool run(const std::string &amp;name, const std::vector&lt; cv::KeyPoint &gt; &amp;keys, const std::vector&lt; TDescriptor &gt; &amp;descriptors, std::vector&lt; cv::Point2f &gt; &amp;cur_pts, std::vector&lt; cv::Point2f &gt; &amp;old_pts, int &amp;old_index)<\/div><div class="ttdef"><b>Definition:<\/b> demoDetector.h:159<\/div><\/div>$/;"	a
l00001	doc/html/detect__factory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef DETECT_FACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define DETECT_FACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;{<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1detect__factory.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> detect(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue) = 0;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <span class="comment">\/\/virtual void get_info() = 0;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;};<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;}<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif \/\/ DETECT_FACTORY_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/dragonfly_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_DRAGONFLY_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_DRAGONFLY_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_DRAGONFLY`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/DragonFly_BSD DragonFly BSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__DragonFly__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_DRAGONFLY BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">    defined(__DragonFly__) \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_DRAGONFLY<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#   if defined(__DragonFly__)<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_DRAGONFLY_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_DRAGONFLY<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_DRAGONFLY_AVAILABLE<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_DRAGONFLY_NAME &quot;DragonFly BSD&quot;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_DRAGONFLY,BOOST_OS_BSD_DRAGONFLY_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/draw_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __DRAW_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __DRAW_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;random&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#define _DEBUG_VISION<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifdef _DEBUG_VISION<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keywordtype">void<\/span> draw_rotated_rect(<span class="keyword">const<\/span> cv::Mat &amp;img, <span class="keyword">const<\/span> cv::RotatedRect &amp;rect, <span class="keyword">const<\/span> cv::Scalar &amp;color, <span class="keywordtype">int<\/span> thickness=1);<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keywordtype">void<\/span> draw_rotated_rects(<span class="keyword">const<\/span> cv::Mat &amp;img, <span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;rects, <span class="keyword">const<\/span> cv::Scalar &amp;color, <span class="keywordtype">int<\/span> thickness=1, <span class="keywordtype">bool<\/span> tab=<span class="keyword">false<\/span>, <span class="keyword">const<\/span> cv::Scalar &amp;text_color=cv::Scalar(100));<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keywordtype">void<\/span> draw_circle(<span class="keyword">const<\/span> cv::Mat &amp;img, <span class="keyword">const<\/span> cv::Point &amp;center, <span class="keywordtype">int<\/span> radius, <span class="keyword">const<\/span> cv::Scalar &amp;color, <span class="keywordtype">int<\/span> thickness=1);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keywordtype">void<\/span> imshowd(<span class="keyword">const<\/span> cv::String &amp;winname, <span class="keyword">const<\/span> cv::Mat &amp;img);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#define draw_rotated_rect(...)<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#define draw_rotated_rects(...)<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#define draw_circle(...)<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#define imshowd(...)<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#endif \/\/ _DEBUG_VISION<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#endif \/\/ !__DRAW_H__<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/endian_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2013-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_ENDIAN_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_ENDIAN_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/library\/c\/gnu.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/macos.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/android.h&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">[heading `BOOST_ENDIAN_*`]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">Detection of endian memory ordering. There are four defined macros<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">in this header that define the various generally possible endian<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">memory orderings:<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_BIG_BYTE`, byte-swapped big-endian.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_BIG_WORD`, word-swapped big-endian.<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_LITTLE_BYTE`, byte-swapped little-endian.<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_LITTLE_WORD`, word-swapped little-endian.<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">The detection is conservative in that it only identifies endianness<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">that it knows for certain. In particular bi-endianness is not<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">indicated as is it not practically possible to determine the<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">endianness from anything but an operating system provided<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">header. And the currently known headers do not define that<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">programatic bi-endianness is available.<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">This implementation is a compilation of various publicly available<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">information and acquired knowledge:<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment"># The indispensable documentation of &quot;Pre-defined Compiler Macros&quot;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">  [@http:\/\/sourceforge.net\/p\/predef\/wiki\/Endianness Endianness].<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"># The various endian specifications available in the<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">  [@http:\/\/wikipedia.org\/ Wikipedia] computer architecture pages.<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"># Generally available searches for headers that define endianness.<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_WORD BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_WORD BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">\/* GNU libc provides a header defining __BYTE_ORDER, or _BYTE_ORDER.<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment"> * And some OSs provide some for of endian header also.<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#   if BOOST_LIB_C_GNU || BOOST_OS_ANDROID<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#       include &lt;endian.h&gt;<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#   else<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#       if BOOST_OS_MACOS<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#           include &lt;machine\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#       else<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#           if BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#               if BOOST_OS_BSD_OPEN<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#                   include &lt;machine\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#               else<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#                   include &lt;sys\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#               endif<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#           endif<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#   if defined(__BYTE_ORDER)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#       if defined(__BIG_ENDIAN) &amp;&amp; (__BYTE_ORDER == __BIG_ENDIAN)<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#       if defined(__LITTLE_ENDIAN) &amp;&amp; (__BYTE_ORDER == __LITTLE_ENDIAN)<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#       if defined(__PDP_ENDIAN) &amp;&amp; (__BYTE_ORDER == __PDP_ENDIAN)<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_WORD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#   if !defined(__BYTE_ORDER) &amp;&amp; defined(_BYTE_ORDER)<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#       if defined(_BIG_ENDIAN) &amp;&amp; (_BYTE_ORDER == _BIG_ENDIAN)<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor">#       if defined(_LITTLE_ENDIAN) &amp;&amp; (_BYTE_ORDER == _LITTLE_ENDIAN)<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#       if defined(_PDP_ENDIAN) &amp;&amp; (_BYTE_ORDER == _PDP_ENDIAN)<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_WORD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="comment">\/* Built-in byte-swpped big-endian macros.<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="preprocessor">#   if (defined(__BIG_ENDIAN__) &amp;&amp; !defined(__LITTLE_ENDIAN__)) || \\<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">       (defined(_BIG_ENDIAN) &amp;&amp; !defined(_LITTLE_ENDIAN)) || \\<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="preprocessor">        defined(__ARMEB__) || \\<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">        defined(__THUMBEB__) || \\<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="preprocessor">        defined(__AARCH64EB__) || \\<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">        defined(_MIPSEB) || \\<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">        defined(__MIPSEB) || \\<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<span class="preprocessor">        defined(__MIPSEB__)<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="comment">\/* Built-in byte-swpped little-endian macros.<\/span><\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">#   if (defined(__LITTLE_ENDIAN__) &amp;&amp; !defined(__BIG_ENDIAN__)) || \\<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">       (defined(_LITTLE_ENDIAN) &amp;&amp; !defined(_BIG_ENDIAN)) || \\<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">        defined(__ARMEL__) || \\<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">        defined(__THUMBEL__) || \\<\/span><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">        defined(__AARCH64EL__) || \\<\/span><\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">        defined(_MIPSEL) || \\<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">        defined(__MIPSEL) || \\<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">        defined(__MIPSEL__)<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="comment">\/* Some architectures are strictly one endianess (as opposed<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="comment"> * the current common bi-endianess).<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/architecture.h&gt;<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#   if BOOST_ARCH_M68K || \\<\/span><\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_PARISC || \\<\/span><\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_SPARC || \\<\/span><\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_SYS370 || \\<\/span><\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_SYS390 || \\<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_Z<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor">#   if BOOST_ARCH_AMD64 || \\<\/span><\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_IA64 || \\<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_X86 || \\<\/span><\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_BLACKFIN<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="comment">\/* Windows on ARM, if not otherwise detected\/specified, is always<\/span><\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="comment"> * byte-swaped little-endian.<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor">#   if BOOST_ARCH_ARM<\/span><\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">#       include &lt;boost\/predef\/os\/windows.h&gt;<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="preprocessor">#       if BOOST_OS_WINDOWS<\/span><\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_BIG_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_BIG_WORD<\/span><\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_BIG_WORD_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_LITTLE_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_LITTLE_WORD_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_BYTE_NAME &quot;Byte-Swapped Big-Endian&quot;<\/span><\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_WORD_NAME &quot;Word-Swapped Big-Endian&quot;<\/span><\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_BYTE_NAME &quot;Byte-Swapped Little-Endian&quot;<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_WORD_NAME &quot;Word-Swapped Little-Endian&quot;<\/span><\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_BIG_BYTE,BOOST_ENDIAN_BIG_BYTE_NAME)<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_BIG_WORD,BOOST_ENDIAN_BIG_WORD_NAME)<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_LITTLE_BYTE,BOOST_ENDIAN_LITTLE_BYTE_NAME)<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_LITTLE_WORD,BOOST_ENDIAN_LITTLE_WORD_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/endian__compat_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2013<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_DETAIL_ENDIAN_COMPAT_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DETAIL_ENDIAN_COMPAT_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/other\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#   define BOOST_BIG_ENDIAN<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#   define BOOST_BYTE_ORDER 4321<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#   define BOOST_LITTLE_ENDIAN<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#   define BOOST_BYTE_ORDER 1234<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#   define BOOST_PDP_ENDIAN<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#   define BOOST_BYTE_ORDER 2134<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/estimator_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;parameters.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;feature_manager.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;initial\/solve_5pts.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;initial\/initial_sfm.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;initial\/initial_alignment.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;initial\/initial_ex_rotation.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Header.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Float32.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;factor\/imu_factor.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;factor\/pose_local_parameterization.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;factor\/projection_factor.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;factor\/marginalization_factor.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;thread&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &lt;pthread.h&gt;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &lt;syscall.h&gt;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &lt;sys\/types.h&gt;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno"><a class="line" href="structRetriveData.html">   28<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structRetriveData.html">RetriveData<\/a><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;{<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="comment">\/* data *\/<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">int<\/span> old_index;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">int<\/span> cur_index;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keywordtype">double<\/span> header;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    Vector3d P_old;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    Quaterniond Q_old;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    Vector3d P_cur;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    Quaterniond Q_cur;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    vector&lt;cv::Point2f&gt; measurements;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    vector&lt;int&gt; features_ids; <\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">bool<\/span> use;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Vector3d relative_t;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    Quaterniond relative_q;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">double<\/span> relative_yaw;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">double<\/span> loop_pose[7];<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;};<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classEstimator.html">   47<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEstimator.html">Estimator<\/a><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;{<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <a class="code" href="classEstimator.html">Estimator<\/a>();<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">void<\/span> setParameter();<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="comment">\/\/ interface<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keywordtype">void<\/span> processIMU(<span class="keywordtype">double<\/span> t, <span class="keyword">const<\/span> Vector3d &amp;linear_acceleration, <span class="keyword">const<\/span> Vector3d &amp;angular_velocity);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> processImage(<span class="keyword">const<\/span> map&lt;<span class="keywordtype">int<\/span>, vector&lt;pair&lt;int, Vector3d&gt;&gt;&gt; &amp;image, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="comment">\/\/ internal<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordtype">void<\/span> clearState();<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">bool<\/span> initialStructure();<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">bool<\/span> visualInitialAlign();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordtype">bool<\/span> relativePose(Matrix3d &amp;relative_R, Vector3d &amp;relative_T, <span class="keywordtype">int<\/span> &amp;l);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">void<\/span> slideWindow();<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keywordtype">void<\/span> solveOdometry();<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">void<\/span> slideWindowNew();<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keywordtype">void<\/span> slideWindowOld();<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">void<\/span> optimization();<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keywordtype">void<\/span> vector2double();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordtype">void<\/span> double2vector();<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">bool<\/span> failureDetection();<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keyword">enum<\/span> SolverFlag<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    {<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        INITIAL,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        NON_LINEAR<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    };<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keyword">enum<\/span> MarginalizationFlag<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    {<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        MARGIN_OLD = 0,<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        MARGIN_SECOND_NEW = 1<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    };<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    SolverFlag solver_flag;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    MarginalizationFlag  marginalization_flag;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    Vector3d g;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    MatrixXd Ap[2], backup_A;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    VectorXd bp[2], backup_b;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    Matrix3d ric[NUM_OF_CAM];<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    Vector3d tic[NUM_OF_CAM];<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    Vector3d Ps[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    Vector3d Vs[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    Matrix3d Rs[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    Vector3d Bas[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    Vector3d Bgs[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    Matrix3d back_R0, last_R, last_R0;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    Vector3d back_P0, last_P, last_P0;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    std_msgs::Header Headers[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a> *pre_integrations[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    Vector3d acc_0, gyr_0;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    vector&lt;double&gt; dt_buf[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    vector&lt;Vector3d&gt; linear_acceleration_buf[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    vector&lt;Vector3d&gt; angular_velocity_buf[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">int<\/span> frame_count;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordtype">int<\/span> sum_of_outlier, sum_of_back, sum_of_front, sum_of_invalid;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <a class="code" href="classFeatureManager.html">FeatureManager<\/a> f_manager;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <a class="code" href="classMotionEstimator.html">MotionEstimator<\/a> m_estimator;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <a class="code" href="classInitialEXRotation.html">InitialEXRotation<\/a> initial_ex_rotation;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordtype">bool<\/span> first_imu;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keywordtype">bool<\/span> is_valid, is_key;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">bool<\/span> failure_occur;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    vector&lt;Vector3d&gt; point_cloud;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    vector&lt;Vector3d&gt; margin_cloud;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    vector&lt;Vector3d&gt; key_poses;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordtype">double<\/span> initial_timestamp;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="keywordtype">double<\/span> para_Pose[WINDOW_SIZE + 1][SIZE_POSE];<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keywordtype">double<\/span> para_SpeedBias[WINDOW_SIZE + 1][SIZE_SPEEDBIAS];<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keywordtype">double<\/span> para_Feature[NUM_OF_F][SIZE_FEATURE];<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keywordtype">double<\/span> para_Ex_Pose[NUM_OF_CAM][SIZE_POSE];<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">double<\/span> para_Retrive_Pose[SIZE_POSE];<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <a class="code" href="structRetriveData.html">RetriveData<\/a> retrive_pose_data, front_pose;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">int<\/span> loop_window_index;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a> *last_marginalization_info;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    vector&lt;double *&gt; last_marginalization_parameter_blocks;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    map&lt;double, ImageFrame&gt; all_image_frame;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a> *tmp_pre_integration;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;};<\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	doc/html/feature__manager_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef FEATURE_MANAGER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define FEATURE_MANAGER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;ros\/assert.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;parameters.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classFeaturePerFrame.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeaturePerFrame.html">FeaturePerFrame<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <a class="code" href="classFeaturePerFrame.html">FeaturePerFrame<\/a>(<span class="keyword">const<\/span> Vector3d &amp;_point)<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        z = _point(2);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        point = _point \/ z;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    Vector3d point;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">double<\/span> z;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">bool<\/span> is_used;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">double<\/span> parallax;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    MatrixXd A;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    VectorXd b;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">double<\/span> dep_gradient;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classFeaturePerId.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeaturePerId.html">FeaturePerId<\/a><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;{<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> feature_id;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">int<\/span> start_frame;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    vector&lt;FeaturePerFrame&gt; feature_per_frame;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keywordtype">int<\/span> used_num;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">bool<\/span> is_outlier;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">bool<\/span> is_margin;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">double<\/span> estimated_depth;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">int<\/span> solve_flag; <span class="comment">\/\/ 0 haven&#39;t solve yet; 1 solve succ; 2 solve fail;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    Vector3d gt_p;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <a class="code" href="classFeaturePerId.html">FeaturePerId<\/a>(<span class="keywordtype">int<\/span> _feature_id, <span class="keywordtype">int<\/span> _start_frame)<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        : feature_id(_feature_id), start_frame(_start_frame),<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;          used_num(0), estimated_depth(-1.0), solve_flag(0)<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    {<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    }<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">int<\/span> endFrame();<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;};<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="classFeatureManager.html">   59<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeatureManager.html">FeatureManager<\/a><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;{<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <a class="code" href="classFeatureManager.html">FeatureManager<\/a>(Matrix3d _Rs[]);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keywordtype">void<\/span> setRic(Matrix3d _ric[]);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keywordtype">void<\/span> clearState();<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keywordtype">int<\/span> getFeatureCount();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">bool<\/span> addFeatureCheckParallax(<span class="keywordtype">int<\/span> frame_count, <span class="keyword">const<\/span> map&lt;<span class="keywordtype">int<\/span>, vector&lt;pair&lt;int, Vector3d&gt;&gt;&gt; &amp;image);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordtype">void<\/span> debugShow();<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; getCorresponding(<span class="keywordtype">int<\/span> frame_count_l, <span class="keywordtype">int<\/span> frame_count_r);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="comment">\/\/void updateDepth(const VectorXd &amp;x);<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="keywordtype">void<\/span> setDepth(<span class="keyword">const<\/span> VectorXd &amp;x);<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">void<\/span> removeFailures();<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">void<\/span> clearDepth(<span class="keyword">const<\/span> VectorXd &amp;x);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    VectorXd getDepthVector();<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">void<\/span> triangulate(Vector3d Ps[], Vector3d tic[], Matrix3d ric[]);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> removeBackShiftDepth(Eigen::Matrix3d marg_R, Eigen::Vector3d marg_P, Eigen::Matrix3d new_R, Eigen::Vector3d new_P);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">void<\/span> removeBack();<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keywordtype">void<\/span> removeFront(<span class="keywordtype">int<\/span> frame_count);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keywordtype">void<\/span> removeOutlier();<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    list&lt;FeaturePerId&gt; feature;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordtype">int<\/span> last_track_num;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">double<\/span> compensatedParallax2(<span class="keyword">const<\/span> <a class="code" href="classFeaturePerId.html">FeaturePerId<\/a> &amp;it_per_id, <span class="keywordtype">int<\/span> frame_count);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keyword">const<\/span> Matrix3d *Rs;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    Matrix3d ric[NUM_OF_CAM];<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;};<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceEigen_html"><div class="ttname"><a href="namespaceEigen.html">Eigen<\/a><\/div><\/div>$/;"	a
l00001	doc/html/feature__tracker_2src_2parameters_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/highgui\/highgui.hpp&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> ROW;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> COL;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> FOCAL_LENGTH;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_OF_CAM = 1;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">extern<\/span> std::string IMAGE_TOPIC;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">extern<\/span> std::string IMU_TOPIC;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">extern<\/span> std::string FISHEYE_MASK;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">extern<\/span> std::vector&lt;std::string&gt; CAM_NAMES;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> MAX_CNT;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> MIN_DIST;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> WINDOW_SIZE;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> FREQ;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> F_THRESHOLD;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> SHOW_TRACK;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> STEREO_TRACK;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> EQUALIZE;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> FISHEYE;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keywordtype">void<\/span> readParameters(ros::NodeHandle &amp;n);<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/feature__tracker_2src_2tic__toc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno"><a class="line" href="classTicToc.html">    7<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTicToc.html">TicToc<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <a class="code" href="classTicToc.html">TicToc<\/a>()<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;        tic();<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    }<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">void<\/span> tic()<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        start = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">double<\/span> toc()<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    {<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        end = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        std::chrono::duration&lt;double&gt; elapsed_seconds = end - start;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordflow">return<\/span> elapsed_seconds.count() * 1000;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::chrono::time_point&lt;std::chrono::system_clock&gt; start, end;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="ttc" id="classTicToc_html"><div class="ttname"><a href="classTicToc.html">TicToc<\/a><\/div><div class="ttdef"><b>Definition:<\/b> tic_toc.h:7<\/div><\/div>$/;"	a
l00001	doc/html/feature__tracker_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;execinfo.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;csignal&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CameraFactory.h&quot;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CataCamera.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/EquidistantCamera.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/PinholeCamera.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/ScaramuzzaCamera.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;parameters.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keywordtype">bool<\/span> inBorder(<span class="keyword">const<\/span> cv::Point2f &amp;pt);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keywordtype">void<\/span> reduceVector(vector&lt;cv::Point2f&gt; &amp;v, vector&lt;uchar&gt; status);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keywordtype">void<\/span> reduceVector(vector&lt;int&gt; &amp;v, vector&lt;uchar&gt; status);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="classFeatureTracker.html">   30<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeatureTracker.html">FeatureTracker<\/a><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <a class="code" href="classFeatureTracker.html">FeatureTracker<\/a>();<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">void<\/span> readImage(<span class="keyword">const<\/span> cv::Mat &amp;_img);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">void<\/span> setMask();<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> addPoints();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">bool<\/span> updateID(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">void<\/span> readIntrinsicParameter(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;calib_file);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">void<\/span> showUndistortion(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;name);<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">void<\/span> rejectWithF();<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    vector&lt;cv::Point2f&gt; undistortedPoints();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    cv::Mat mask;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    cv::Mat fisheye_mask;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    cv::Mat prev_img, cur_img, forw_img;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    vector&lt;cv::Point2f&gt; n_pts;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    vector&lt;cv::Point2f&gt; prev_pts, cur_pts, forw_pts;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    vector&lt;int&gt; ids;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    vector&lt;int&gt; track_cnt;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    camodocal::CameraPtr m_camera;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">int<\/span> n_id, img_cnt;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;};<\/div><div class="ttc" id="namespaceEigen_html"><div class="ttname"><a href="namespaceEigen.html">Eigen<\/a><\/div><\/div>$/;"	a
l00001	doc/html/free_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_FREE_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_FREE_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_FREE`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Freebsd FreeBSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__FreeBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    [[`__FreeBSD_version`] [V.R.P]]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_FREE BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">    defined(__FreeBSD__) \\<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_FREE<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   if defined(__FreeBSD_version)<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#       if __FreeBSD_version &lt; 500000<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_FREE \\<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">                BOOST_PREDEF_MAKE_10_VRP000(__FreeBSD_version)<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#       else<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_FREE \\<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">                BOOST_PREDEF_MAKE_10_VRR000(__FreeBSD_version)<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#   else<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_FREE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_FREE<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_FREE_AVAILABLE<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_FREE_NAME &quot;Free BSD&quot;<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_FREE,BOOST_OS_BSD_FREE_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/gnu_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_LIBRARY_C_GNU_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_LIBRARY_C_GNU_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/library\/c\/_prefix.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#if defined(__STDC__)<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#elif defined(__cplusplus)<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">[heading `BOOST_LIB_C_GNU`]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Glibc GNU glibc] Standard C library.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">Version number available as major, and minor.<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">    [[`__GLIBC__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">    [[`__GNU_LIBRARY__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">    [[`__GLIBC__`, `__GLIBC_MINOR__`] [V.R.0]]<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">    [[`__GNU_LIBRARY__`, `__GNU_LIBRARY_MINOR__`] [V.R.0]]<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#define BOOST_LIB_C_GNU BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#if defined(__GLIBC__) || defined(__GNU_LIBRARY__)<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   undef BOOST_LIB_C_GNU<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#   if defined(__GLIBC__)<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#       define BOOST_LIB_C_GNU \\<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">            BOOST_VERSION_NUMBER(__GLIBC__,__GLIBC_MINOR__,0)<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#   else<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#       define BOOST_LIB_C_GNU \\<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">            BOOST_VERSION_NUMBER(__GNU_LIBRARY__,__GNU_LIBRARY_MINOR__,0)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#if BOOST_LIB_C_GNU<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#   define BOOST_LIB_C_GNU_AVAILABLE<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define BOOST_LIB_C_GNU_NAME &quot;GNU&quot;<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_LIB_C_GNU,BOOST_LIB_C_GNU_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/gpl_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GPL_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GPL_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">const<\/span> T clamp(<span class="keyword">const<\/span> T&amp; v, <span class="keyword">const<\/span> T&amp; a, <span class="keyword">const<\/span> T&amp; b)<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keywordflow">return<\/span> std::min(b, std::max(a, v));<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keywordtype">double<\/span> hypot3(<span class="keywordtype">double<\/span> x, <span class="keywordtype">double<\/span> y, <span class="keywordtype">double<\/span> z);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keywordtype">float<\/span> hypot3f(<span class="keywordtype">float<\/span> x, <span class="keywordtype">float<\/span> y, <span class="keywordtype">float<\/span> z);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">const<\/span> T normalizeTheta(<span class="keyword">const<\/span> T&amp; theta)<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    T normTheta = theta;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordflow">while<\/span> (normTheta &lt; - M_PI)<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    {<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        normTheta += 2.0 * M_PI;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    }<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordflow">while<\/span> (normTheta &gt; M_PI)<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    {<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        normTheta -= 2.0 * M_PI;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    }<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordflow">return<\/span> normTheta;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;}<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keywordtype">double<\/span> d2r(<span class="keywordtype">double<\/span> deg);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keywordtype">float<\/span> d2r(<span class="keywordtype">float<\/span> deg);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keywordtype">double<\/span> r2d(<span class="keywordtype">double<\/span> rad);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keywordtype">float<\/span> r2d(<span class="keywordtype">float<\/span> rad);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keywordtype">double<\/span> sinc(<span class="keywordtype">double<\/span> theta);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">const<\/span> T square(<span class="keyword">const<\/span> T&amp; x)<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordflow">return<\/span> x * x;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;}<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="keyword">const<\/span> T cube(<span class="keyword">const<\/span> T&amp; x)<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;{<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordflow">return<\/span> x * x * x;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;}<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keyword">const<\/span> T random(<span class="keyword">const<\/span> T&amp; a, <span class="keyword">const<\/span> T&amp; b)<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;{<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">double<\/span><span class="keyword">&gt;<\/span>(rand()) \/ RAND_MAX * (b - a) + a;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;}<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">const<\/span> T randomNormal(<span class="keyword">const<\/span> T&amp; sigma)<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;{<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    T x1, x2, w;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordflow">do<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    {<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        x1 = 2.0 * random(0.0, 1.0) - 1.0;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        x2 = 2.0 * random(0.0, 1.0) - 1.0;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        w = x1 * x1 + x2 * x2;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    }<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordflow">while<\/span> (w &gt;= 1.0 || w == 0.0);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    w = sqrt((-2.0 * log(w)) \/ w);<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordflow">return<\/span> x1 * w * sigma;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;}<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> timeInMicroseconds(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keywordtype">double<\/span> timeInSeconds(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="keywordtype">void<\/span> colorDepthImage(cv::Mat&amp; imgDepth,<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;                     cv::Mat&amp; imgColoredDepth,<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;                     <span class="keywordtype">float<\/span> minRange, <span class="keywordtype">float<\/span> maxRange);<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keywordtype">bool<\/span> colormap(<span class="keyword">const<\/span> std::string&amp; name, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span> idx,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;              <span class="keywordtype">float<\/span>&amp; r, <span class="keywordtype">float<\/span>&amp; g, <span class="keywordtype">float<\/span>&amp; b);<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;std::vector&lt;cv::Point2i&gt; bresLine(<span class="keywordtype">int<\/span> x0, <span class="keywordtype">int<\/span> y0, <span class="keywordtype">int<\/span> x1, <span class="keywordtype">int<\/span> y1);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;std::vector&lt;cv::Point2i&gt; bresCircle(<span class="keywordtype">int<\/span> x0, <span class="keywordtype">int<\/span> y0, <span class="keywordtype">int<\/span> r);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="keywordtype">void<\/span> fitCircle(<span class="keyword">const<\/span> std::vector&lt;cv::Point2d&gt;&amp; points,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;               <span class="keywordtype">double<\/span>&amp; centerX, <span class="keywordtype">double<\/span>&amp; centerY, <span class="keywordtype">double<\/span>&amp; radius);<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;std::vector&lt;cv::Point2d&gt; intersectCircles(<span class="keywordtype">double<\/span> x1, <span class="keywordtype">double<\/span> y1, <span class="keywordtype">double<\/span> r1,<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                                          <span class="keywordtype">double<\/span> x2, <span class="keywordtype">double<\/span> y2, <span class="keywordtype">double<\/span> r2);<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="keywordtype">void<\/span> LLtoUTM(<span class="keywordtype">double<\/span> latitude, <span class="keywordtype">double<\/span> longitude,<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;             <span class="keywordtype">double<\/span>&amp; utmNorthing, <span class="keywordtype">double<\/span>&amp; utmEasting,<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;             std::string&amp; utmZone);<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keywordtype">void<\/span> UTMtoLL(<span class="keywordtype">double<\/span> utmNorthing, <span class="keywordtype">double<\/span> utmEasting,<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;             <span class="keyword">const<\/span> std::string&amp; utmZone,<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;             <span class="keywordtype">double<\/span>&amp; latitude, <span class="keywordtype">double<\/span>&amp; longitude);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> timestampDiff(uint64_t t1, uint64_t t2);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;}<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacecamodocal_html"><div class="ttname"><a href="namespacecamodocal.html">camodocal<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraCalibration.h:8<\/div><\/div>$/;"	a
l00001	doc/html/graph_legend.html	/^<p>Consider the following example: <\/p><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;\/*! Invisible class because of truncation *\/<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;class Invisible { };<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/*! Truncated class, inheritance relation is hidden *\/<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;class Truncated : public Invisible { };<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/* Class not documented with doxygen comments *\/<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;class Undocumented { };<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;\/*! Class that is inherited using public inheritance *\/<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;class PublicBase : public Truncated { };<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;\/*! A template class *\/<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;template&lt;class T&gt; class Templ { };<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;\/*! Class that is inherited using protected inheritance *\/<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;class ProtectedBase { };<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;\/*! Class that is inherited using private inheritance *\/<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;class PrivateBase { };<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;\/*! Class that is used by the Inherited class *\/<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;class Used { };<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;\/*! Super class that inherits a number of other classes *\/<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;class Inherited : public PublicBase,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                  protected ProtectedBase,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                  private PrivateBase,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                  public Undocumented,<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;                  public Templ&lt;int&gt;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  private:<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Used *m_usedClass;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><\/div><!-- fragment --><p> This will result in the following graph:<\/p>$/;"	a
l00001	doc/html/image__utility_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __UTILITY_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __UTILITY_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;functional&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define if_less_equal(num, condition) if (num &lt; condition) { num = condition; }<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define if_more_equal(num, condition) if (num &gt; condition) { num = condition; }<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define if_more_swap(num1, num2) if (num1 &gt; num2) { std::swap(num1, num2); }<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="comment">\/\/ 计算一条直线的角度, 范围 0-180 度<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="comment">\/\/ 参数: firstPt 第一个点<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="comment">\/\/ 参数: secondPt 第二个点<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="comment">\/\/ 返回值: 角度 (0-180)<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">double<\/span> calcLineDegree(<span class="keyword">const<\/span> cv::Point2f&amp; firstPt, <span class="keyword">const<\/span> cv::Point2f&amp; secondPt);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="comment">\/\/ 将旋转矩形的角度转换为 0-180度<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="comment">\/\/ 参数: box 矩形<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="comment">\/\/ 返回值: 角度 (0-180)<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">double<\/span> getRcDegree(<span class="keyword">const<\/span> cv::RotatedRect &amp;box);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="comment">\/\/ 计算直线的k、b<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="comment">\/\/ 参数: x1 横坐标1, x2 横坐标2<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="comment">\/\/ 参数: y1 纵坐标1, y2 纵坐标2<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="comment">\/\/ 返回值: 直线的参数k、b<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    std::pair&lt;double, double&gt; get_linear_parameters(T x1, T y1, T x2, T y2);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="comment">\/\/ 两点计算直线 k、b<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="comment">\/\/ 参数: point1 点1<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="comment">\/\/ 参数: point2 点2<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="comment">\/\/ 返回值: 直线的参数 k、b<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    std::pair&lt;double, double&gt; get_linear_parameters(T point1, T point2);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="comment">\/\/ 已知直线 k、b, 给定纵坐标 y 计算出坐标 x<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="comment">\/\/ 参数: coefficient 斜率 k<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="comment">\/\/ 参数: intercept 截距 b<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="comment">\/\/ 返回值: 横坐标 x 的值<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    T get_linear_x(<span class="keywordtype">double<\/span> coefficient, <span class="keywordtype">double<\/span> intercept, T y);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="comment">\/\/ 已知直线 k、b, 给定横坐标 x 计算出坐标 y<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="comment">\/\/ 参数: coefficient 斜率 k<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="comment">\/\/ 参数: intercept 截距 b<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="comment">\/\/ 返回值: 纵坐标 y 的值<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    T get_linear_y(<span class="keywordtype">double<\/span> coefficient, <span class="keywordtype">double<\/span> intercept, T x);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="comment">\/\/ 遍历旋转矩形内部的所有像素点<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="comment">\/\/ 参数: rect 旋转矩形<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="comment">\/\/ 参数: func 回调函数<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="comment">\/\/ 参数: xstep x坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="comment">\/\/ 参数: ystep y坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">void<\/span> for_each(<span class="keyword">const<\/span> cv::RotatedRect &amp;rect, <span class="keyword">const<\/span> std::function&lt;<span class="keywordtype">void<\/span>(<span class="keywordtype">int<\/span>, <span class="keywordtype">int<\/span>)&gt; &amp;func, <span class="keywordtype">int<\/span> xstep = 1, <span class="keywordtype">int<\/span> ystep = 1);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="comment">\/\/ 遍历旋转矩形内部的所有像素点<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="comment">\/\/ 参数: rect 旋转矩形<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="comment">\/\/ 参数: xmin x坐标最大值<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="comment">\/\/ 参数: ymin y坐标最大值<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="comment">\/\/ 参数: xmax x坐标最大值<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="comment">\/\/ 参数: ymax y坐标最大值<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="comment">\/\/ 参数: func 回调函数<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="comment">\/\/ 参数: xstep x坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="comment">\/\/ 参数: ystep y坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">void<\/span> for_each(<span class="keyword">const<\/span> cv::RotatedRect &amp;rect, <span class="keywordtype">float<\/span> xmin, <span class="keywordtype">float<\/span> ymin, <span class="keywordtype">float<\/span> xmax, <span class="keywordtype">float<\/span> ymax, <span class="keyword">const<\/span> std::function&lt;<span class="keywordtype">void<\/span>(<span class="keywordtype">int<\/span>, <span class="keywordtype">int<\/span>)&gt; &amp;func, <span class="keywordtype">int<\/span> xstep = 1, <span class="keywordtype">int<\/span> ystep = 1);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="comment">\/\/ 计算两点距离的平方<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="comment">\/\/ 参数: point1 第一个点<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="comment">\/\/ 参数: point2 第二个点<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离的平方<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">double<\/span> squaredist(<span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point1, <span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point2);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="comment">\/\/ 计算两点距离的平方<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="comment">\/\/ 参数: x1 第一个点的x坐标<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="comment">\/\/ 参数: y1 第一个点的y坐标<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="comment">\/\/ 参数: x2 第二个点的x坐标<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/ 参数: y2 第二个点的y坐标<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离的平方<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">double<\/span> squaredist(T x1, T y1, T x2, T y2);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="comment">\/\/ 计算两点距离<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="comment">\/\/ 参数: point1 第一个点<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ 参数: point2 第二个点<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="keywordtype">double<\/span> distance(<span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point1, <span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point2);<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/ 计算两点距离<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/ 参数: x1 第一个点的x坐标<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="comment">\/\/ 参数: y1 第一个点的y坐标<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/ 参数: x2 第二个点的x坐标<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="comment">\/\/ 参数: y2 第二个点的y坐标<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keywordtype">double<\/span> distance(T x1, T y1, T x2, T y2);<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="comment">\/\/ 计算两点的中心点坐标<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="comment">\/\/ 参数: point1 第一个点<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/ 参数: point2 第二个点<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点的中心点坐标<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    T center_point(<span class="keyword">const<\/span> T &amp;point1, <span class="keyword">const<\/span> T &amp;point2);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="comment">\/\/ 判断点与直线的距离<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="comment">\/\/ 参数: coefficient 直线斜率 k<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="comment">\/\/ 参数: intercept 直线截距 b<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="comment">\/\/ 参数: point 需要计算的点<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="comment">\/\/ 返回值: 点与直线的距离<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keywordtype">double<\/span> point_to_line(<span class="keywordtype">double<\/span> coefficient, <span class="keywordtype">double<\/span> intercept, <span class="keyword">const<\/span> T &amp;point);<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="comment">\/\/ 判断点是否在另外两点构成的直线上<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <span class="comment">\/\/ 参数: point1 直线点 1<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="comment">\/\/ 参数: point2 直线点 2 <\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="comment">\/\/ 参数: point 将要判断的点<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="comment">\/\/ 返回值: true or false<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keywordtype">bool<\/span> point_in_line(<span class="keyword">const<\/span> T &amp;point1, <span class="keyword">const<\/span> T &amp;point2, <span class="keyword">const<\/span> T &amp;point);<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;}<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;}<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#endif \/\/ __UTILITY_H__<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/imu__factor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;ros\/assert.h&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;integration_base.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classIMUFactor.html">   12<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIMUFactor.html">IMUFactor<\/a> : <span class="keyword">public<\/span> ceres::SizedCostFunction&lt;15, 7, 9, 7, 9&gt;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <a class="code" href="classIMUFactor.html">IMUFactor<\/a>() = <span class="keyword">delete<\/span>;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classIMUFactor.html">IMUFactor<\/a>(<a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>* _pre_integration):pre_integration(_pre_integration)<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classIMUFactor.html#a086785cb07ec6de3dd12abf50078f13f">   19<\/a><\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classIMUFactor.html#a086785cb07ec6de3dd12abf50078f13f">Evaluate<\/a>(<span class="keywordtype">double<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> *parameters, <span class="keywordtype">double<\/span> *residuals, <span class="keywordtype">double<\/span> **jacobians)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        Eigen::Vector3d Pi(parameters[0][0], parameters[0][1], parameters[0][2]);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        Eigen::Quaterniond Qi(parameters[0][6], parameters[0][3], parameters[0][4], parameters[0][5]);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        Eigen::Vector3d Vi(parameters[1][0], parameters[1][1], parameters[1][2]);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        Eigen::Vector3d Bai(parameters[1][3], parameters[1][4], parameters[1][5]);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        Eigen::Vector3d Bgi(parameters[1][6], parameters[1][7], parameters[1][8]);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        Eigen::Vector3d Pj(parameters[2][0], parameters[2][1], parameters[2][2]);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        Eigen::Quaterniond Qj(parameters[2][6], parameters[2][3], parameters[2][4], parameters[2][5]);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        Eigen::Vector3d Vj(parameters[3][0], parameters[3][1], parameters[3][2]);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        Eigen::Vector3d Baj(parameters[3][3], parameters[3][4], parameters[3][5]);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        Eigen::Vector3d Bgj(parameters[3][6], parameters[3][7], parameters[3][8]);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/\/Eigen::Matrix&lt;double, 15, 15&gt; Fd;<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/\/Eigen::Matrix&lt;double, 15, 12&gt; Gd;<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pPj = Pi + Vi * sum_t - 0.5 * g * sum_t * sum_t + corrected_delta_p;<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/\/Eigen::Quaterniond pQj = Qi * delta_q;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pVj = Vi - g * sum_t + corrected_delta_v;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pBaj = Bai;<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pBgj = Bgi;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/\/Vi + Qi * delta_v - g * sum_dt = Vj;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/\/Qi * delta_q = Qj;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">\/\/delta_p = Qi.inverse() * (0.5 * g * sum_dt * sum_dt + Pj - Pi);<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/\/delta_v = Qi.inverse() * (g * sum_dt + Vj - Vi);<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">\/\/delta_q = Qi.inverse() * Qj;<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordflow">if<\/span> ((Bai - pre_integration-&gt;linearized_ba).norm() &gt; 0.10 ||<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;            (Bgi - pre_integration-&gt;linearized_bg).norm() &gt; 0.01)<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        {<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            pre_integration-&gt;repropagate(Bai, Bgi);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        }<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 1&gt;&gt; residual(residuals);<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        residual = pre_integration-&gt;evaluate(Pi, Qi, Vi, Bai, Bgi,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;                                            Pj, Qj, Vj, Baj, Bgj);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        Eigen::Matrix&lt;double, 15, 15&gt; sqrt_info = Eigen::LLT&lt;Eigen::Matrix&lt;double, 15, 15&gt;&gt;(pre_integration-&gt;covariance.inverse()).matrixL().transpose();<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="comment">\/\/sqrt_info.setIdentity();<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        residual = sqrt_info * residual;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordflow">if<\/span> (jacobians)<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        {<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            <span class="keywordtype">double<\/span> sum_dt = pre_integration-&gt;sum_dt;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            Eigen::Matrix3d dp_dba = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_P, O_BA);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            Eigen::Matrix3d dp_dbg = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_P, O_BG);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            Eigen::Matrix3d dq_dbg = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_R, O_BG);<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            Eigen::Matrix3d dv_dba = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_V, O_BA);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            Eigen::Matrix3d dv_dbg = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_V, O_BG);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            <span class="keywordflow">if<\/span> (pre_integration-&gt;jacobian.maxCoeff() &gt; 1e8 || pre_integration-&gt;jacobian.minCoeff() &lt; -1e8)<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            {<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                ROS_WARN(<span class="stringliteral">&quot;numerical unstable in preintegration&quot;<\/span>);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                <span class="comment">\/\/std::cout &lt;&lt; pre_integration-&gt;jacobian &lt;&lt; std::endl;<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="comment"><\/span>            }<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[0])<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            {<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 7, Eigen::RowMajor&gt;&gt; jacobian_pose_i(jacobians[0]);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                jacobian_pose_i.setZero();<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_P, O_P) = -Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_P, O_R) = Utility::skewSymmetric(Qi.inverse() * (0.5 * G * sum_dt * sum_dt + Pj - Pi - Vi * sum_dt));<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            jacobian_pose_i.block&lt;3, 3&gt;(O_R, O_R) = -(Qj.inverse() * Qi).toRotationMatrix();<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                Eigen::Quaterniond corrected_delta_q = pre_integration-&gt;delta_q * Utility::deltaQ(dq_dbg * (Bgi - pre_integration-&gt;linearized_bg));<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_R, O_R) = -(Utility::Qleft(Qj.inverse() * Qi) * Utility::Qright(corrected_delta_q)).bottomRightCorner&lt;3, 3&gt;();<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_V, O_R) = Utility::skewSymmetric(Qi.inverse() * (G * sum_dt + Vj - Vi));<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;                jacobian_pose_i = sqrt_info * jacobian_pose_i;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;                <span class="keywordflow">if<\/span> (jacobian_pose_i.maxCoeff() &gt; 1e8 || jacobian_pose_i.minCoeff() &lt; -1e8)<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;                {<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                    ROS_WARN(<span class="stringliteral">&quot;numerical unstable in preintegration&quot;<\/span>);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                    <span class="comment">\/\/std::cout &lt;&lt; sqrt_info &lt;&lt; std::endl;<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                    ROS_BREAK();<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                }<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            }<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[1])<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            {<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 9, Eigen::RowMajor&gt;&gt; jacobian_speedbias_i(jacobians[1]);<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;                jacobian_speedbias_i.setZero();<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_P, O_V - O_V) = -Qi.inverse().toRotationMatrix() * sum_dt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_P, O_BA - O_V) = -dp_dba;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_P, O_BG - O_V) = -dp_dbg;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            jacobian_speedbias_i.block&lt;3, 3&gt;(O_R, O_BG - O_V) = -dq_dbg;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                Eigen::Quaterniond corrected_delta_q = pre_integration-&gt;delta_q * Utility::deltaQ(dq_dbg * (Bgi - pre_integration-&gt;linearized_bg));<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_R, O_BG - O_V) = -Utility::Qleft(Qj.inverse() * Qi * corrected_delta_q).bottomRightCorner&lt;3, 3&gt;() * dq_dbg;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_V, O_V - O_V) = -Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_V, O_BA - O_V) = -dv_dba;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_V, O_BG - O_V) = -dv_dbg;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_BA, O_BA - O_V) = -Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_BG, O_BG - O_V) = -Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;                jacobian_speedbias_i = sqrt_info * jacobian_speedbias_i;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_i.maxCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_i.minCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            }<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[2])<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;            {<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 7, Eigen::RowMajor&gt;&gt; jacobian_pose_j(jacobians[2]);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                jacobian_pose_j.setZero();<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                jacobian_pose_j.block&lt;3, 3&gt;(O_P, O_P) = Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            jacobian_pose_j.block&lt;3, 3&gt;(O_R, O_R) = Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;                Eigen::Quaterniond corrected_delta_q = pre_integration-&gt;delta_q * Utility::deltaQ(dq_dbg * (Bgi - pre_integration-&gt;linearized_bg));<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;                jacobian_pose_j.block&lt;3, 3&gt;(O_R, O_R) = Utility::Qleft(corrected_delta_q.inverse() * Qi.inverse() * Qj).bottomRightCorner&lt;3, 3&gt;();<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;                jacobian_pose_j = sqrt_info * jacobian_pose_j;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                ROS_ASSERT(fabs(jacobian_pose_j.maxCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                ROS_ASSERT(fabs(jacobian_pose_j.minCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            }<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[3])<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            {<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 9, Eigen::RowMajor&gt;&gt; jacobian_speedbias_j(jacobians[3]);<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;                jacobian_speedbias_j.setZero();<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;                jacobian_speedbias_j.block&lt;3, 3&gt;(O_V, O_V - O_V) = Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                jacobian_speedbias_j.block&lt;3, 3&gt;(O_BA, O_BA - O_V) = Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                jacobian_speedbias_j.block&lt;3, 3&gt;(O_BG, O_BG - O_V) = Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                jacobian_speedbias_j = sqrt_info * jacobian_speedbias_j;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_j.maxCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_j.minCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;            }<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        }<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    }<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    <span class="comment">\/\/bool Evaluate_Direct(double const *const *parameters, Eigen::Matrix&lt;double, 15, 1&gt; &amp;residuals, Eigen::Matrix&lt;double, 15, 30&gt; &amp;jacobians);<\/span><\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="comment">\/\/void checkCorrection();<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <span class="comment">\/\/void checkTransition();<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    <span class="comment">\/\/void checkJacobian(double **parameters);<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>* pre_integration;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;};<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	doc/html/initial__alignment_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/factor\/imu_factor.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;..\/feature_manager.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classImageFrame.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classImageFrame.html">ImageFrame<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        <a class="code" href="classImageFrame.html">ImageFrame<\/a>(){};<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        <a class="code" href="classImageFrame.html">ImageFrame<\/a>(<span class="keyword">const<\/span> map&lt;<span class="keywordtype">int<\/span>, vector&lt;pair&lt;int, Vector3d&gt;&gt;&gt;&amp; _points, <span class="keywordtype">double<\/span> _t):points{_points},t{_t},is_key_frame{<span class="keyword">false<\/span>}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        {<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        };<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        map&lt;int, vector&lt;pair&lt;int, Vector3d&gt; &gt; &gt; points;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <span class="keywordtype">double<\/span> t;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        Matrix3d R;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        Vector3d T;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a> *pre_integration;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        <span class="keywordtype">bool<\/span> is_key_frame;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;};<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keywordtype">bool<\/span> VisualIMUAlignment(map&lt;double, ImageFrame&gt; &amp;all_image_frame, Vector3d* Bgs, Vector3d &amp;g, VectorXd &amp;x);<\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	doc/html/initial__ex__rotation_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/* This class help you to calibrate extrinsic rotation between imu and camera when your totally don&#39;t konw the extrinsic parameter *\/<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classInitialEXRotation.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInitialEXRotation.html">InitialEXRotation<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="classInitialEXRotation.html">InitialEXRotation<\/a>();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">bool<\/span> CalibrationExRotation(vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; corres, Quaterniond delta_q_imu, Matrix3d &amp;calib_ric_result);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    Matrix3d solveRelativeR(<span class="keyword">const<\/span> vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; &amp;corres);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">double<\/span> testTriangulation(<span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;l,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;                             <span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;r,<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;                             cv::Mat_&lt;double&gt; R, cv::Mat_&lt;double&gt; t);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> decomposeE(cv::Mat E,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;R1, cv::Mat_&lt;double&gt; &amp;R2,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;t1, cv::Mat_&lt;double&gt; &amp;t2);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">int<\/span> frame_count;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    vector&lt; Matrix3d &gt; Rc;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    vector&lt; Matrix3d &gt; Rimu;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    vector&lt; Matrix3d &gt; Rc_g;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Matrix3d ric;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="ttc" id="classInitialEXRotation_html"><div class="ttname"><a href="classInitialEXRotation.html">InitialEXRotation<\/a><\/div><div class="ttdef"><b>Definition:<\/b> initial_ex_rotation.h:14<\/div><\/div>$/;"	a
l00001	doc/html/initial__sfm_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/rotation.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;deque&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="structSFMFeature.html">   16<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structSFMFeature.html">SFMFeature<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">bool<\/span> state;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">int<\/span> id;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    vector&lt;pair&lt;int,Vector2d&gt;&gt; observation;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">double<\/span> position[3];<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">double<\/span> depth;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;};<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="structReprojectionError3D.html">   25<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;{<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a>(<span class="keywordtype">double<\/span> observed_u, <span class="keywordtype">double<\/span> observed_v)<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        :observed_u(observed_u), observed_v(observed_v)<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        {}<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> camera_R, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> camera_T, <span class="keyword">const<\/span> T* point, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        T p[3];<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        ceres::QuaternionRotatePoint(camera_R, point, p);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        p[0] += camera_T[0]; p[1] += camera_T[1]; p[2] += camera_T[2];<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        T xp = p[0] \/ p[2];<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        T yp = p[1] \/ p[2];<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        residuals[0] = xp - T(observed_u);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        residuals[1] = yp - T(observed_v);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    }<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> observed_x,<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> observed_y) <\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    {<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;              <a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a>, 2, 4, 3, 3&gt;(<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a>(observed_x,observed_y)));<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    }<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">double<\/span> observed_u;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordtype">double<\/span> observed_v;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classGlobalSFM.html">   56<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classGlobalSFM.html">GlobalSFM<\/a><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;{<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <a class="code" href="classGlobalSFM.html">GlobalSFM<\/a>();<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">bool<\/span> construct(<span class="keywordtype">int<\/span> frame_num, Quaterniond* q, Vector3d* T, <span class="keywordtype">int<\/span> l,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;              <span class="keyword">const<\/span> Matrix3d relative_R, <span class="keyword">const<\/span> Vector3d relative_T,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;              vector&lt;SFMFeature&gt; &amp;sfm_f, map&lt;int, Vector3d&gt; &amp;sfm_tracked_points);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">bool<\/span> solveFrameByPnP(Matrix3d &amp;R_initial, Vector3d &amp;P_initial, <span class="keywordtype">int<\/span> i, vector&lt;SFMFeature&gt; &amp;sfm_f);<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">void<\/span> triangulatePoint(Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose0, Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose1,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                            Vector2d &amp;point0, Vector2d &amp;point1, Vector3d &amp;point_3d);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordtype">void<\/span> triangulateTwoFrames(<span class="keywordtype">int<\/span> frame0, Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose0, <\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;                              <span class="keywordtype">int<\/span> frame1, Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose1,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;                              vector&lt;SFMFeature&gt; &amp;sfm_f);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordtype">int<\/span> feature_num;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;};<\/div><div class="ttc" id="structSFMFeature_html"><div class="ttname"><a href="structSFMFeature.html">SFMFeature<\/a><\/div><div class="ttdef"><b>Definition:<\/b> initial_sfm.h:16<\/div><\/div>$/;"	a
l00001	doc/html/integration__base_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classIntegrationBase.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>() = <span class="keyword">delete<\/span>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_0, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_0,<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;                    <span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_ba, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_bg)<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        : acc_0{_acc_0}, gyr_0{_gyr_0}, linearized_acc{_acc_0}, linearized_gyr{_gyr_0},<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;          linearized_ba{_linearized_ba}, linearized_bg{_linearized_bg},<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;            jacobian{Eigen::Matrix&lt;double, 15, 15&gt;::Identity()}, covariance{Eigen::Matrix&lt;double, 15, 15&gt;::Zero()},<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;          sum_dt{0.0}, delta_p{Eigen::Vector3d::Zero()}, delta_q{Eigen::Quaterniond::Identity()}, delta_v{Eigen::Vector3d::Zero()}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        noise = Eigen::Matrix&lt;double, 18, 18&gt;::Zero();<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        noise.block&lt;3, 3&gt;(0, 0) =  (ACC_N * ACC_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        noise.block&lt;3, 3&gt;(3, 3) =  (GYR_N * GYR_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        noise.block&lt;3, 3&gt;(6, 6) =  (ACC_N * ACC_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        noise.block&lt;3, 3&gt;(9, 9) =  (GYR_N * GYR_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        noise.block&lt;3, 3&gt;(12, 12) =  (ACC_W * ACC_W) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        noise.block&lt;3, 3&gt;(15, 15) =  (GYR_W * GYR_W) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    }<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> push_back(<span class="keywordtype">double<\/span> dt, <span class="keyword">const<\/span> Eigen::Vector3d &amp;acc, <span class="keyword">const<\/span> Eigen::Vector3d &amp;gyr)<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    {<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        dt_buf.push_back(dt);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        acc_buf.push_back(acc);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        gyr_buf.push_back(gyr);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        propagate(dt, acc, gyr);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    }<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">void<\/span> repropagate(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_ba, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_bg)<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    {<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        sum_dt = 0.0;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        acc_0 = linearized_acc;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        gyr_0 = linearized_gyr;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        delta_p.setZero();<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        delta_q.setIdentity();<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        delta_v.setZero();<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        linearized_ba = _linearized_ba;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        linearized_bg = _linearized_bg;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        jacobian.setIdentity();<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        covariance.setZero();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; static_cast&lt;int&gt;(dt_buf.size()); i++)<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            propagate(dt_buf[i], acc_buf[i], gyr_buf[i]);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    }<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">void<\/span> midPointIntegration(<span class="keywordtype">double<\/span> _dt, <\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_0, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_0,<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_1, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_1,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;delta_p, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;delta_q, <span class="keyword">const<\/span> Eigen::Vector3d &amp;delta_v,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;linearized_ba, <span class="keyword">const<\/span> Eigen::Vector3d &amp;linearized_bg,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                            Eigen::Vector3d &amp;result_delta_p, Eigen::Quaterniond &amp;result_delta_q, Eigen::Vector3d &amp;result_delta_v,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                            Eigen::Vector3d &amp;result_linearized_ba, Eigen::Vector3d &amp;result_linearized_bg, <span class="keywordtype">bool<\/span> update_jacobian)<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    {<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="comment">\/\/ROS_INFO(&quot;midpoint integration&quot;);<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        Vector3d un_acc_0 = delta_q * (_acc_0 - linearized_ba);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        Vector3d un_gyr = 0.5 * (_gyr_0 + _gyr_1) - linearized_bg;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        result_delta_q = delta_q * Quaterniond(1, un_gyr(0) * _dt \/ 2, un_gyr(1) * _dt \/ 2, un_gyr(2) * _dt \/ 2);<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        Vector3d un_acc_1 = result_delta_q * (_acc_1 - linearized_ba);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        Vector3d un_acc = 0.5 * (un_acc_0 + un_acc_1);<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        result_delta_p = delta_p + delta_v * _dt + 0.5 * un_acc * _dt * _dt;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        result_delta_v = delta_v + un_acc * _dt;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        result_linearized_ba = linearized_ba;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        result_linearized_bg = linearized_bg;         <\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordflow">if<\/span>(update_jacobian)<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        {<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            Vector3d w_x = 0.5 * (_gyr_0 + _gyr_1) - linearized_bg;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            Vector3d a_0_x = _acc_0 - linearized_ba;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            Vector3d a_1_x = _acc_1 - linearized_ba;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            Matrix3d R_w_x, R_a_0_x, R_a_1_x;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            R_w_x&lt;&lt;0, -w_x(2), w_x(1),<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                w_x(2), 0, -w_x(0),<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                -w_x(1), w_x(0), 0;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            R_a_0_x&lt;&lt;0, -a_0_x(2), a_0_x(1),<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;                a_0_x(2), 0, -a_0_x(0),<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;                -a_0_x(1), a_0_x(0), 0;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            R_a_1_x&lt;&lt;0, -a_1_x(2), a_1_x(1),<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;                a_1_x(2), 0, -a_1_x(0),<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                -a_1_x(1), a_1_x(0), 0;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;            MatrixXd F = MatrixXd::Zero(15, 15);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;            F.block&lt;3, 3&gt;(0, 0) = Matrix3d::Identity();<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;            F.block&lt;3, 3&gt;(0, 3) = -0.25 * delta_q.toRotationMatrix() * R_a_0_x * _dt * _dt + <\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;                                  -0.25 * result_delta_q.toRotationMatrix() * R_a_1_x * (Matrix3d::Identity() - R_w_x * _dt) * _dt * _dt;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            F.block&lt;3, 3&gt;(0, 6) = MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            F.block&lt;3, 3&gt;(0, 9) = -0.25 * (delta_q.toRotationMatrix() + result_delta_q.toRotationMatrix()) * _dt * _dt;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            F.block&lt;3, 3&gt;(0, 12) = -0.25 * result_delta_q.toRotationMatrix() * R_a_1_x * _dt * _dt * -_dt;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            F.block&lt;3, 3&gt;(3, 3) = Matrix3d::Identity() - R_w_x * _dt;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            F.block&lt;3, 3&gt;(3, 12) = -1.0 * MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            F.block&lt;3, 3&gt;(6, 3) = -0.5 * delta_q.toRotationMatrix() * R_a_0_x * _dt + <\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;                                  -0.5 * result_delta_q.toRotationMatrix() * R_a_1_x * (Matrix3d::Identity() - R_w_x * _dt) * _dt;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;            F.block&lt;3, 3&gt;(6, 6) = Matrix3d::Identity();<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            F.block&lt;3, 3&gt;(6, 9) = -0.5 * (delta_q.toRotationMatrix() + result_delta_q.toRotationMatrix()) * _dt;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            F.block&lt;3, 3&gt;(6, 12) = -0.5 * result_delta_q.toRotationMatrix() * R_a_1_x * _dt * -_dt;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            F.block&lt;3, 3&gt;(9, 9) = Matrix3d::Identity();<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            F.block&lt;3, 3&gt;(12, 12) = Matrix3d::Identity();<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            <span class="comment">\/\/cout&lt;&lt;&quot;A&quot;&lt;&lt;endl&lt;&lt;A&lt;&lt;endl;<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            MatrixXd V = MatrixXd::Zero(15,18);<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            V.block&lt;3, 3&gt;(0, 0) =  0.25 * delta_q.toRotationMatrix() * _dt * _dt;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            V.block&lt;3, 3&gt;(0, 3) =  0.25 * -result_delta_q.toRotationMatrix() * R_a_1_x  * _dt * _dt * 0.5 * _dt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            V.block&lt;3, 3&gt;(0, 6) =  0.25 * result_delta_q.toRotationMatrix() * _dt * _dt;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            V.block&lt;3, 3&gt;(0, 9) =  V.block&lt;3, 3&gt;(0, 3);<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            V.block&lt;3, 3&gt;(3, 3) =  0.5 * MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            V.block&lt;3, 3&gt;(3, 9) =  0.5 * MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            V.block&lt;3, 3&gt;(6, 0) =  0.5 * delta_q.toRotationMatrix() * _dt;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            V.block&lt;3, 3&gt;(6, 3) =  0.5 * -result_delta_q.toRotationMatrix() * R_a_1_x  * _dt * 0.5 * _dt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            V.block&lt;3, 3&gt;(6, 6) =  0.5 * result_delta_q.toRotationMatrix() * _dt;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            V.block&lt;3, 3&gt;(6, 9) =  V.block&lt;3, 3&gt;(6, 3);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            V.block&lt;3, 3&gt;(9, 12) = MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            V.block&lt;3, 3&gt;(12, 15) = MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            <span class="comment">\/\/step_jacobian = F;<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            <span class="comment">\/\/step_V = V;<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            jacobian = F * jacobian;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            covariance = F * covariance * F.transpose() + V * noise * V.transpose();<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        }<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    }<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keywordtype">void<\/span> propagate(<span class="keywordtype">double<\/span> _dt, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_1, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_1)<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        dt = _dt;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        acc_1 = _acc_1;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        gyr_1 = _gyr_1;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        Vector3d result_delta_p;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        Quaterniond result_delta_q;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        Vector3d result_delta_v;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        Vector3d result_linearized_ba;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        Vector3d result_linearized_bg;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        midPointIntegration(_dt, acc_0, gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                            linearized_ba, linearized_bg,<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                            result_delta_p, result_delta_q, result_delta_v,<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                            result_linearized_ba, result_linearized_bg, 1);<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        <span class="comment">\/\/checkJacobian(_dt, acc_0, gyr_0, acc_1, gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="comment">\/\/                    linearized_ba, linearized_bg);<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        delta_p = result_delta_p;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        delta_q = result_delta_q;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        delta_v = result_delta_v;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        linearized_ba = result_linearized_ba;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        linearized_bg = result_linearized_bg;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        delta_q.normalize();<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;        sum_dt += dt;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;        acc_0 = acc_1;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        gyr_0 = gyr_1;  <\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;     <\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    }<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    Eigen::Matrix&lt;double, 15, 1&gt; evaluate(<span class="keyword">const<\/span> Eigen::Vector3d &amp;Pi, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;Qi, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Vi, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Bai, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Bgi,<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                                          <span class="keyword">const<\/span> Eigen::Vector3d &amp;Pj, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;Qj, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Vj, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Baj, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Bgj)<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    {<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        Eigen::Matrix&lt;double, 15, 1&gt; residuals;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        Eigen::Matrix3d dp_dba = jacobian.block&lt;3, 3&gt;(O_P, O_BA);<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        Eigen::Matrix3d dp_dbg = jacobian.block&lt;3, 3&gt;(O_P, O_BG);<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        Eigen::Matrix3d dq_dbg = jacobian.block&lt;3, 3&gt;(O_R, O_BG);<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;        Eigen::Matrix3d dv_dba = jacobian.block&lt;3, 3&gt;(O_V, O_BA);<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        Eigen::Matrix3d dv_dbg = jacobian.block&lt;3, 3&gt;(O_V, O_BG);<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        Eigen::Vector3d dba = Bai - linearized_ba;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        Eigen::Vector3d dbg = Bgi - linearized_bg;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        Eigen::Quaterniond corrected_delta_q = delta_q * Utility::deltaQ(dq_dbg * dbg);<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        Eigen::Vector3d corrected_delta_v = delta_v + dv_dba * dba + dv_dbg * dbg;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        Eigen::Vector3d corrected_delta_p = delta_p + dp_dba * dba + dp_dbg * dbg;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_P, 0) = Qi.inverse() * (0.5 * G * sum_dt * sum_dt + Pj - Pi - Vi * sum_dt) - corrected_delta_p;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_R, 0) = 2 * (corrected_delta_q.inverse() * (Qi.inverse() * Qj)).vec();<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_V, 0) = Qi.inverse() * (G * sum_dt + Vj - Vi) - corrected_delta_v;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_BA, 0) = Baj - Bai;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_BG, 0) = Bgj - Bgi;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;        <span class="keywordflow">return<\/span> residuals;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    }<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="keywordtype">double<\/span> dt;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    Eigen::Vector3d acc_0, gyr_0;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    Eigen::Vector3d acc_1, gyr_1;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Vector3d linearized_acc, linearized_gyr;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    Eigen::Vector3d linearized_ba, linearized_bg;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    Eigen::Matrix&lt;double, 15, 15&gt; jacobian, covariance;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    Eigen::Matrix&lt;double, 15, 15&gt; step_jacobian;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    Eigen::Matrix&lt;double, 15, 18&gt; step_V;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    Eigen::Matrix&lt;double, 18, 18&gt; noise;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keywordtype">double<\/span> sum_dt;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    Eigen::Vector3d delta_p;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    Eigen::Quaterniond delta_q;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    Eigen::Vector3d delta_v;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    std::vector&lt;double&gt; dt_buf;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    std::vector&lt;Eigen::Vector3d&gt; acc_buf;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    std::vector&lt;Eigen::Vector3d&gt; gyr_buf;<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;};<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<span class="comment">    void eulerIntegration(double _dt, const Eigen::Vector3d &amp;_acc_0, const Eigen::Vector3d &amp;_gyr_0,<\/span><\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;_acc_1, const Eigen::Vector3d &amp;_gyr_1,<\/span><\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;delta_p, const Eigen::Quaterniond &amp;delta_q, const Eigen::Vector3d &amp;delta_v,<\/span><\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;linearized_ba, const Eigen::Vector3d &amp;linearized_bg,<\/span><\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="comment">                            Eigen::Vector3d &amp;result_delta_p, Eigen::Quaterniond &amp;result_delta_q, Eigen::Vector3d &amp;result_delta_v,<\/span><\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="comment">                            Eigen::Vector3d &amp;result_linearized_ba, Eigen::Vector3d &amp;result_linearized_bg, bool update_jacobian)<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<span class="comment">    {<\/span><\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<span class="comment">        result_delta_p = delta_p + delta_v * _dt + 0.5 * (delta_q * (_acc_1 - linearized_ba)) * _dt * _dt;<\/span><\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<span class="comment">        result_delta_v = delta_v + delta_q * (_acc_1 - linearized_ba) * _dt;<\/span><\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<span class="comment">        Vector3d omg = _gyr_1 - linearized_bg;<\/span><\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<span class="comment">        omg = omg * _dt \/ 2;<\/span><\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<span class="comment">        Quaterniond dR(1, omg(0), omg(1), omg(2));<\/span><\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<span class="comment">        result_delta_q = (delta_q * dR);   <\/span><\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="comment">        result_linearized_ba = linearized_ba;<\/span><\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<span class="comment">        result_linearized_bg = linearized_bg;         <\/span><\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="comment">        if(update_jacobian)<\/span><\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<span class="comment">        {<\/span><\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="comment">            Vector3d w_x = _gyr_1 - linearized_bg;<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<span class="comment">            Vector3d a_x = _acc_1 - linearized_ba;<\/span><\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;<span class="comment">            Matrix3d R_w_x, R_a_x;<\/span><\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<span class="comment">            R_w_x&lt;&lt;0, -w_x(2), w_x(1),<\/span><\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<span class="comment">                w_x(2), 0, -w_x(0),<\/span><\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="comment">                -w_x(1), w_x(0), 0;<\/span><\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="comment">            R_a_x&lt;&lt;0, -a_x(2), a_x(1),<\/span><\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<span class="comment">                a_x(2), 0, -a_x(0),<\/span><\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;<span class="comment">                -a_x(1), a_x(0), 0;<\/span><\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;<span class="comment">            MatrixXd A = MatrixXd::Zero(15, 15);<\/span><\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<span class="comment">            \/\/ one step euler 0.5<\/span><\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(0, 3) = 0.5 * (-1 * delta_q.toRotationMatrix()) * R_a_x * _dt;<\/span><\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(0, 6) = MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(0, 9) = 0.5 * (-1 * delta_q.toRotationMatrix()) * _dt;<\/span><\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(3, 3) = -R_w_x;<\/span><\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(3, 12) = -1 * MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(6, 3) = (-1 * delta_q.toRotationMatrix()) * R_a_x;<\/span><\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(6, 9) = (-1 * delta_q.toRotationMatrix());<\/span><\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<span class="comment">            \/\/cout&lt;&lt;&quot;A&quot;&lt;&lt;endl&lt;&lt;A&lt;&lt;endl;<\/span><\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<span class="comment">            MatrixXd U = MatrixXd::Zero(15,12);<\/span><\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(0, 0) =  0.5 * delta_q.toRotationMatrix() * _dt;<\/span><\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(3, 3) =  MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(6, 0) =  delta_q.toRotationMatrix();<\/span><\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(9, 6) = MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(12, 9) = MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;<span class="comment">            \/\/ put outside<\/span><\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;<span class="comment">            Eigen::Matrix&lt;double, 12, 12&gt; noise = Eigen::Matrix&lt;double, 12, 12&gt;::Zero();<\/span><\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(0, 0) =  (ACC_N * ACC_N) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(3, 3) =  (GYR_N * GYR_N) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(6, 6) =  (ACC_W * ACC_W) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(9, 9) =  (GYR_W * GYR_W) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;<span class="comment">            \/\/write F directly<\/span><\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<span class="comment">            MatrixXd F, V;<\/span><\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<span class="comment">            F = (MatrixXd::Identity(15,15) + _dt * A);<\/span><\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;<span class="comment">            V = _dt * U;<\/span><\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<span class="comment">            step_jacobian = F;<\/span><\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<span class="comment">            step_V = V;<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<span class="comment">            jacobian = F * jacobian;<\/span><\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<span class="comment">            covariance = F * covariance * F.transpose() + V * noise * V.transpose();<\/span><\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;<span class="comment">        }<\/span><\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<span class="comment">    }     <\/span><\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<span class="comment">    void checkJacobian(double _dt, const Eigen::Vector3d &amp;_acc_0, const Eigen::Vector3d &amp;_gyr_0, <\/span><\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<span class="comment">                                   const Eigen::Vector3d &amp;_acc_1, const Eigen::Vector3d &amp;_gyr_1,<\/span><\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;delta_p, const Eigen::Quaterniond &amp;delta_q, const Eigen::Vector3d &amp;delta_v,<\/span><\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;linearized_ba, const Eigen::Vector3d &amp;linearized_bg)<\/span><\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<span class="comment">    {<\/span><\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<span class="comment">        Vector3d result_delta_p;<\/span><\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<span class="comment">        Quaterniond result_delta_q;<\/span><\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<span class="comment">        Vector3d result_delta_v;<\/span><\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<span class="comment">        Vector3d result_linearized_ba;<\/span><\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<span class="comment">        Vector3d result_linearized_bg;<\/span><\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<span class="comment">                            result_delta_p, result_delta_q, result_delta_v,<\/span><\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<span class="comment">                            result_linearized_ba, result_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;<span class="comment">        Vector3d turb_delta_p;<\/span><\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;<span class="comment">        Quaterniond turb_delta_q;<\/span><\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<span class="comment">        Vector3d turb_delta_v;<\/span><\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;<span class="comment">        Vector3d turb_linearized_ba;<\/span><\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<span class="comment">        Vector3d turb_linearized_bg;<\/span><\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<span class="comment">        Vector3d turb(0.0001, -0.003, 0.003);<\/span><\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p + turb, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb p       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q * Quaterniond(1, turb(0) \/ 2, turb(1) \/ 2, turb(2) \/ 2), delta_v,<\/span><\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb q       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v + turb,<\/span><\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb v       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<span class="comment">                            linearized_ba + turb, linearized_bg,<\/span><\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb ba       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg + turb,<\/span><\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb bg       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0 + turb, _gyr_0, _acc_1 , _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb acc_0       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0 + turb, _acc_1 , _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb _gyr_0       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1 + turb, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb acc_1       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1 , _gyr_1 + turb, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb _gyr_1       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<span class="comment">    }<\/span><\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;<span class="comment">    *\/<\/span><\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	doc/html/ios_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Franz Detro 2014<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Copyright Rene Rivera 2015<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_IOS_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_IOS_H<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[heading `BOOST_OS_IOS`]<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/iOS iOS] operating system.<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    [[`__APPLE__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    [[`__MACH__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">    [[`__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">    [[`__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__`] [__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__*1000]]<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#define BOOST_OS_IOS BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">    defined(__APPLE__) &amp;&amp; defined(__MACH__) &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">    defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__) \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_IOS<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_IOS (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__*1000)<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#if BOOST_OS_IOS<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_IOS_AVAILABLE<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#define BOOST_OS_IOS_NAME &quot;iOS&quot;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_IOS,BOOST_OS_IOS_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/keyframe_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __KEY_FRAME_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __KEY_FRAME_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;math.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;..\/estimator.h&quot;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CameraFactory.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CataCamera.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/EquidistantCamera.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/PinholeCamera.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/ScaramuzzaCamera.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;mutex&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;loop_closure.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">\/\/ This functor extracts BRIEF descriptors in the required format<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classBriefExtractor.html">   24<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classBriefExtractor.html">BriefExtractor<\/a>: <span class="keyword">public<\/span> <a class="code" href="classFeatureExtractor.html">FeatureExtractor<\/a>&lt;FBrief::TDescriptor&gt;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;{<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> operator()(<span class="keyword">const<\/span> cv::Mat &amp;im, <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; window_pts,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    vector&lt;cv::KeyPoint&gt; &amp;keys, vector&lt;BRIEF::bitset&gt; &amp;descriptors) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  <a class="code" href="classBriefExtractor.html">BriefExtractor<\/a>(<span class="keyword">const<\/span> std::string &amp;pattern_file);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <a class="code" href="classDVision_1_1BRIEF.html">DVision::BRIEF<\/a> m_brief;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classKeyFrame.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classKeyFrame.html">KeyFrame<\/a><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;{<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>(<span class="keywordtype">double<\/span> _header, <span class="keywordtype">int<\/span> _global_index, Eigen::Vector3d _T_w_c, Eigen::Matrix3d _R_w_c, cv::Mat &amp;_image, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *_brief_pattern_file);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> setExtrinsic(Eigen::Vector3d T, Eigen::Matrix3d R);    <\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">void<\/span> rejectWithF(vector&lt;cv::Point2f&gt; &amp;measurements_old,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;                     vector&lt;cv::Point2f&gt; &amp;measurements_old_norm,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                     <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">void<\/span> extractBrief(cv::Mat &amp;image);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">void<\/span> buildKeyFrameFeatures(<a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">bool<\/span> inAera(cv::Point2f pt, cv::Point2f center, <span class="keywordtype">float<\/span> area_size);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">bool<\/span> searchInAera(cv::Point2f center_cur, <span class="keywordtype">float<\/span> area_size,<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;                      <span class="keyword">const<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">BRIEF::bitset<\/a> window_descriptor,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                      <span class="keyword">const<\/span> std::vector&lt;BRIEF::bitset&gt; &amp;descriptors_old,<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;                      <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keypoints_old,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                      cv::Point2f &amp;best_match);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> searchByDes(<span class="keyword">const<\/span> Eigen::Vector3d T_w_i_old, <span class="keyword">const<\/span> Eigen::Matrix3d R_w_i_old,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                     std::vector&lt;cv::Point2f&gt; &amp;measurements_old,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                     std::vector&lt;cv::Point2f&gt; &amp;measurements_old_norm,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                     <span class="keyword">const<\/span> std::vector&lt;BRIEF::bitset&gt; &amp;descriptors_old,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                     <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keypoints_old,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;                     <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">bool<\/span> findConnectionWithOldFrame(<span class="keyword">const<\/span> <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* old_kf,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; &amp;cur_pts, <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                                    std::vector&lt;cv::Point2f&gt; &amp;measurements_old, std::vector&lt;cv::Point2f&gt; &amp;measurements_old_norm,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                    <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keywordtype">void<\/span> updatePose(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_T_w_i, <span class="keyword">const<\/span> Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">void<\/span> updateOriginPose(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_T_w_i, <span class="keyword">const<\/span> Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">void<\/span> getPose(Eigen::Vector3d &amp;_T_w_i, Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordtype">void<\/span> getOriginPose(Eigen::Vector3d &amp;_T_w_i, Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">void<\/span> addConnection(<span class="keywordtype">int<\/span> index, <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* connected_kf);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordtype">void<\/span> addConnection(<span class="keywordtype">int<\/span> index, <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* connected_kf, Vector3d relative_t, Quaterniond relative_q, <span class="keywordtype">double<\/span> relative_yaw);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> updateLoopConnection(Vector3d relative_t, Quaterniond relative_q, <span class="keywordtype">double<\/span> relative_yaw);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keywordtype">void<\/span> detectLoop(<span class="keywordtype">int<\/span> index);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> removeLoop();<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordtype">int<\/span> HammingDis(<span class="keyword">const<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">BRIEF::bitset<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">BRIEF::bitset<\/a> &amp;b);<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    Eigen::Vector3d getLoopRelativeT();<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordtype">double<\/span> getLoopRelativeYaw();<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ data <\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keywordtype">double<\/span> header;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    std::vector&lt;Eigen::Vector3d&gt; point_clouds, point_clouds_origin;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="comment">\/\/feature in origin image plane<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    std::vector&lt;cv::Point2f&gt; measurements, measurements_origin;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/feature in normalize image plane<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    std::vector&lt;cv::Point2f&gt; pts_normalize;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="comment">\/\/feature ID<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    std::vector&lt;int&gt; features_id, features_id_origin;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="comment">\/\/feature descriptor<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    std::vector&lt;BRIEF::bitset&gt; descriptors;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="comment">\/\/keypoints<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    std::vector&lt;cv::KeyPoint&gt; keypoints;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordtype">int<\/span> global_index;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    cv::Mat image;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    Matrix3d qic;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    Vector3d tic;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keywordtype">int<\/span> COL, ROW;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">bool<\/span> use_retrive;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="keywordtype">bool<\/span> has_loop;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keywordtype">int<\/span> loop_index;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keywordtype">bool<\/span> update_loop_info;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="comment">\/\/ index t_x t_y t_z q_w q_x q_y q_z yaw<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="comment">\/\/ old_R_cur old_T_cur<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">bool<\/span> check_loop;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="comment">\/\/ looped by other frame<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <span class="keywordtype">bool<\/span> is_looped;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="keywordtype">int<\/span> resample_index;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *BRIEF_PATTERN_FILE;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="comment">\/\/ index t_x t_y t_z q_w q_x q_y q_z yaw<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    Eigen::Vector3d T_w_i;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    Eigen::Matrix3d R_w_i;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    Eigen::Vector3d origin_T_w_i;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    Eigen::Matrix3d origin_R_w_i;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    std::mutex mMutexPose;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    std::mutex mLoopInfo;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    std::vector&lt;cv::KeyPoint&gt; window_keypoints;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    std::vector&lt;BRIEF::bitset&gt; window_descriptors;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    Eigen::Matrix&lt;double, 8, 1 &gt; loop_info;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;};<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="ttc" id="classFeatureExtractor_html"><div class="ttname"><a href="classFeatureExtractor.html">FeatureExtractor<\/a><\/div><div class="ttdoc">Generic class to create functors to extract features. <\/div><div class="ttdef"><b>Definition:<\/b> demoDetector.h:45<\/div><\/div>$/;"	a
l00001	doc/html/keyframe__database_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;keyframe.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/rotation.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/CameraPoseVisualization.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Path.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Odometry.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PointStamped.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="classKeyFrameDatabase.html">   15<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classKeyFrameDatabase.html">KeyFrameDatabase<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <a class="code" href="classKeyFrameDatabase.html">KeyFrameDatabase<\/a>();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">void<\/span> add(<a class="code" href="classKeyFrame.html">KeyFrame<\/a>* pKF);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">void<\/span> resample(vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">void<\/span> erase(<a class="code" href="classKeyFrame.html">KeyFrame<\/a>* pKF);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">int<\/span> size();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> optimize4DoFLoopPoseGraph(<span class="keywordtype">int<\/span> cur_index, Eigen::Vector3d &amp;loop_correct_t, Eigen::Matrix3d &amp;loop_correct_r);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getKeyframe(<span class="keywordtype">int<\/span> index);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getLastKeyframe();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getLastKeyframe(<span class="keywordtype">int<\/span> last_index);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getLastUncheckKeyframe();<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">void<\/span> getKeyframeIndexList(vector&lt;int&gt; &amp;keyframe_index_list);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">void<\/span> updateVisualization();<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> addLoop(<span class="keywordtype">int<\/span> loop_index);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    nav_msgs::Path getPath();<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>* getPosegraphVisualization();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    list&lt;KeyFrame*&gt; keyFrameList;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    std::mutex mMutexkeyFrameList;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    std::mutex mOptimiazationPosegraph;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    std::mutex mPath;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    std::mutex mPosegraphVisualization;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">int<\/span> earliest_loop_index;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Vector3d t_drift;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keywordtype">double<\/span> yaw_drift;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    Matrix3d r_drift;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">int<\/span> max_frame_num;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">double<\/span> total_length;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    Vector3d last_P;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    nav_msgs::Path refine_path;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>* posegraph_visualization;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;};<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;T NormalizeAngle(<span class="keyword">const<\/span> T&amp; angle_degrees) {<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;  <span class="keywordflow">if<\/span> (angle_degrees &gt; T(180.0))<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordflow">return<\/span> angle_degrees - T(360.0);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (angle_degrees &lt; T(-180.0))<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordflow">return<\/span> angle_degrees + T(360.0);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keywordflow">return<\/span> angle_degrees;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;};<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="classAngleLocalParameterization.html">   61<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAngleLocalParameterization.html">AngleLocalParameterization<\/a> {<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* theta_radians, <span class="keyword">const<\/span> T* delta_theta_radians,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                  T* theta_radians_plus_delta)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    *theta_radians_plus_delta =<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        NormalizeAngle(*theta_radians + *delta_theta_radians);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  }<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;  <span class="keyword">static<\/span> ceres::LocalParameterization* Create() {<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffLocalParameterization&lt;<a class="code" href="classAngleLocalParameterization.html">AngleLocalParameterization<\/a>,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                                                     1, 1&gt;);<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  }<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;};<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">inline<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keywordtype">void<\/span> QuaternionInverse(<span class="keyword">const<\/span> T q[4], T q_inverse[4])<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;{<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    q_inverse[0] = q[0];<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    q_inverse[1] = -q[1];<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    q_inverse[2] = -q[2];<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    q_inverse[3] = -q[3];<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;};<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno"><a class="line" href="structRelativeTError.html">   88<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structRelativeTError.html">RelativeTError<\/a><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;{<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <a class="code" href="structRelativeTError.html">RelativeTError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z)<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z){}<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> w_q_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        T i_q_w[4];<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        QuaternionInverse(w_q_i, i_q_w);<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        ceres::QuaternionRotatePoint(i_q_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        residuals[0] = t_i_ij[0] - T(t_x);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        residuals[1] = t_i_ij[1] - T(t_y);<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        residuals[2] = t_i_ij[2] - T(t_z);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    }<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z) <\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    {<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;              <a class="code" href="structRelativeTError.html">RelativeTError<\/a>, 3, 4, 3, 3&gt;(<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structRelativeTError.html">RelativeTError<\/a>(t_x, t_y, t_z)));<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    }<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;};<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno"><a class="line" href="structTError.html">  126<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structTError.html">TError<\/a><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;{<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <a class="code" href="structTError.html">TError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z)<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z){}<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        residuals[0] = tj[0] - T(t_x);<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        residuals[1] = tj[1] - T(t_y);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        residuals[2] = tj[2] - T(t_z);<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    }<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z) <\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    {<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;              <a class="code" href="structTError.html">TError<\/a>, 3, 3&gt;(<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structTError.html">TError<\/a>(t_x, t_y, t_z)));<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    }<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;};<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno"><a class="line" href="structRelativeRTError.html">  152<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structRelativeRTError.html">RelativeRTError<\/a><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;{<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <a class="code" href="structRelativeRTError.html">RelativeRTError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z, <span class="keywordtype">double<\/span> q_w, <span class="keywordtype">double<\/span> q_x, <span class="keywordtype">double<\/span> q_y, <span class="keywordtype">double<\/span> q_z)<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z), q_w(q_w), q_x(q_x), q_y(q_y), q_z(q_z)<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                  {<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                    t_norm = sqrt(t_x * t_x + t_y * t_y + t_z * t_z);<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                  }<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> w_q_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* w_q_j, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        T i_q_w[4];<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        QuaternionInverse(w_q_i, i_q_w);<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;        ceres::QuaternionRotatePoint(i_q_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        <span class="comment">\/\/residuals[0] = (t_i_ij[0] - T(t_x)) \/ T(t_norm);<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        <span class="comment">\/\/residuals[1] = (t_i_ij[1] - T(t_y)) \/ T(t_norm);<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        <span class="comment">\/\/residuals[2] = (t_i_ij[2] - T(t_z)) \/ T(t_norm);<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        residuals[0] = (t_i_ij[0] - T(t_x));<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        residuals[1] = (t_i_ij[1] - T(t_y));<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        residuals[2] = (t_i_ij[2] - T(t_z));<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        T relative_q[4];<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        relative_q[0] = T(q_w);<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        relative_q[1] = T(q_x);<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        relative_q[2] = T(q_y);<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;        relative_q[3] = T(q_z);<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        T q_i_j[4];<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        ceres::QuaternionProduct(i_q_w, w_q_j, q_i_j);<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;        T relative_q_inv[4];<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;        QuaternionInverse(relative_q, relative_q_inv);<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        T error_q[4];<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        ceres::QuaternionProduct(relative_q_inv, q_i_j, error_q); <\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        residuals[3] = T(2) * error_q[1];<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;        residuals[4] = T(2) * error_q[2];<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        residuals[5] = T(2) * error_q[3];<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    }<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z,<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_w, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_z) <\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    {<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;              <a class="code" href="structRelativeRTError.html">RelativeRTError<\/a>, 6, 4, 3, 4, 3&gt;(<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structRelativeRTError.html">RelativeRTError<\/a>(t_x, t_y, t_z, q_w, q_x, q_y, q_z)));<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    }<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z, t_norm;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    <span class="keywordtype">double<\/span> q_w, q_x, q_y, q_z;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;};<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="keywordtype">void<\/span> YawPitchRollToRotationMatrix(<span class="keyword">const<\/span> T yaw, <span class="keyword">const<\/span> T pitch, <span class="keyword">const<\/span> T roll, T R[9])<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;{<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;    T y = yaw \/ T(180.0) * T(M_PI);<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;    T p = pitch \/ T(180.0) * T(M_PI);<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;    T r = roll \/ T(180.0) * T(M_PI);<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;    R[0] = cos(y) * cos(p);<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;    R[1] = -sin(y) * cos(r) + cos(y) * sin(p) * sin(r);<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;    R[2] = sin(y) * sin(r) + cos(y) * sin(p) * cos(r);<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;    R[3] = sin(y) * cos(p);<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;    R[4] = cos(y) * cos(r) + sin(y) * sin(p) * sin(r);<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;    R[5] = -cos(y) * sin(r) + sin(y) * sin(p) * cos(r);<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;    R[6] = -sin(p);<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;    R[7] = cos(p) * sin(r);<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;    R[8] = cos(p) * cos(r);<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;};<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="keywordtype">void<\/span> RotationMatrixTranspose(<span class="keyword">const<\/span> T R[9], T inv_R[9])<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;{<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;    inv_R[0] = R[0];<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;    inv_R[1] = R[3];<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    inv_R[2] = R[6];<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;    inv_R[3] = R[1];<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    inv_R[4] = R[4];<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;    inv_R[5] = R[7];<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;    inv_R[6] = R[2];<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;    inv_R[7] = R[5];<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    inv_R[8] = R[8];<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;};<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<span class="keywordtype">void<\/span> RotationMatrixRotatePoint(<span class="keyword">const<\/span> T R[9], <span class="keyword">const<\/span> T t[3], T r_t[3])<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;{<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;    r_t[0] = R[0] * t[0] + R[1] * t[1] + R[2] * t[2];<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;    r_t[1] = R[3] * t[0] + R[4] * t[1] + R[5] * t[2];<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;    r_t[2] = R[6] * t[0] + R[7] * t[1] + R[8] * t[2];<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;};<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<\/div><div class="line"><a name="l00258"><\/a><span class="lineno"><a class="line" href="structFourDOFError.html">  258<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structFourDOFError.html">FourDOFError<\/a><\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;{<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;    <a class="code" href="structFourDOFError.html">FourDOFError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z, <span class="keywordtype">double<\/span> relative_yaw, <span class="keywordtype">double<\/span> pitch_i, <span class="keywordtype">double<\/span> roll_i)<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z), relative_yaw(relative_yaw), pitch_i(pitch_i), roll_i(roll_i){}<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> yaw_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* yaw_j, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="comment">\/\/ euler to rotation<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;        T w_R_i[9];<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        YawPitchRollToRotationMatrix(yaw_i[0], T(pitch_i), T(roll_i), w_R_i);<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        <span class="comment">\/\/ rotation transpose<\/span><\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        T i_R_w[9];<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        RotationMatrixTranspose(w_R_i, i_R_w);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;        <span class="comment">\/\/ rotation matrix rotate point<\/span><\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;        RotationMatrixRotatePoint(i_R_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        residuals[0] = (t_i_ij[0] - T(t_x));<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;        residuals[1] = (t_i_ij[1] - T(t_y));<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        residuals[2] = (t_i_ij[2] - T(t_z));<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;        residuals[3] = NormalizeAngle(yaw_j[0] - yaw_i[0] - T(relative_yaw)) \/ T(10.0);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    }<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z,<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> relative_yaw, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> pitch_i, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> roll_i) <\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;    {<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;              <a class="code" href="structFourDOFError.html">FourDOFError<\/a>, 4, 1, 3, 1, 3&gt;(<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structFourDOFError.html">FourDOFError<\/a>(t_x, t_y, t_z, relative_yaw, pitch_i, roll_i)));<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;    }<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;    <span class="keywordtype">double<\/span> relative_yaw, pitch_i, roll_i;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;};<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div><div class="line"><a name="l00302"><\/a><span class="lineno"><a class="line" href="structFourDOFWeightError.html">  302<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a><\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;{<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;    <a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z, <span class="keywordtype">double<\/span> relative_yaw, <span class="keywordtype">double<\/span> pitch_i, <span class="keywordtype">double<\/span> roll_i)<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z), relative_yaw(relative_yaw), pitch_i(pitch_i), roll_i(roll_i){<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;                    weight = 5;<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;                  }<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> yaw_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* yaw_j, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;        <span class="comment">\/\/ euler to rotation<\/span><\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;        T w_R_i[9];<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;        YawPitchRollToRotationMatrix(yaw_i[0], T(pitch_i), T(roll_i), w_R_i);<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;        <span class="comment">\/\/ rotation transpose<\/span><\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;        T i_R_w[9];<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;        RotationMatrixTranspose(w_R_i, i_R_w);<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;        <span class="comment">\/\/ rotation matrix rotate point<\/span><\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        RotationMatrixRotatePoint(i_R_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;        residuals[0] = (t_i_ij[0] - T(t_x)) * T(weight);<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;        residuals[1] = (t_i_ij[1] - T(t_y)) * T(weight);<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;        residuals[2] = (t_i_ij[2] - T(t_z)) * T(weight);<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;        residuals[3] = NormalizeAngle((yaw_j[0] - yaw_i[0] - T(relative_yaw))) * T(weight) \/ T(10.0);<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;    }<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z,<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> relative_yaw, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> pitch_i, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> roll_i) <\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;    {<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;              <a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a>, 4, 1, 3, 1, 3&gt;(<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a>(t_x, t_y, t_z, relative_yaw, pitch_i, roll_i)));<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    }<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    <span class="keywordtype">double<\/span> relative_yaw, pitch_i, roll_i;<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;    <span class="keywordtype">double<\/span> weight;<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;};<\/div><div class="ttc" id="classKeyFrame_html"><div class="ttname"><a href="classKeyFrame.html">KeyFrame<\/a><\/div><div class="ttdef"><b>Definition:<\/b> keyframe.h:35<\/div><\/div>$/;"	a
l00001	doc/html/labeler_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef LABELER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define LABELER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a> {<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1labeler.html">   12<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1labeler.html">labeler<\/a> {<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <a class="code" href="classautocar_1_1vision__mul_1_1labeler.html">labeler<\/a>(std::string img_dir_, std::string label_img_dir_, std::string label_txt_dir_, <span class="keywordtype">int<\/span> cols_=640, <span class="keywordtype">int<\/span> rows_=480);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        ~<a class="code" href="classautocar_1_1vision__mul_1_1labeler.html">labeler<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        <span class="keywordtype">void<\/span> gen_sample(<span class="keyword">const<\/span> cv::Mat &amp;image, std::vector&lt;armor_info&gt; armors);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        std::string img_dir;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        std::string label_img_dir;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        std::string label_txt_dir;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <span class="keywordtype">int<\/span> rows;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        <span class="keywordtype">int<\/span> cols;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordtype">int<\/span> count;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    };<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;}<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;}<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#endif \/\/ LABELER_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/loop__closure_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __LOOP_CLOSURE__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __LOOP_CLOSURE__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment">\/\/ DLoopDetector and DBoW2<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/DBoW2.h&quot;<\/span> <span class="comment">\/\/ defines BriefVocabulary<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;DLoopDetector.h&quot;<\/span> <span class="comment">\/\/ defines BriefLoopDetector<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DVision\/DVision.h&quot;<\/span> <span class="comment">\/\/ Brief<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/\/ OpenCV<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/cv.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/highgui.h&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;demoDetector.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">\/\/#include &quot;brief_extractor.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDVision.html">DVision<\/a>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="classLoopClosure.html">   26<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLoopClosure.html">LoopClosure<\/a><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;{<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <a class="code" href="classLoopClosure.html">LoopClosure<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *voc_file, <span class="keywordtype">int<\/span> _image_w, <span class="keywordtype">int<\/span> _image_h);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">bool<\/span> startLoopClosure(std::vector&lt;cv::KeyPoint&gt; &amp;keys, std::vector&lt;BRIEF::bitset&gt; &amp;descriptors,<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;                                   std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;                                   std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;                                   <span class="keywordtype">int<\/span> &amp;old_index);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">void<\/span> initCameraModel(<span class="keyword">const<\/span> std::string &amp;calib_file);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">void<\/span> eraseIndex(std::vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="comment">\/* data *\/<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <a class="code" href="classdemoDetector.html">demoDetector&lt;BriefVocabulary, BriefLoopDetector, FBrief::TDescriptor&gt;<\/a> demo;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">int<\/span> IMAGE_W;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">int<\/span> IMAGE_H;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacestd_html"><div class="ttname"><a href="namespacestd.html">std<\/a><\/div><\/div>$/;"	a
l00001	doc/html/macos_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Copyright Franz Detro 2014<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_MACOS_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_MACOS_H<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">\/* Special case: iOS will define the same predefs as MacOS, and additionally<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"> &#39;__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__&#39;. We can guard against that,<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment"> but only if we detect iOS first. Hence we will force include iOS detection<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"> * before doing any MacOS detection.<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/ios.h&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">[heading `BOOST_OS_MACOS`]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Mac_OS Mac OS] operating system.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">    [[`macintosh`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">    [[`Macintosh`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">    [[`__APPLE__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">    [[`__MACH__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">    [[`__APPLE__`, `__MACH__`] [10.0.0]]<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">    [[ \/otherwise\/ ] [9.0.0]]<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define BOOST_OS_MACOS BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">    defined(macintosh) || defined(Macintosh) || \\<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">    (defined(__APPLE__) &amp;&amp; defined(__MACH__)) \\<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_MACOS<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_MACOS) &amp;&amp; defined(__APPLE__) &amp;&amp; defined(__MACH__)<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_MACOS BOOST_VERSION_NUMBER(10,0,0)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_MACOS)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_MACOS BOOST_VERSION_NUMBER(9,0,0)<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#if BOOST_OS_MACOS<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_MACOS_AVAILABLE<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#define BOOST_OS_MACOS_NAME &quot;Mac OS&quot;<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_MACOS,BOOST_OS_MACOS_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/make_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_MAKE_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_H<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">Shorthands for the common version number formats used by vendors...<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">[heading `BOOST_PREDEF_MAKE_..` macros]<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">These set of macros decompose common vendor version number<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">macros which are composed version, revision, and patch digits.<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">The naming convention indicates:<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">* The base of the specified version number. &quot;`BOOST_PREDEF_MAKE_0X`&quot; for<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">  hexadecimal digits, and &quot;`BOOST_PREDEF_MAKE_10`&quot; for decimal digits.<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">* The format of the vendor version number. Where &quot;`V`&quot; indicates the version digits,<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">  &quot;`R`&quot; indicates the revision digits, &quot;`P`&quot; indicates the patch digits, and &quot;`0`&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">  indicates an ignored digit.<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">Macros are:<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRP(V)` *\/<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRP(V) BOOST_VERSION_NUMBER((V&amp;0xF00)&gt;&gt;8,(V&amp;0xF0)&gt;&gt;4,(V&amp;0xF))<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRP(V)` *\/<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRP(V) BOOST_VERSION_NUMBER((V&amp;0xFF00)&gt;&gt;8,(V&amp;0xF0)&gt;&gt;4,(V&amp;0xF))<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRPP(V) BOOST_VERSION_NUMBER((V&amp;0xF000)&gt;&gt;12,(V&amp;0xF00)&gt;&gt;8,(V&amp;0xFF))<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRR(V)` *\/<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRR(V) BOOST_VERSION_NUMBER((V&amp;0xFF00)&gt;&gt;8,(V&amp;0xFF),0)<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRRPPPP(V)` *\/<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRRPPPP(V) BOOST_VERSION_NUMBER((V&amp;0xF000000)&gt;&gt;24,(V&amp;0xFF0000)&gt;&gt;16,(V&amp;0xFFFF))<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRRP(V)` *\/<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRRP(V) BOOST_VERSION_NUMBER((V&amp;0xFF000)&gt;&gt;12,(V&amp;0xFF0)&gt;&gt;4,(V&amp;0xF))<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRRPP000(V)` *\/<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRRPP000(V) BOOST_VERSION_NUMBER((V&amp;0xF0000000)&gt;&gt;28,(V&amp;0xFF00000)&gt;&gt;20,(V&amp;0xFF000)&gt;&gt;12)<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRRPP(V) BOOST_VERSION_NUMBER((V&amp;0xFF0000)&gt;&gt;16,(V&amp;0xFF00)&gt;&gt;8,(V&amp;0xFF))<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VPPP(V)` *\/<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VPPP(V) BOOST_VERSION_NUMBER(((V)\/1000)%10,0,(V)%1000)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRP(V)` *\/<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRP(V) BOOST_VERSION_NUMBER(((V)\/100)%10,((V)\/10)%10,(V)%10)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRP000(V)` *\/<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRP000(V) BOOST_VERSION_NUMBER(((V)\/100000)%10,((V)\/10000)%10,((V)\/1000)%10)<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRPP(V) BOOST_VERSION_NUMBER(((V)\/1000)%10,((V)\/100)%10,(V)%100)<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRR(V)` *\/<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRR(V) BOOST_VERSION_NUMBER(((V)\/100)%10,(V)%100,0)<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRRPP(V) BOOST_VERSION_NUMBER(((V)\/10000)%10,((V)\/100)%100,(V)%100)<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRR000(V)` *\/<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRR000(V) BOOST_VERSION_NUMBER(((V)\/100000)%10,((V)\/1000)%100,0)<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VV00(V)` *\/<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VV00(V) BOOST_VERSION_NUMBER(((V)\/100)%100,0,0)<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR(V)` *\/<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR(V) BOOST_VERSION_NUMBER(((V)\/100)%100,(V)%100,0)<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRRPP(V) BOOST_VERSION_NUMBER(((V)\/10000)%100,((V)\/100)%100,(V)%100)<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR0PP00(V)` *\/<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR0PP00(V) BOOST_VERSION_NUMBER(((V)\/10000000)%100,((V)\/100000)%100,((V)\/100)%100)<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR0PPPP(V)` *\/<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR0PPPP(V) BOOST_VERSION_NUMBER(((V)\/10000000)%100,((V)\/100000)%100,(V)%10000)<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR00PP00(V)` *\/<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR00PP00(V) BOOST_VERSION_NUMBER(((V)\/100000000)%100,((V)\/1000000)%100,((V)\/100)%100)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="comment">[heading `BOOST_PREDEF_MAKE_*..` date macros]<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment">Date decomposition macros return a date in the relative to the 1970<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="comment">Epoch date. If the month is not available, January 1st is used as the month and day.<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="comment">If the day is not available, but the month is, the 1st of the month is used as the day.<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_DATE(Y,M,D)` *\/<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_DATE(Y,M,D) BOOST_VERSION_NUMBER((Y)%10000-1970,(M)%100,(D)%100)<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_YYYYMMDD(V)` *\/<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_YYYYMMDD(V) BOOST_PREDEF_MAKE_DATE(((V)\/10000)%10000,((V)\/100)%100,(V)%100)<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_YYYY(V)` *\/<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_YYYY(V) BOOST_PREDEF_MAKE_DATE(V,1,1)<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_YYYYMM(V)` *\/<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_YYYYMM(V) BOOST_PREDEF_MAKE_DATE((V)\/100,(V)%100,1)<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/marginalization__factor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;pthread.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_THREADS = 4;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="structResidualBlockInfo.html">   15<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structResidualBlockInfo.html">ResidualBlockInfo<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="structResidualBlockInfo.html">ResidualBlockInfo<\/a>(ceres::CostFunction *_cost_function, ceres::LossFunction *_loss_function, std::vector&lt;double *&gt; _parameter_blocks, std::vector&lt;int&gt; _drop_set)<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        : cost_function(_cost_function), loss_function(_loss_function), parameter_blocks(_parameter_blocks), drop_set(_drop_set) {}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">void<\/span> Evaluate();<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    ceres::CostFunction *cost_function;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ceres::LossFunction *loss_function;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    std::vector&lt;double *&gt; parameter_blocks;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    std::vector&lt;int&gt; drop_set;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">double<\/span> **raw_jacobians;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::vector&lt;Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor&gt;&gt; jacobians;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    Eigen::VectorXd residuals;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">int<\/span> localSize(<span class="keywordtype">int<\/span> size)<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    {<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordflow">return<\/span> size == 7 ? 6 : size;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    }<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;};<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="structThreadsStruct.html">   37<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structThreadsStruct.html">ThreadsStruct<\/a><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    std::vector&lt;ResidualBlockInfo *&gt; sub_factors;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    Eigen::MatrixXd A;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Eigen::VectorXd b;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_size; <span class="comment">\/\/global size<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_idx; <span class="comment">\/\/local size<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;};<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classMarginalizationInfo.html">   46<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;{<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    ~<a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a>();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">int<\/span> localSize(<span class="keywordtype">int<\/span> size) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keywordtype">int<\/span> globalSize(<span class="keywordtype">int<\/span> size) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">void<\/span> addResidualBlockInfo(<a class="code" href="structResidualBlockInfo.html">ResidualBlockInfo<\/a> *residual_block_info);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordtype">void<\/span> preMarginalize();<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">void<\/span> marginalize();<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    std::vector&lt;double *&gt; getParameterBlocks(std::unordered_map&lt;long, double *&gt; &amp;addr_shift);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    std::vector&lt;ResidualBlockInfo *&gt; factors;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keywordtype">int<\/span> m, n;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_size; <span class="comment">\/\/global size<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">int<\/span> sum_block_size;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_idx; <span class="comment">\/\/local size<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    std::unordered_map&lt;long, double *&gt; parameter_block_data;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    std::vector&lt;int&gt; keep_block_size; <span class="comment">\/\/global size<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    std::vector&lt;int&gt; keep_block_idx;  <span class="comment">\/\/local size<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    std::vector&lt;double *&gt; keep_block_data;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    Eigen::MatrixXd linearized_jacobians;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    Eigen::VectorXd linearized_residuals;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> eps = 1e-8;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;};<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno"><a class="line" href="classMarginalizationFactor.html">   74<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMarginalizationFactor.html">MarginalizationFactor<\/a> : <span class="keyword">public<\/span> ceres::CostFunction<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;{<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <a class="code" href="classMarginalizationFactor.html">MarginalizationFactor<\/a>(<a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a>* _marginalization_info);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Evaluate(<span class="keywordtype">double<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> *parameters, <span class="keywordtype">double<\/span> *residuals, <span class="keywordtype">double<\/span> **jacobians) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a>* marginalization_info;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;};<\/div><div class="ttc" id="classMarginalizationInfo_html"><div class="ttname"><a href="classMarginalizationInfo.html">MarginalizationInfo<\/a><\/div><div class="ttdef"><b>Definition:<\/b> marginalization_factor.h:46<\/div><\/div>$/;"	a
l00001	doc/html/net_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_NET_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_NET_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_NET`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Netbsd NetBSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__NETBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    [[`__NetBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    [[`__NETBSD_version`] [V.R.P]]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">    [[`NetBSD0_8`] [0.8.0]]<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">    [[`NetBSD0_9`] [0.9.0]]<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">    [[`NetBSD1_0`] [1.0.0]]<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    [[`__NetBSD_Version`] [V.R.P]]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">    defined(__NETBSD__) || defined(__NetBSD__) \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_NET<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   if defined(__NETBSD__)<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#       if defined(__NETBSD_version)<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#           if __NETBSD_version &lt; 500000<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#               define BOOST_OS_BSD_NET \\<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">                    BOOST_PREDEF_MAKE_10_VRP000(__NETBSD_version)<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#           else<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#               define BOOST_OS_BSD_NET \\<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">                    BOOST_PREDEF_MAKE_10_VRR000(__NETBSD_version)<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#           endif<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#       else<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#   elif defined(__NetBSD__)<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(NetBSD0_8)<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER(0,8,0)<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(NetBSD0_9)<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER(0,9,0)<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(NetBSD1_0)<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER(1,0,0)<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(__NetBSD_Version)<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET \\<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">                BOOST_PREDEF_MAKE_10_VVRR00PP00(__NetBSD_Version)<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET)<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_NET<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_NET_AVAILABLE<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_NET_NAME &quot;DragonFly BSD&quot;<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_NET,BOOST_OS_BSD_NET_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/open_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_OPEN_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_OPEN_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_OPEN`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Openbsd OpenBSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__OpenBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    [[`OpenBSD2_0`] [2.0.0]]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    [[`OpenBSD2_1`] [2.1.0]]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">    [[`OpenBSD2_2`] [2.2.0]]<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">    [[`OpenBSD2_3`] [2.3.0]]<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">    [[`OpenBSD2_4`] [2.4.0]]<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    [[`OpenBSD2_5`] [2.5.0]]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">    [[`OpenBSD2_6`] [2.6.0]]<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">    [[`OpenBSD2_7`] [2.7.0]]<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">    [[`OpenBSD2_8`] [2.8.0]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">    [[`OpenBSD2_9`] [2.9.0]]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">    [[`OpenBSD3_0`] [3.0.0]]<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">    [[`OpenBSD3_1`] [3.1.0]]<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">    [[`OpenBSD3_2`] [3.2.0]]<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">    [[`OpenBSD3_3`] [3.3.0]]<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">    [[`OpenBSD3_4`] [3.4.0]]<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">    [[`OpenBSD3_5`] [3.5.0]]<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">    [[`OpenBSD3_6`] [3.6.0]]<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">    [[`OpenBSD3_7`] [3.7.0]]<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">    [[`OpenBSD3_8`] [3.8.0]]<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">    [[`OpenBSD3_9`] [3.9.0]]<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">    [[`OpenBSD4_0`] [4.0.0]]<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment">    [[`OpenBSD4_1`] [4.1.0]]<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">    [[`OpenBSD4_2`] [4.2.0]]<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">    [[`OpenBSD4_3`] [4.3.0]]<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">    [[`OpenBSD4_4`] [4.4.0]]<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">    [[`OpenBSD4_5`] [4.5.0]]<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">    [[`OpenBSD4_6`] [4.6.0]]<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">    [[`OpenBSD4_7`] [4.7.0]]<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">    [[`OpenBSD4_8`] [4.8.0]]<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">    [[`OpenBSD4_9`] [4.9.0]]<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">    defined(__OpenBSD__) \\<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_OPEN<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_0)<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,0,0)<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_1)<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,1,0)<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_2)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,2,0)<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_3)<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,3,0)<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_4)<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,4,0)<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_5)<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,5,0)<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_6)<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,6,0)<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_7)<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,7,0)<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_8)<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,8,0)<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_9)<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,9,0)<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_0)<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,0,0)<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_1)<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,1,0)<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_2)<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,2,0)<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_3)<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,3,0)<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_4)<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,4,0)<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_5)<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,5,0)<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_6)<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,6,0)<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_7)<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,7,0)<\/span><\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_8)<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,8,0)<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_9)<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,9,0)<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_0)<\/span><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,0,0)<\/span><\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_1)<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,1,0)<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_2)<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,2,0)<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_3)<\/span><\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,3,0)<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_4)<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,4,0)<\/span><\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_5)<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,5,0)<\/span><\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_6)<\/span><\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,6,0)<\/span><\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_7)<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,7,0)<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_8)<\/span><\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,8,0)<\/span><\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_9)<\/span><\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,9,0)<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN)<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_OPEN<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_OPEN_AVAILABLE<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_OPEN_NAME &quot;OpenBSD&quot;<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_OPEN,BOOST_OS_BSD_OPEN_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/param__manager_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef PARAM_MANAGER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define PARAM_MANAGER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;opencv2\/opencv.hpp&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span>param_mul<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classautocar_1_1param__mul_1_1param__manager.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">param_manager<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;  <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">param_manager<\/a>();<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> read_params() = 0;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  cv::FileNode root;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;};<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;}<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#endif \/\/ PARAM_MANAGER_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	doc/html/pose__local__parameterization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno"><a class="line" href="classPoseLocalParameterization.html">    7<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPoseLocalParameterization.html">PoseLocalParameterization<\/a> : <span class="keyword">public<\/span> ceres::LocalParameterization<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Plus(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> *x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> *delta, <span class="keywordtype">double<\/span> *x_plus_delta) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> ComputeJacobian(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> *x, <span class="keywordtype">double<\/span> *jacobian) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> GlobalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 7; };<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> LocalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 6; };<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;};<\/div><div class="ttc" id="classPoseLocalParameterization_html"><div class="ttname"><a href="classPoseLocalParameterization.html">PoseLocalParameterization<\/a><\/div><div class="ttdef"><b>Definition:<\/b> pose_local_parameterization.h:7<\/div><\/div>$/;"	a
l00001	doc/html/projection__factor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/assert.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classProjectionFactor.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProjectionFactor.html">ProjectionFactor<\/a> : <span class="keyword">public<\/span> ceres::SizedCostFunction&lt;2, 7, 7, 7, 1&gt;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <a class="code" href="classProjectionFactor.html">ProjectionFactor<\/a>(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_pts_i, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_pts_j);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Evaluate(<span class="keywordtype">double<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> *parameters, <span class="keywordtype">double<\/span> *residuals, <span class="keywordtype">double<\/span> **jacobians) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">void<\/span> check(<span class="keywordtype">double<\/span> **parameters);<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    Eigen::Vector3d pts_i, pts_j;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    Eigen::Matrix&lt;double, 2, 3&gt; tangent_base;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix2d sqrt_info;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">double<\/span> sum_t;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;};<\/div><div class="ttc" id="classProjectionFactor_html"><div class="ttname"><a href="classProjectionFactor.html">ProjectionFactor<\/a><\/div><div class="ttdef"><b>Definition:<\/b> projection_factor.h:10<\/div><\/div>$/;"	a
l00001	doc/html/rgb__colors_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/\/ -*- mode: c++ -*-<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">\/*********************************************************************<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Original color definition is at scikit-image distributed with<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * following license disclaimer:<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Copyright (C) 2011, the scikit-image team<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * All rights reserved.<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> * Redistribution and use in source and binary forms, with or without<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment"> * modification, are permitted provided that the following conditions are<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment"> * met:<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"> *   1. Redistributions of source code must retain the above copyright<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment"> *      notice, this list of conditions and the following disclaimer.<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"> *   2. Redistributions in binary form must reproduce the above copyright<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment"> *      notice, this list of conditions and the following disclaimer in<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"> *      the documentation and\/or other materials provided with the<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment"> *      distribution.<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment"> *   3. Neither the name of skimage nor the names of its contributors may be<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"> *      used to endorse or promote products derived from this software without<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment"> *      specific prior written permission.<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"> *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS&#39;&#39; AND ANY EXPRESS OR<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"> *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment"> *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment"> *  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment"> *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"> *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"> *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> *  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *  POSSIBILITY OF SUCH DAMAGE.<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> *********************************************************************\/<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#ifndef CV_BRIDGE_RGB_COLORS_H_<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#define CV_BRIDGE_RGB_COLORS_H_<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecv__bridge.html">cv_bridge<\/a><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;{<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">namespace <\/span>rgb_colors<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <span class="keyword">enum<\/span> Colors {<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    ALICEBLUE,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    ANTIQUEWHITE,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    AQUA,<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    AQUAMARINE,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    AZURE,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    BEIGE,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    BISQUE,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    BLACK,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    BLANCHEDALMOND,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    BLUE,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    BLUEVIOLET,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    BROWN,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    BURLYWOOD,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    CADETBLUE,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    CHARTREUSE,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    CHOCOLATE,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    CORAL,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    CORNFLOWERBLUE,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    CORNSILK,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    CRIMSON,<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    CYAN,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    DARKBLUE,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    DARKCYAN,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    DARKGOLDENROD,<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    DARKGRAY,<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    DARKGREEN,<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    DARKGREY,<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    DARKKHAKI,<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    DARKMAGENTA,<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    DARKOLIVEGREEN,<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    DARKORANGE,<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    DARKORCHID,<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    DARKRED,<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    DARKSALMON,<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    DARKSEAGREEN,<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    DARKSLATEBLUE,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    DARKSLATEGRAY,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    DARKSLATEGREY,<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    DARKTURQUOISE,<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    DARKVIOLET,<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    DEEPPINK,<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    DEEPSKYBLUE,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    DIMGRAY,<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    DIMGREY,<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    DODGERBLUE,<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    FIREBRICK,<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    FLORALWHITE,<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    FORESTGREEN,<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    FUCHSIA,<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    GAINSBORO,<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    GHOSTWHITE,<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    GOLD,<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    GOLDENROD,<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    GRAY,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    GREEN,<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    GREENYELLOW,<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    GREY,<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    HONEYDEW,<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    HOTPINK,<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    INDIANRED,<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    INDIGO,<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    IVORY,<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    KHAKI,<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    LAVENDER,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    LAVENDERBLUSH,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    LAWNGREEN,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    LEMONCHIFFON,<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    LIGHTBLUE,<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    LIGHTCORAL,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    LIGHTCYAN,<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    LIGHTGOLDENRODYELLOW,<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    LIGHTGRAY,<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    LIGHTGREEN,<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    LIGHTGREY,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    LIGHTPINK,<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    LIGHTSALMON,<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    LIGHTSEAGREEN,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    LIGHTSKYBLUE,<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    LIGHTSLATEGRAY,<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    LIGHTSLATEGREY,<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    LIGHTSTEELBLUE,<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    LIGHTYELLOW,<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    LIME,<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    LIMEGREEN,<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    LINEN,<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    MAGENTA,<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    MAROON,<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    MEDIUMAQUAMARINE,<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    MEDIUMBLUE,<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    MEDIUMORCHID,<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    MEDIUMPURPLE,<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    MEDIUMSEAGREEN,<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    MEDIUMSLATEBLUE,<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    MEDIUMSPRINGGREEN,<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    MEDIUMTURQUOISE,<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    MEDIUMVIOLETRED,<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    MIDNIGHTBLUE,<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    MINTCREAM,<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    MISTYROSE,<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    MOCCASIN,<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    NAVAJOWHITE,<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    NAVY,<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    OLDLACE,<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    OLIVE,<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    OLIVEDRAB,<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    ORANGE,<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;    ORANGERED,<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    ORCHID,<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    PALEGOLDENROD,<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    PALEGREEN,<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    PALEVIOLETRED,<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    PAPAYAWHIP,<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    PEACHPUFF,<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    PERU,<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    PINK,<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    PLUM,<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    POWDERBLUE,<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    PURPLE,<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    RED,<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    ROSYBROWN,<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    ROYALBLUE,<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    SADDLEBROWN,<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    SALMON,<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    SANDYBROWN,<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    SEAGREEN,<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    SEASHELL,<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    SIENNA,<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    SILVER,<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    SKYBLUE,<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    SLATEBLUE,<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    SLATEGRAY,<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    SLATEGREY,<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    SNOW,<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    SPRINGGREEN,<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    STEELBLUE,<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    TAN,<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    TEAL,<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    THISTLE,<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    TOMATO,<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    TURQUOISE,<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    VIOLET,<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    WHEAT,<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    WHITE,<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    WHITESMOKE,<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    YELLOW,<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    YELLOWGREEN,<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  };<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;  cv::Vec3d getRGBColor(<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> color);<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;} <span class="comment">\/\/ namespace rgb_colors<\/span><\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;}  <span class="comment">\/\/ namespace cv_bridge<\/span><\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacecv__bridge_html"><div class="ttname"><a href="namespacecv__bridge.html">cv_bridge<\/a><\/div><div class="ttdef"><b>Definition:<\/b> cv_bridge.h:48<\/div><\/div>$/;"	a
l00001	doc/html/rune__detect_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef RUNE_DETECT_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define RUNE_DETECT_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;{<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1rune__detect.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1rune__detect.html">rune_detect<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1rune__detect.html">rune_detect<\/a>();<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <span class="keywordtype">bool<\/span> detect();<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;};<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;}<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif \/\/ RUNE_DETECT_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/serial__param_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SERIAL_PARAM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SERIAL_PARAM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;\/home\/dji\/dji_beta\/auto_car\/src\/param_manager\/include\/param_manager.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;{<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span>serial_mul<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classautocar_1_1serial__mul_1_1serial__param.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html">serial_param<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html#a6bb11de835bf2121af438d711809696e">serial_param<\/a>();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html#a3f2cb297237e8d998b17edb963f804ad">read_params<\/a>();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  std::string serial_port;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;  <span class="keywordtype">int<\/span> serial_baudrate;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;};<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;}<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;}<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#endif \/\/ SERIAL_PARAM_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	doc/html/solve__5pts_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">\/\/#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="classMotionEstimator.html">   13<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMotionEstimator.html">MotionEstimator<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="keywordtype">bool<\/span> solveRelativeRT(<span class="keyword">const<\/span> vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; &amp;corres, Matrix3d &amp;R, Vector3d &amp;T);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">double<\/span> testTriangulation(<span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;l,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                             <span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;r,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;                             cv::Mat_&lt;double&gt; R, cv::Mat_&lt;double&gt; t);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> decomposeE(cv::Mat E,<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;R1, cv::Mat_&lt;double&gt; &amp;R2,<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;t1, cv::Mat_&lt;double&gt; &amp;t2);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;};<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="ttc" id="namespaceEigen_html"><div class="ttname"><a href="namespaceEigen.html">Eigen<\/a><\/div><\/div>$/;"	a
l00001	doc/html/stdHeaders_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef STDHEADER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define STDHEADER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/String.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#endif \/\/ STDHEADER_H<\/span><\/div><div class="ttc" id="namespacestd_html"><div class="ttname"><a href="namespacestd.html">std<\/a><\/div><\/div>$/;"	a
l00001	doc/html/sysHeaders_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SYSHEADERS_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SYSHEADERS_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span>     <span class="comment">\/*standard lib*\/<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span>     <span class="comment">\/*Unix standard func*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;sys\/types.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sys\/stat.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;string.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;<\/span>      <span class="comment">\/*file control lib*\/<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;termios.h&gt;<\/span>    <span class="comment">\/*PPSIX terminal*\/<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span>      <span class="comment">\/*error information*\/<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#ifndef TRUE<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#define TRUE 1<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#ifndef FALSE<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#define FALSE 0<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#endif \/\/ SYSHEADERS_H<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/test_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2011-2012<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_DETAIL_TEST_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DETAIL_TEST_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_INTERNAL_GENERATE_TESTS)<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DECLARE_TEST(x,s)<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/tf__factory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TF_FACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TF_FACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include&lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include&lt;tf\/transform_broadcaster.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;tf_param.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span>tf_mul<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classautocar_1_1tf__mul_1_1tf__factory.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1tf__mul_1_1tf__factory.html">tf_factory<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <a class="code" href="classautocar_1_1tf__mul_1_1tf__factory.html">tf_factory<\/a>();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1tf__mul_1_1tf__factory.html#a45dd850204ea9e3fc923bf229a056124">create_tf<\/a>();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  tf::Quaternion get_rotate();<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  tf::Vector3 get_transf();<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="comment">\/\/&gt; Rotate parameters<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;  tf::Quaternion *quaternion;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <span class="comment">\/\/&gt; Translation parameters<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  tf::Vector3 *trans;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  <a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html">tf_param<\/a> param;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  cv::Mat T;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  cv::Mat R;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;}<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#endif \/\/ TF_FACTORY_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/tf__param_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TF_PARAM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TF_PARAM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;\/home\/dji\/dji_beta\/auto_car\/src\/param_manager\/include\/param_manager.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;{<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span>tf_mul<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classautocar_1_1tf__mul_1_1tf__param.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html">tf_param<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html">tf_param<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html#a9afb78374269f840f94570b6eab36c0d">read_params<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;  cv::Mat get_transf_matrix();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  cv::Mat get_rotate_matrix();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  <span class="comment">\/\/tf_mul<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;  cv::Mat T;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  cv::Mat R;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;};<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;}<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;}<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#endif \/\/ TF_PARAM_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	doc/html/thread__operation_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;boost\/thread.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;boost\/atomic.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;logical_core\/SetGoal.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/armor_msg.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseStamped.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseWithCovarianceStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;move_base_msgs\/MoveBaseAction.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;armor.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1thread__operation.html">   20<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;{<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    ~<a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="comment">\/\/ 启动主线程<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">void<\/span> running(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">void<\/span> start_running();<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">bool<\/span> if_detected_armor();<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="comment">\/\/void pub_goal(bool detected_armor);<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="comment">\/\/void amcl_callback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr&amp; pos);<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">bool<\/span> get_camera_num();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keywordtype">void<\/span> set_image_points(cv::RotatedRect rect);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">bool<\/span> detected_armor;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor_;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    geometry_msgs::PoseWithCovarianceStamped car_position;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    boost::atomic&lt;bool&gt; m_buff_avail_flag;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_read_idx;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_write_idx;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    cv::Mat m_img_buff[2];<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">bool<\/span> forward_back = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    ros::Publisher pub_armor_pos;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    vision_unit::armor_msg armor_pos;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    ros::Publisher pub_goal;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    move_base_msgs::MoveBaseGoal goal;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    move_base_msgs::MoveBaseGoal goal_pose;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    cv::Mat camera_matrix;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    cv::Mat dist_coeffs;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    cv::Mat obj_points;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    cv::Mat img_points;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    std::vector&lt;cv::Point3f&gt; obj_p;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    std::vector&lt;cv::Point2f&gt; img_p;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    cv::Mat rvec;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    cv::Mat tvec;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordtype">double<\/span> ang_lim = 3.0\/180*3.14;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">double<\/span> cam[9] = {839.923052, 0.0,        340.780730,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;                     0.0,        837.671081, 261.766523,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                     0.0,        0.0,        1.0       };<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">double<\/span> dist_c[5] = {0.082613, 0.043275, 0.002486, -0.000823, 0.0};<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;};<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;}<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;}<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif \/\/ !__THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor.h:14<\/div><\/div>$/;"	a
l00001	doc/html/thread__operation_8old_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;boost\/thread.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;boost\/atomic.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/SetGoal.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/armor_msg.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseStamped.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseWithCovarianceStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;{<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1thread__operation.html">   19<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ~<a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="comment">\/\/ 启动图像采集线程<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">void<\/span> start_read_image(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="comment">\/\/ 启动主线程<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">void<\/span> running(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> start_running();<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">bool<\/span> if_detected_armor();<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="comment">\/\/void pub_goal(bool detected_armor);<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="comment">\/\/void amcl_callback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr&amp; pos);<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordtype">bool<\/span> get_camera_num();<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">void<\/span> read_image(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">bool<\/span> detected_armor;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor_;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    geometry_msgs::PoseWithCovarianceStamped car_position;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    boost::atomic&lt;bool&gt; m_buff_avail_flag;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_read_idx;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_write_idx;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    cv::Mat m_img_buff[2];<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keywordtype">bool<\/span> forward_back = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    ros::Publisher pub_armor_pos;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    vision_unit::armor_msg armor_pos;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    ros::ServiceClient client;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    vision_unit::SetGoal goal;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    geometry_msgs::PoseStamped goal_pose;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;};<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;}<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;}<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#endif \/\/ !__THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor_detect.h:15<\/div><\/div>$/;"	a
l00001	doc/html/util_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef _UTIL_H_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define _UTIL_H_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;linux\/videodev2.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="comment">\/\/ 通过v4l2配置摄像头参数<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keywordtype">int<\/span> set_camera_exposure(std::string <span class="keywordtype">id<\/span>, <span class="keywordtype">int<\/span> val);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;}<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif \/\/ !_UTIL_H_<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/utility_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;cassert&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cstring&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classUtility.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classUtility.html">Utility<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Quaternion&lt;typename Derived::Scalar&gt; deltaQ(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt; &amp;theta)<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    {<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> Derived::Scalar Scalar_t;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        Eigen::Quaternion&lt;Scalar_t&gt; dq;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 1&gt; half_theta = theta;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        half_theta \/= <span class="keyword">static_cast&lt;<\/span>Scalar_t<span class="keyword">&gt;<\/span>(2.0);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        dq.w() = <span class="keyword">static_cast&lt;<\/span>Scalar_t<span class="keyword">&gt;<\/span>(1.0);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        dq.x() = half_theta.x();<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        dq.y() = half_theta.y();<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        dq.z() = half_theta.z();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        <span class="keywordflow">return<\/span> dq;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    }<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt; skewSymmetric(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt; &amp;q)<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    {<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt; ans;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        ans &lt;&lt; <span class="keyword">typename<\/span> Derived::Scalar(0), -q(2), q(1),<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;            q(2), <span class="keyword">typename<\/span> Derived::Scalar(0), -q(0),<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;            -q(1), q(0), <span class="keyword">typename<\/span> Derived::Scalar(0);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordflow">return<\/span> ans;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    }<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Quaternion&lt;typename Derived::Scalar&gt; positify(<span class="keyword">const<\/span> Eigen::QuaternionBase&lt;Derived&gt; &amp;q)<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    {<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="comment">\/\/printf(&quot;a: %f %f %f %f&quot;, q.w(), q.x(), q.y(), q.z());<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="comment">\/\/Eigen::Quaternion&lt;typename Derived::Scalar&gt; p(-q.w(), -q.x(), -q.y(), -q.z());<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="comment">\/\/printf(&quot;b: %f %f %f %f&quot;, p.w(), p.x(), p.y(), p.z());<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="comment">\/\/return q.template w() &gt;= (typename Derived::Scalar)(0.0) ? q : Eigen::Quaternion&lt;typename Derived::Scalar&gt;(-q.w(), -q.x(), -q.y(), -q.z());<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordflow">return<\/span> q;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    }<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; Qleft(<span class="keyword">const<\/span> Eigen::QuaternionBase&lt;Derived&gt; &amp;q)<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        Eigen::Quaternion&lt;typename Derived::Scalar&gt; qq = positify(q);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; ans;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        ans(0, 0) = qq.w(), ans.template block&lt;1, 3&gt;(0, 1) = -qq.vec().transpose();<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        ans.template block&lt;3, 1&gt;(1, 0) = qq.vec(), ans.template block&lt;3, 3&gt;(1, 1) = qq.w() * Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt;::Identity() + skewSymmetric(qq.vec());<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordflow">return<\/span> ans;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    }<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; Qright(<span class="keyword">const<\/span> Eigen::QuaternionBase&lt;Derived&gt; &amp;p)<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    {<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        Eigen::Quaternion&lt;typename Derived::Scalar&gt; pp = positify(p);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; ans;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        ans(0, 0) = pp.w(), ans.template block&lt;1, 3&gt;(0, 1) = -pp.vec().transpose();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        ans.template block&lt;3, 1&gt;(1, 0) = pp.vec(), ans.template block&lt;3, 3&gt;(1, 1) = pp.w() * Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt;::Identity() - skewSymmetric(pp.vec());<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordflow">return<\/span> ans;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Vector3d R2ypr(<span class="keyword">const<\/span> Eigen::Matrix3d &amp;R)<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    {<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        Eigen::Vector3d n = R.col(0);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        Eigen::Vector3d o = R.col(1);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        Eigen::Vector3d a = R.col(2);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        Eigen::Vector3d ypr(3);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordtype">double<\/span> y = atan2(n(1), n(0));<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keywordtype">double<\/span> p = atan2(-n(2), n(0) * cos(y) + n(1) * sin(y));<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="keywordtype">double<\/span> r = atan2(a(0) * sin(y) - a(1) * cos(y), -o(0) * sin(y) + o(1) * cos(y));<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        ypr(0) = y;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        ypr(1) = p;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        ypr(2) = r;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <span class="keywordflow">return<\/span> ypr \/ M_PI * 180.0;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    }<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt; ypr2R(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt; &amp;ypr)<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    {<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> Derived::Scalar Scalar_t;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        Scalar_t y = ypr(0) \/ 180.0 * M_PI;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        Scalar_t p = ypr(1) \/ 180.0 * M_PI;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        Scalar_t r = ypr(2) \/ 180.0 * M_PI;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 3&gt; Rz;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        Rz &lt;&lt; cos(y), -sin(y), 0,<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            sin(y), cos(y), 0,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            0, 0, 1;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 3&gt; Ry;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        Ry &lt;&lt; cos(p), 0., sin(p),<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            0., 1., 0.,<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            -sin(p), 0., cos(p);<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 3&gt; Rx;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        Rx &lt;&lt; 1., 0., 0.,<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            0., cos(r), -sin(r),<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            0., sin(r), cos(r);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keywordflow">return<\/span> Rz * Ry * Rx;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    }<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix3d g2R(<span class="keyword">const<\/span> Eigen::Vector3d &amp;g);<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keywordtype">size_t<\/span> N&gt;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="structUtility_1_1uint__.html">  113<\/a><\/span>&#160;    <span class="keyword">struct <\/span><a class="code" href="structUtility_1_1uint__.html">uint_<\/a><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    {<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    };<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keywordtype">size_t<\/span> N, <span class="keyword">typename<\/span> Lambda, <span class="keyword">typename<\/span> IterT&gt;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordtype">void<\/span> unroller(<span class="keyword">const<\/span> Lambda &amp;f, <span class="keyword">const<\/span> IterT &amp;iter, <a class="code" href="structUtility_1_1uint__.html">uint_&lt;N&gt;<\/a>)<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    {<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        unroller(f, iter, <a class="code" href="structUtility_1_1uint__.html">uint_&lt;N - 1&gt;<\/a>());<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        f(iter + N);<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    }<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Lambda, <span class="keyword">typename<\/span> IterT&gt;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordtype">void<\/span> unroller(<span class="keyword">const<\/span> Lambda &amp;f, <span class="keyword">const<\/span> IterT &amp;iter, <a class="code" href="structUtility_1_1uint__.html">uint_&lt;0&gt;<\/a>)<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    {<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        f(iter);<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    }<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keyword">static<\/span> T normalizeAngle(<span class="keyword">const<\/span> T&amp; angle_degrees) {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;      T two_pi(2.0 * 180);<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;      <span class="keywordflow">if<\/span> (angle_degrees &gt; 0)<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;      <span class="keywordflow">return<\/span> angle_degrees -<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;          two_pi * std::floor((angle_degrees + T(180)) \/ two_pi);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="keywordflow">return<\/span> angle_degrees +<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            two_pi * std::floor((-angle_degrees + T(180)) \/ two_pi);<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    };<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;};<\/div><div class="ttc" id="structUtility_1_1uint___html"><div class="ttname"><a href="structUtility_1_1uint__.html">Utility::uint_<\/a><\/div><div class="ttdef"><b>Definition:<\/b> utility.h:113<\/div><\/div>$/;"	a
l00001	doc/html/vel2odom_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef VEL2ODOM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define VEL2ODOM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;tf\/transform_broadcaster.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;{<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span>odom_mul<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html">vel2odom<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html">vel2odom<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a035856cdf10a02f7931b1be0a4df146b">cal_odom<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a89c7f78f6ef8e2170581856f7136e79a">   19<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a89c7f78f6ef8e2170581856f7136e79a">x<\/a>;  <\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a0ee3112d31ff8e3c4f49442a2ecde366">   20<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a0ee3112d31ff8e3c4f49442a2ecde366">y<\/a>;  <\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a46120c82f922ad0c41b7942ecdd1b64d">   21<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a46120c82f922ad0c41b7942ecdd1b64d">th<\/a>; <\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#af17edd6e5b319bd298bdda23acdff998">   23<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#af17edd6e5b319bd298bdda23acdff998">vx<\/a>; <\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a6323e45fb9a37ffe5fa16dd13944784e">   24<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a6323e45fb9a37ffe5fa16dd13944784e">vy<\/a>; <\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a7ae1f8f00b23ae7099770a7c56a61e71">   25<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a7ae1f8f00b23ae7099770a7c56a61e71">vth<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  geometry_msgs::Quaternion odom_quat; <span class="comment">\/\/&lt; the quaternion of the car attitude<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  ros::Time current_time;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  ros::Time last_time;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;}<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#endif \/\/ VEL2ODOM_H<\/span><\/div><div class="ttc" id="classautocar_1_1odom__mul_1_1vel2odom_html_a035856cdf10a02f7931b1be0a4df146b"><div class="ttname"><a href="classautocar_1_1odom__mul_1_1vel2odom.html#a035856cdf10a02f7931b1be0a4df146b">autocar::odom_mul::vel2odom::cal_odom<\/a><\/div><div class="ttdeci">void cal_odom()<\/div><div class="ttdoc">Calculating odom from velocity. <\/div><\/div>$/;"	a
l00001	doc/html/version__number_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2005, 2008-2013<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_VERSION_NUMBER_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_VERSION_NUMBER_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">[heading `BOOST_VERSION_NUMBER`]<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">``<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">BOOST_VERSION_NUMBER(major,minor,patch)<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">``<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">Defines standard version numbers, with these properties:<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">* Decimal base whole numbers in the range \\[0,1000000000).<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">  The number range is designed to allow for a (2,2,5) triplet.<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">  Which fits within a 32 bit value.<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">* The `major` number can be in the \\[0,99\\] range.<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">* The `minor` number can be in the \\[0,99\\] range.<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">* The `patch` number can be in the \\[0,99999\\] range.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">* Values can be specified in any base. As the defined value<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">  is an constant expression.<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">* Value can be directly used in both preprocessor and compiler<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">  expressions for comparison to other similarly defined values.<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">* The implementation enforces the individual ranges for the<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">  major, minor, and patch numbers. And values over the ranges<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">  are truncated (modulo).<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER(major,minor,patch) \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    ( (((major)%100)*10000000) + (((minor)%100)*100000) + ((patch)%100000) )<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_MAX \\<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER(99,99,99999)<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_ZERO \\<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER(0,0,0)<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_MIN \\<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER(0,0,1)<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_AVAILABLE \\<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER_MIN<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_NOT_AVAILABLE \\<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER_ZERO<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/video__recoder_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef VIDEO_RECODER<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define VIDEO_RECODER<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1video__recoder.html">   12<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1video__recoder.html">video_recoder<\/a> {<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <a class="code" href="classautocar_1_1vision__mul_1_1video__recoder.html">video_recoder<\/a>(std::string video_dir_=<span class="stringliteral">&quot;\/home\/dji\/Videos&quot;<\/span>, <span class="keywordtype">int<\/span> cols_=1280, <span class="keywordtype">int<\/span> rows_=720);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        ~<a class="code" href="classautocar_1_1vision__mul_1_1video__recoder.html">video_recoder<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        <span class="keywordtype">void<\/span> save_frame(<span class="keyword">const<\/span> cv::Mat &amp;image);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        cv::VideoWriter writer;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        <span class="keywordtype">int<\/span> rows;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        <span class="keywordtype">int<\/span> cols;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    };<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;}<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;}<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#endif \/\/ VIDEO_RECODER<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	doc/html/vins__estimator_2src_2parameters_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> FOCAL_LENGTH = 460.0;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> WINDOW_SIZE = 10;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_OF_CAM = 1;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_OF_F = 1000;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> LOOP_INFO_VALUE = 50.0;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">\/\/#define DEPTH_PRIOR<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">\/\/#define GT<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#define UNIT_SPHERE_ERROR<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> INIT_DEPTH;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> MIN_PARALLAX;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> ESTIMATE_EXTRINSIC;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> ACC_N, ACC_W;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> GYR_N, GYR_W;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">extern<\/span> std::vector&lt;Eigen::Matrix3d&gt; RIC;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">extern<\/span> std::vector&lt;Eigen::Vector3d&gt; TIC;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keyword">extern<\/span> Eigen::Vector3d G;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> BIAS_ACC_THRESHOLD;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> BIAS_GYR_THRESHOLD;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> SOLVER_TIME;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> NUM_ITERATIONS;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">extern<\/span> std::string EX_CALIB_RESULT_PATH;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">extern<\/span> std::string VINS_RESULT_PATH;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">extern<\/span> std::string VINS_FOLDER_PATH;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> LOOP_CLOSURE;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> MIN_LOOP_NUM;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">extern<\/span> std::string PATTERN_FILE;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">extern<\/span> std::string VOC_FILE;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="keyword">extern<\/span> std::string CAM_NAMES;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">extern<\/span> std::string IMAGE_TOPIC;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">extern<\/span> std::string IMU_TOPIC;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keywordtype">void<\/span> readParameters(ros::NodeHandle &amp;n);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="keyword">enum<\/span> SIZE_PARAMETERIZATION<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;{<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    SIZE_POSE = 7,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    SIZE_SPEEDBIAS = 9,<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    SIZE_FEATURE = 1<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">enum<\/span> StateOrder<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;{<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    O_P = 0,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    O_R = 3,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    O_V = 6,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    O_BA = 9,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    O_BG = 12<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;};<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keyword">enum<\/span> NoiseOrder<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;{<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    O_AN = 0,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    O_GN = 3,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    O_AW = 6,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    O_GW = 9<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;};<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/vins__estimator_2src_2utility_2tic__toc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTicToc.html">TicToc<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <a class="code" href="classTicToc.html">TicToc<\/a>()<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;        tic();<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    }<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">void<\/span> tic()<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        start = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">double<\/span> toc()<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    {<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        end = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        std::chrono::duration&lt;double&gt; elapsed_seconds = end - start;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordflow">return<\/span> elapsed_seconds.count() * 1000;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::chrono::time_point&lt;std::chrono::system_clock&gt; start, end;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="ttc" id="classTicToc_html"><div class="ttname"><a href="classTicToc.html">TicToc<\/a><\/div><div class="ttdef"><b>Definition:<\/b> tic_toc.h:7<\/div><\/div>$/;"	a
l00001	doc/html/vision__param_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef VISION_PARAM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define VISION_PARAM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;\/home\/dji\/dji_beta\/auto_car\/src\/param_manager\/include\/param_manager.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;{<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1vision__param.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html">vision_param<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">param_mul::param_manager<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html">vision_param<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html#aff270ce404aa05e505e15aab1de26228">read_params<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <span class="comment">\/\/vision_mul<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  cv::Mat camera_matrix;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  cv::Mat dist_coeffs;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;};<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;}<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;}<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#endif \/\/ VISION_PARAM_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	doc/html/visualization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Header.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Float32.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/Imu.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/PointCloud.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/Image.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/image_encodings.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Path.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Odometry.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PointStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Bool.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;visualization_msgs\/Marker.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;tf\/transform_broadcaster.h&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;CameraPoseVisualization.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;..\/estimator.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_odometry;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_path, pub_pose;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_cloud, pub_map;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_key_poses;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_ref_pose, pub_cur_pose;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_key;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">extern<\/span> nav_msgs::Path path;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_pose_graph;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> IMAGE_ROW, IMAGE_COL;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keywordtype">void<\/span> registerPub(ros::NodeHandle &amp;n);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keywordtype">void<\/span> pubLatestOdometry(<span class="keyword">const<\/span> Eigen::Vector3d &amp;P, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;Q, <span class="keyword">const<\/span> Eigen::Vector3d &amp;V, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keywordtype">void<\/span> printStatistics(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keywordtype">double<\/span> t);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="keywordtype">void<\/span> pubOdometry(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;                Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keywordtype">void<\/span> pubInitialGuess(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keywordtype">void<\/span> pubKeyPoses(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="keywordtype">void<\/span> pubCameraPose(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                   Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="keywordtype">void<\/span> pubPointCloud(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;                   Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keywordtype">void<\/span> pubPoseGraph(<a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>* posegraph, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keywordtype">void<\/span> updateLoopPath(nav_msgs::Path _loop_path);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="keywordtype">void<\/span> pubTF(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;                   Eigen::Matrix3d loop_correct_r);<\/div><div class="ttc" id="classEstimator_html"><div class="ttname"><a href="classEstimator.html">Estimator<\/a><\/div><div class="ttdef"><b>Definition:<\/b> estimator.h:47<\/div><\/div>$/;"	a
label_img_dir	vision_unit/include/vision_unit/detect_factory/labeler.h	/^        std::string label_img_dir;$/;"	m	class:autocar::vision_mul::labeler
label_txt_dir	vision_unit/include/vision_unit/detect_factory/labeler.h	/^        std::string label_txt_dir;$/;"	m	class:autocar::vision_mul::labeler
labeler	vision_unit/include/vision_unit/detect_factory/labeler.h	/^    class labeler {$/;"	c	namespace:autocar::vision_mul
labeler	vision_unit/src/detect_factory/labeler.cpp	/^labeler::labeler(std::string img_dir_, std::string label_img_dir_, std::string label_txt_dir_, int cols_, int rows_) {$/;"	f	class:autocar::vision_mul::labeler
last_time	odometry/include/odometry/vel2odom.h	/^  ros::Time last_time;$/;"	m	class:autocar::odom_mul::vel2odom
left_light	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::RotatedRect left_light;$/;"	m	class:autocar::vision_mul::armor_info
letter__	doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter__"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;_&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_a	doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_a"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;a&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_c	doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_c"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;c&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_d	doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_d"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;d&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_l	doc/html/classes.html	/^<tr><td valign="top"><a class="el" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> (autocar::vision_mul)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_l"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;l&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_p	doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_p"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;p&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_r	doc/html/classes.html	/^<\/td><td valign="top"><a class="el" href="classautocar_1_1serial__mul_1_1comm__write.html">comm_write<\/a> (autocar::serial_mul)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_r"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;r&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_s	doc/html/classes.html	/^<tr><td valign="top"><a class="el" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a> (autocar::vision_mul)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a> (autocar::vision_mul)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_s"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;s&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_t	doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_t"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;t&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_v	doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_v"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;v&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
localStorageSupported	doc/html/navtree.js	/^function localStorageSupported()$/;"	f
lock	rplidar_ros/sdk/src/hal/locker.h	/^    Locker::LOCK_STATUS lock(unsigned long timeout = 0xFFFFFFFF)$/;"	f	class:rp::hal::Locker
m_binary_brightness	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_binary_brightness;$/;"	m	class:autocar::vision_mul::armor_detecter
m_binary_color	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_binary_color;$/;"	m	class:autocar::vision_mul::armor_detecter
m_binary_light	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_binary_light;$/;"	m	class:autocar::vision_mul::armor_detecter
m_common	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_common;$/;"	m	class:autocar::vision_mul::armor_detecter
m_gray	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_gray;$/;"	m	class:autocar::vision_mul::armor_detecter
m_image	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_image;$/;"	m	class:autocar::vision_mul::armor_detecter
m_img_buff	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat m_img_buff[2];$/;"	m	class:autocar::vision_mul::armor_detect_node
m_show	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_show;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_dis_lower	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_dis_lower;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_dis_lower	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_dis_lower = 1.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_dis_upper	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_dis_upper;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_dis_upper	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_dis_upper = 7.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_gray	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_gray;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_gray	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_gray = 100.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_height	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_height;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_height	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_height = 2.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_len	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_len;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_len	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_len = 3.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_max_angle	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_max_angle;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_max_angle	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_max_angle = 30.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_min_area	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_min_area;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_min_area	vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_min_area = 5.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
main	console/src/console.cpp	/^int main(int argc, char** argv)$/;"	f
main	logical_core/src/logical_core_node.cpp	/^int main (int argc, char **argv)$/;"	f
main	odometry/src/vel2odom_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	param_manager/src/param_manager_node.cpp	/^int main()$/;"	f
main	rplidar_ros/src/client.cpp	/^int main(int argc, char **argv)$/;"	f
main	rplidar_ros/src/node.cpp	/^int main(int argc, char * argv[]) {$/;"	f
main	serial_comm/src/comm_read_node.cpp	/^int main(int argc, char *argv[])$/;"	f
main	serial_comm/src/comm_write_node.cpp	/^int main(int argc, char *argv[])$/;"	f
main	tf_tree/src/tf_broadcaster.cpp	/^int main(int argc, char** argv)$/;"	f
main	vision_unit/src/detect_factory/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	vision_unit/src/vision_lidar_fusion/lidar2camera_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^int main(int argc, char **argv)$/;"	f
min	rplidar_ros/sdk/src/rplidar_driver.cpp	43;"	d	file:
model	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   model;$/;"	m	struct:_rplidar_response_device_info_t
move	console/src/console.cpp	/^void move(char cmd)$/;"	f
namespaceDBoW2	doc/html/namespaceDBoW2.js	/^var namespaceDBoW2 =$/;"	v
namespaceDLoopDetector	doc/html/namespaceDLoopDetector.js	/^var namespaceDLoopDetector =$/;"	v
namespaceDUtils	doc/html/namespaceDUtils.js	/^var namespaceDUtils =$/;"	v
namespaceDVision	doc/html/namespaceDVision.js	/^var namespaceDVision =$/;"	v
namespaces	doc/html/namespaces.js	/^var namespaces =$/;"	v
navTo	doc/html/navtree.js	/^function navTo(o,root,hash,relpath)$/;"	f
nested-classes	doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classDUtils_1_1Random.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classUtility.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/namespaceDLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/namespaceDUtils.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/namespaceDVision.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
net	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
newNode	doc/html/navtree.js	/^function newNode(o, po, text, link, childrenData, lastNode)$/;"	f
node.expandToggle.onclick	doc/html/navtree.js	/^    node.expandToggle.onclick = function() {$/;"	f
node.getChildrenUL	doc/html/navtree.js	/^  node.getChildrenUL = function() {$/;"	f
o.node.getChildrenUL	doc/html/navtree.js	/^  o.node.getChildrenUL = function() { return o.node.childrenUL; };$/;"	f
obj_p	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    std::vector<cv::Point3f> obj_p;$/;"	m	class:autocar::vision_mul::armor_detect_node
obj_points	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat obj_points;$/;"	m	class:autocar::vision_mul::armor_detect_node
odom_mul	odometry/include/odometry/vel2odom.h	/^namespace odom_mul$/;"	n	namespace:autocar
odom_mul	odometry/src/vel2odom.cpp	/^namespace odom_mul$/;"	n	namespace:autocar	file:
odom_quat	odometry/include/odometry/vel2odom.h	/^  geometry_msgs::Quaternion odom_quat; \/\/< the quaternion of the car attitude$/;"	m	class:autocar::odom_mul::vel2odom
offset_angles_q3	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8    offset_angles_q3;  $/;"	m	struct:_rplidar_response_cabin_nodes_t
offsetof	rplidar_ros/sdk/src/hal/util.h	55;"	d
open	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::open(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
open	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::open(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
open	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::open(const char * portname, _u32 baudrate, _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
operator ==	rplidar_ros/sdk/src/hal/thread.h	/^    bool operator== ( const Thread & right) { return this->_handle == right._handle; }$/;"	f	class:rp::hal::Thread
pan_title_pitch	serial_comm/include/comm_read.h	/^  float pan_title_pitch;$/;"	m	struct:autocar::serial_mul::__anon2
pan_title_yaw	serial_comm/include/comm_read.h	/^  float pan_title_yaw;$/;"	m	struct:autocar::serial_mul::__anon2
param	tf_tree/include/tf_tree/tf_factory.h	/^  tf_param param;$/;"	m	class:autocar::tf_mul::tf_factory
param	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    vision_param *param;$/;"	m	class:autocar::vision_mul::armor_detect_node
param_manager	param_manager/include/param_manager.h	/^class param_manager$/;"	c	namespace:autocar::param_mul
param_manager	param_manager/src/param_manager.cpp	/^param_manager::param_manager()$/;"	f	class:autocar::param_mul::param_manager
param_mul	param_manager/include/param_manager.h	/^namespace param_mul$/;"	n	namespace:autocar
param_mul	param_manager/src/param_manager.cpp	/^namespace param_mul$/;"	n	namespace:autocar	file:
pathName	doc/html/navtree.js	/^function pathName()$/;"	f
patrol_list	logical_core/src/logical_core_node.cpp	/^    std::vector<move_base_msgs::MoveBaseGoal> patrol_list;$/;"	m	class:Brain	file:
point_in_line	vision_unit/src/detect_factory/image_utility.cpp	/^bool point_in_line(const T &point1, const T &point2, const T &point)$/;"	f	namespace:autocar::vision_mul
point_to_line	vision_unit/src/detect_factory/image_utility.cpp	/^double point_to_line(double coefficient, double intercept, const T &point)$/;"	f	namespace:autocar::vision_mul
possible_armors	vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<armor_info> armor_detecter::possible_armors(const std::vector<cv::RotatedRect> &lights, float thres_max_angle, float thres_dis_lower, float thres_dis_upper, float thres_len, float thres_height, float thres_gray, bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
priority_val_t	rplidar_ros/sdk/src/hal/thread.h	/^    enum priority_val_t$/;"	g	class:rp::hal::Thread
pro-attribs	doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classDUtils_1_1DException.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classautocar_1_1param__mul_1_1param__manager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classcamodocal_1_1Camera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-methods	doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	doc/html/classdemoDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-types	doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
pro-types	doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
pub	vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  ros::Publisher pub;$/;"	m	class:Lidar2Camera
pub-attribs	doc/html/classCameraPoseVisualization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classFeatureManager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classFeaturePerFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classFeaturePerId.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classFeatureTracker.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classIMUFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classImageFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classIntegrationBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classKeyFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classLoopClosure.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classMarginalizationFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classMarginalizationInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classProjectionFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classautocar_1_1odom__mul_1_1vel2odom.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classautocar_1_1serial__mul_1_1comm__read.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classautocar_1_1serial__mul_1_1serial__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classautocar_1_1vision__mul_1_1armor__info.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classautocar_1_1vision__mul_1_1vision__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classcamodocal_1_1ChessboardCorner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classcamodocal_1_1ChessboardQuad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classdemoDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/classtf__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structDLoopDetector_1_1DetectionResult.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structFourDOFError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structFourDOFWeightError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structRelativeRTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structRelativeTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structReprojectionError3D.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structResidualBlockInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structRetriveData.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structSFMFeature.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structThreadsStruct.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structautocar_1_1serial__mul_1_1____attribute____.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structautocar_1_1vision__mul_1_1vision__param__pkg.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structcv__bridge_1_1CvtColorForDisplayOptions.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-methods	doc/html/classAngleLocalParameterization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classBriefExtractor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classCameraPoseVisualization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1BowVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1FeatureVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1GeneralScoring.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1QueryResults.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDUtils_1_1DException.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classFeatureExtractor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classFeatureManager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classFeaturePerFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classFeaturePerId.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classFeatureTracker.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classGlobalSFM.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classIMUFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classImageFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classInitialEXRotation.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classIntegrationBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classKeyFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classKeyFrameDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classLoopClosure.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classMarginalizationFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classMarginalizationInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classMotionEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classProjectionFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classSpline.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classTicToc.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classUtility.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1odom__mul_1_1vel2odom.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1param__mul_1_1param__manager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1serial__mul_1_1comm__read.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1serial__mul_1_1comm__write.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1serial__mul_1_1serial__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1tf__mul_1_1tf__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1tf__mul_1_1tf__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1thread__operation.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1armor__detect__node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1armor__detecter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1armor__info.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1detect__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1labeler.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1rune__detect.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1thread__operation.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1video__recoder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classautocar_1_1vision__mul_1_1vision__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1CameraCalibration.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1CameraFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1Camera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1CataCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1Chessboard.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1ChessboardCorner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1CostFunctionFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1EigenQuaternionParameterization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcamodocal_1_1Transform.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classcv__bridge_1_1Exception.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classdemoDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classdetect__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/classtf__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structDLoopDetector_1_1DetectionResult.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structFourDOFError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structFourDOFWeightError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structRelativeRTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structRelativeTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structReprojectionError3D.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structResidualBlockInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	doc/html/structTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-static-attribs	doc/html/classDBoW2_1_1GeneralScoring.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doc/html/classFeatureTracker.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doc/html/classProjectionFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-methods	doc/html/classAngleLocalParameterization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classDBoW2_1_1FBrief.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classDUtils_1_1Random.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classUtility.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classcamodocal_1_1CameraFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classcamodocal_1_1CostFunctionFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structFourDOFError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structFourDOFWeightError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structRelativeRTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structRelativeTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structReprojectionError3D.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	doc/html/structTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-types	doc/html/classDBoW2_1_1FBrief.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doc/html/classEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doc/html/classSpline.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pubData	serial_comm/include/comm_read.h	/^  serial_comm::car_speed pubData;$/;"	m	class:autocar::serial_mul::comm_read
pubData	serial_comm/include/comm_write.h	/^  std_msgs::String pubData;$/;"	m	class:autocar::serial_mul::comm_write
pub_armor_pos	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    ros::Publisher pub_armor_pos;$/;"	m	class:autocar::vision_mul::armor_detect_node
pub_goal	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    ros::Publisher pub_goal;$/;"	m	class:autocar::vision_mul::armor_detect_node
publish_scan	rplidar_ros/src/node.cpp	/^void publish_scan(ros::Publisher *pub,$/;"	f
pwm_value	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16 pwm_value;$/;"	m	struct:_rplidar_payload_motor_pwm_t
quaternion	tf_tree/include/tf_tree/tf_factory.h	/^  tf::Quaternion *quaternion;$/;"	m	class:autocar::tf_mul::tf_factory
raw_serial	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
raw_serial	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
raw_serial	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
readCookie	doc/html/resize.js	/^function readCookie(cookie) $/;"	f
read_data	serial_comm/src/comm_read.cpp	/^void comm_read::read_data()$/;"	f	class:autocar::serial_mul::comm_read
read_init	serial_comm/src/comm_read.cpp	/^void comm_read::read_init()$/;"	f	class:autocar::serial_mul::comm_read
read_param	serial_comm/include/comm_read.h	/^  serial_param read_param;$/;"	m	class:autocar::serial_mul::comm_read
read_params	serial_comm/src/serial_param.cpp	/^void serial_param::read_params()$/;"	f	class:autocar::serial_mul::serial_param
read_params	tf_tree/src/tf_param.cpp	/^void tf_param::read_params()$/;"	f	class:autocar::tf_mul::tf_param
read_params	vision_unit/include/vision_unit/detect_factory/vision_param.cpp	/^void vision_param::read_params()$/;"	f	class:autocar::vision_mul::vision_param
read_params	vision_unit/src/detect_factory/vision_param.cpp	/^void vision_param::read_params()$/;"	f	class:autocar::vision_mul::vision_param
read_setup	serial_comm/src/comm_read.cpp	/^bool comm_read::read_setup()$/;"	f	class:autocar::serial_mul::comm_read
receive_armor_info	vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^void VisionLidarFusion::receive_armor_info(const vision_unit::armor_msgConstPtr armor_info)$/;"	f	class:VisionLidarFusion
recvdata	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, _word_size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
release	rplidar_ros/sdk/src/hal/event.h	/^    void release()$/;"	f	class:rp::hal::Event
release	rplidar_ros/sdk/src/hal/locker.h	/^    void    release()$/;"	f	class:rp::hal::Locker
removeToInsertLater	doc/html/navtree.js	/^function removeToInsertLater(element) {$/;"	f
required_rx_cnt	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    size_t required_rx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_rx_cnt	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    size_t required_rx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_tx_cnt	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    size_t required_tx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_tx_cnt	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    size_t required_tx_cnt;$/;"	m	class:rp::arch::net::raw_serial
reserved	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u32  reserved;$/;"	m	struct:_rplidar_payload_express_scan_t
reserved	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u32 reserved;$/;"	m	struct:_rplidar_payload_acc_board_flag_t
reset	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::reset(_u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
resizeHeight	doc/html/resize.js	/^function resizeHeight() $/;"	f
resizeWidth	doc/html/resize.js	/^function resizeWidth() $/;"	f
restoreWidth	doc/html/resize.js	/^function restoreWidth(navWidth)$/;"	f
right_light	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::RotatedRect right_light;$/;"	m	class:autocar::vision_mul::armor_info
root	param_manager/include/param_manager.h	/^  cv::FileNode root;$/;"	m	class:autocar::param_mul::param_manager
rows	vision_unit/include/vision_unit/detect_factory/labeler.h	/^        int rows;$/;"	m	class:autocar::vision_mul::labeler
rows	vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^        int rows;$/;"	m	class:autocar::vision_mul::video_recoder
rp	rplidar_ros/sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	rplidar_ros/sdk/src/arch/linux/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/linux/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/macOS/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	rplidar_ros/sdk/src/arch/win32/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	rplidar_ros/sdk/src/arch/win32/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^namespace rp{ namespace hal{$/;"	n
rp	rplidar_ros/sdk/src/hal/event.h	/^namespace rp{ namespace hal{$/;"	n
rp	rplidar_ros/sdk/src/hal/locker.h	/^namespace rp{ namespace hal{ $/;"	n
rp	rplidar_ros/sdk/src/hal/thread.h	/^namespace rp{ namespace hal{$/;"	n
rp	rplidar_ros/sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	file:
rp	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp_getms	rplidar_ros/sdk/src/arch/linux/timer.cpp	/^_u32 rp_getms()$/;"	f	namespace:rp::arch
rp_getms	rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^_u32 rp_getms()$/;"	f	namespace:rp::arch
rp_getus	rplidar_ros/sdk/src/arch/linux/timer.cpp	/^_u64 rp_getus()$/;"	f	namespace:rp::arch
rplidar	rplidar_ros/sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar	rplidar_ros/sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone	file:
rplidar	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar_ans_header_t	rplidar_ros/sdk/include/rplidar_protocol.h	/^} __attribute__((packed)) rplidar_ans_header_t;$/;"	t	typeref:struct:_rplidar_ans_header_t
rplidar_cmd_packet_t	rplidar_ros/sdk/include/rplidar_protocol.h	/^} __attribute__((packed)) rplidar_cmd_packet_t;$/;"	t	typeref:struct:_rplidar_cmd_packet_t
rplidar_payload_acc_board_flag_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_payload_acc_board_flag_t
rplidar_payload_express_scan_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_express_scan_t;$/;"	t	typeref:struct:_rplidar_payload_express_scan_t
rplidar_payload_motor_pwm_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_motor_pwm_t;$/;"	t	typeref:struct:_rplidar_payload_motor_pwm_t
rplidar_response_acc_board_flag_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_response_acc_board_flag_t
rplidar_response_cabin_nodes_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_cabin_nodes_t;   $/;"	t	typeref:struct:_rplidar_response_cabin_nodes_t
rplidar_response_capsule_measurement_nodes_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_capsule_measurement_nodes_t
rplidar_response_device_health_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_health_t;$/;"	t	typeref:struct:_rplidar_response_device_health_t
rplidar_response_device_info_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_info_t;$/;"	t	typeref:struct:_rplidar_response_device_info_t
rplidar_response_measurement_node_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_measurement_node_t;$/;"	t	typeref:struct:_rplidar_response_measurement_node_t
rplidar_response_sample_rate_t	rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_sample_rate_t;$/;"	t	typeref:struct:_rplidar_response_sample_rate_t
rune_detect	vision_unit/include/vision_unit/detect_factory/rune_detect.h	/^class rune_detect: public detect_factory$/;"	c	namespace:autocar::vision_mul
rune_detect	vision_unit/src/detect_factory/rune_detect.cpp	/^rune_detect::rune_detect()$/;"	f	class:autocar::vision_mul::rune_detect
running	vision_unit/src/detect_factory/armor_detect_node.cpp	/^void armor_detect_node::running(void)$/;"	f	class:autocar::vision_mul::armor_detect_node
rvec	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat rvec;$/;"	m	class:autocar::vision_mul::armor_detect_node
rxqueue_count	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
rxqueue_count	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
rxqueue_count	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
s_checksum_1	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_1; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
s_checksum_2	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_2; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
save_frame	vision_unit/src/detect_factory/video_recoder.cpp	/^void video_recoder::save_frame(const cv::Mat &image)$/;"	f	class:autocar::vision_mul::video_recoder
scanCallback	rplidar_ros/src/client.cpp	/^void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)$/;"	f
scan_	vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  sensor_msgs::LaserScan scan_;$/;"	m	class:Lidar2Camera
score	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  float score;$/;"	m	class:autocar::vision_mul::armor_info
script.onreadystatechange	doc/html/navtree.js	/^    script.onreadystatechange = function() {$/;"	f
searchData	doc/html/search/all_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_10.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_11.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_12.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_13.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_14.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_15.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_16.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_17.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_18.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_19.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_d.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_e.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_f.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_10.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_11.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_12.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_13.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_14.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_d.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_e.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_f.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/enumvalues_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/enumvalues_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/enumvalues_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/enumvalues_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_10.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_11.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_12.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_13.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_14.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_15.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_d.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_e.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_f.js	/^var searchData=$/;"	v
searchData	doc/html/search/namespaces_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/pages_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/related_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_10.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_11.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_12.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_13.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_14.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_15.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_16.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_d.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_e.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_f.js	/^var searchData=$/;"	v
selectAndHighlight	doc/html/navtree.js	/^function selectAndHighlight(hash,n)$/;"	f
sendGoal	logical_core/src/logical_core_node.cpp	/^    void sendGoal()$/;"	f	class:Brain
send_goal_srv	logical_core/src/logical_core_node.cpp	/^    ros::Subscriber send_goal_srv;$/;"	m	class:Brain	file:
senddata	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, _word_size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
serial_baudrate	serial_comm/include/comm_read.h	/^  int serial_baudrate;$/;"	m	class:autocar::serial_mul::comm_read
serial_baudrate	serial_comm/include/comm_write.h	/^  int serial_baudrate;$/;"	m	class:autocar::serial_mul::comm_write
serial_baudrate	serial_comm/include/serial_param.h	/^  int serial_baudrate;$/;"	m	class:autocar::serial_mul::serial_param
serial_fd	rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    int serial_fd;$/;"	m	class:rp::arch::net::raw_serial
serial_fd	rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    int serial_fd;$/;"	m	class:rp::arch::net::raw_serial
serial_mul	serial_comm/include/comm_read.h	/^namespace serial_mul$/;"	n	namespace:autocar
serial_mul	serial_comm/include/comm_write.h	/^namespace serial_mul$/;"	n	namespace:autocar
serial_mul	serial_comm/include/serial_param.h	/^namespace serial_mul$/;"	n	namespace:autocar
serial_mul	serial_comm/src/comm_read.cpp	/^namespace serial_mul$/;"	n	namespace:autocar	file:
serial_mul	serial_comm/src/comm_write.cpp	/^namespace serial_mul$/;"	n	namespace:autocar	file:
serial_mul	serial_comm/src/serial_param.cpp	/^namespace serial_mul$/;"	n	namespace:autocar	file:
serial_param	serial_comm/include/serial_param.h	/^class serial_param: public autocar::param_mul::param_manager$/;"	c	namespace:autocar::serial_mul
serial_param	serial_comm/src/serial_param.cpp	/^serial_param::serial_param()$/;"	f	class:autocar::serial_mul::serial_param
serial_port	serial_comm/include/serial_param.h	/^  std::string serial_port;$/;"	m	class:autocar::serial_mul::serial_param
serial_rxtx	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    serial_rxtx():_is_serial_opened(false){}$/;"	f	class:rp::hal::serial_rxtx
serial_rxtx	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^class serial_rxtx$/;"	c	namespace:rp::hal
serialnum	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   serialnum[16];$/;"	m	struct:_rplidar_response_device_info_t
set	rplidar_ros/sdk/src/hal/event.h	/^    void set( bool isSignal = true )$/;"	f	class:rp::hal::Event
setClassAttr	doc/html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setDTR	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setKeyActions	doc/html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setMotorPWM	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::setMotorPWM(_u16 pwm)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
setPriority	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setPriority	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setPriority	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
set_camera_exposure	vision_unit/src/detect_factory/util.cpp	/^int set_camera_exposure(std::string id, int val)$/;"	f	namespace:autocar::vision_mul
set_image_points	vision_unit/src/detect_factory/armor_detect_node.cpp	/^void armor_detect_node::set_image_points(cv::RotatedRect rect)$/;"	f	class:autocar::vision_mul::armor_detect_node
showNode	doc/html/navtree.js	/^function showNode(o, node, index, hash)$/;"	f
showRoot	doc/html/navtree.js	/^function showRoot()$/;"	f
showSyncOff	doc/html/navtree.js	/^function showSyncOff(n,relpath)$/;"	f
showSyncOn	doc/html/navtree.js	/^function showSyncOn(n,relpath)$/;"	f
sidenav	doc/html/resize.js	/^var sidenav,navtree,content,header;$/;"	v
size	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 size;$/;"	m	struct:_rplidar_cmd_packet_t
size_q30_subtype	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u32 size_q30_subtype; \/\/ see _u32 size:30; _u32 subType:2;$/;"	m	struct:_rplidar_ans_header_t
slect_final_armor	vision_unit/src/detect_factory/armor_detect.cpp	/^void armor_detecter::slect_final_armor(std::vector<armor_info> all_armors)$/;"	f	class:autocar::vision_mul::armor_detecter
sof	serial_comm/include/comm_read.h	/^  uint8_t sof;$/;"	m	struct:autocar::serial_mul::__anon2
sof	serial_comm/include/comm_write.h	/^    uint8_t sof;$/;"	m	struct:autocar::serial_mul::__anon1
solver	odometry/src/vel2odom_node.cpp	/^autocar::odom_mul::vel2odom solver;$/;"	v
speed2pos	odometry/src/vel2odom_node.cpp	/^void speed2pos(const odometry::car_speed car_vel)$/;"	f
speed_test_begin	vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	12;"	d
speed_test_end	vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	13;"	d
speed_test_reset	vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	16;"	d
speed_test_start_begin_time	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  std::chrono::system_clock::time_point speed_test_start_begin_time;$/;"	m	class:autocar::vision_mul::armor_detecter
squaredist	vision_unit/src/detect_factory/image_utility.cpp	/^double squaredist(T x1, T y1, T x2, T y2)$/;"	f	namespace:autocar::vision_mul
squaredist	vision_unit/src/detect_factory/image_utility.cpp	/^double squaredist(const cv::Point_<T> &point1, const cv::Point_<T> &point2)$/;"	f	namespace:autocar::vision_mul
standalone	rplidar_ros/sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
standalone	rplidar_ros/sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp	file:
standalone	rplidar_ros/sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
startMotor	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startMotor()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
startScan	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startScan(bool force, bool autoExpressMode)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
startScanExpress	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startScanExpress(bool fixedAngle, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
startScanNormal	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startScanNormal(bool force, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
start_angle_sync_q6	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16                            start_angle_sync_q6;$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
start_motor	rplidar_ros/src/node.cpp	/^bool start_motor(std_srvs::Empty::Request &req,$/;"	f
status	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   status;$/;"	m	struct:_rplidar_response_device_health_t
std_sample_duration_us	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  std_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
stop	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::stop(_u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
stopMotor	rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::stopMotor()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
stop_motor	rplidar_ros/src/node.cpp	/^bool stop_motor(std_srvs::Empty::Request &req,$/;"	f
storeLink	doc/html/navtree.js	/^function storeLink(link)$/;"	f
stripPath	doc/html/navtree.js	/^function stripPath(uri)$/;"	f
stripPath2	doc/html/navtree.js	/^function stripPath2(uri)$/;"	f
structDBoW2_1_1TemplatedDatabase_1_1IFPair	doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.js	/^var structDBoW2_1_1TemplatedDatabase_1_1IFPair =$/;"	v
structDBoW2_1_1TemplatedVocabulary_1_1Node	doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.js	/^var structDBoW2_1_1TemplatedVocabulary_1_1Node =$/;"	v
structDLoopDetector_1_1DetectionResult	doc/html/structDLoopDetector_1_1DetectionResult.js	/^var structDLoopDetector_1_1DetectionResult =$/;"	v
structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.js	/^var structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters =$/;"	v
structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999	doc/html/navtreeindex5.js	/^"structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999":[2,0,4,1,0,16],$/;"	p	class:NAVTREEINDEX5
structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.js	/^var structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland =$/;"	v
structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow	doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.js	/^var structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow =$/;"	v
structFourDOFError	doc/html/structFourDOFError.js	/^var structFourDOFError =$/;"	v
structFourDOFWeightError	doc/html/structFourDOFWeightError.js	/^var structFourDOFWeightError =$/;"	v
structRelativeRTError	doc/html/structRelativeRTError.js	/^var structRelativeRTError =$/;"	v
structRelativeTError	doc/html/structRelativeTError.js	/^var structRelativeTError =$/;"	v
structReprojectionError3D	doc/html/structReprojectionError3D.js	/^var structReprojectionError3D =$/;"	v
structResidualBlockInfo	doc/html/structResidualBlockInfo.js	/^var structResidualBlockInfo =$/;"	v
structRetriveData	doc/html/structRetriveData.js	/^var structRetriveData =$/;"	v
structSFMFeature	doc/html/structSFMFeature.js	/^var structSFMFeature =$/;"	v
structTError	doc/html/structTError.js	/^var structTError =$/;"	v
structThreadsStruct	doc/html/structThreadsStruct.js	/^var structThreadsStruct =$/;"	v
structautocar_1_1serial__mul_1_1____attribute____	doc/html/structautocar_1_1serial__mul_1_1____attribute____.js	/^var structautocar_1_1serial__mul_1_1____attribute____ =$/;"	v
structautocar_1_1vision__mul_1_1vision__param__pkg	doc/html/structautocar_1_1vision__mul_1_1vision__param__pkg.js	/^var structautocar_1_1vision__mul_1_1vision__param__pkg =$/;"	v
structcv__bridge_1_1CvtColorForDisplayOptions	doc/html/structcv__bridge_1_1CvtColorForDisplayOptions.js	/^var structcv__bridge_1_1CvtColorForDisplayOptions =$/;"	v
sub	vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  ros::Subscriber sub;$/;"	m	class:Lidar2Camera
sub_camera_	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  ros::Subscriber sub_camera_;$/;"	m	class:VisionLidarFusion
sub_transformed_scan_	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  ros::Subscriber sub_transformed_scan_;$/;"	m	class:VisionLidarFusion
subdirs	doc/html/dir_125e7f126f10d6d82b7727e2eff633b9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_1c86866f58725cbc8a8f650f634c1b21.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_21bdf9efc55dbdf1c7a01a5eabaeccb8.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_22f04675140458f12f752464d75b29ad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_2bb129e7572810fca886dae68ff69a2d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_2d88a95eaf792b93d8dec6cb3cf8eb68.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_31eaaf881da50199d59a94e947ea09d5.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_3774b78f742e86463f186103299b33c9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_39903b13293b03099f869299802630f2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_3d75f7bea507c05bdccef4eecb546379.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_42cb5db3f120f5eca9d021e3f70e81f6.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_42e0a74288423937a6d783277b641c4e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_53ac1b8e7cb4cf6a35b6d485fd55775b.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_5feeefd5aff41c940a705f28e2f7b4d1.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_632d0589b82df931c46f0fd2ca768715.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_76433691e77e9eb1884f75d25ab2ceb7.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_819ee5dbf222308ee69c59d4c1bb6efa.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_8adc25141e02ebb8b2a2682caaec5a6c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_8fa1f859b2f210d40eee8c0b93403892.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_941c1786eb1aa1d366208c95a3435d32.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_97fcdfbdeedbfe8fea1533b76877713c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_9cf2f5a20d4216a00ddbaafe1985cc3f.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_bb6dc18ce3effbc13de7245017d598a9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_bd6308583a59b667b7c3bf18085fc557.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_c85daa479f1bda18639ed32774ca9257.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	doc/html/dir_e8f682ed1d0bb9523fd3c2d0b01524b6.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
support_flag	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u32 support_flag;$/;"	m	struct:_rplidar_response_acc_board_flag_t
syncByte	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 syncByte; \/\/must be RPLIDAR_CMD_SYNC_BYTE$/;"	m	struct:_rplidar_cmd_packet_t
syncByte1	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8  syncByte1; \/\/ must be RPLIDAR_ANS_SYNC_BYTE1$/;"	m	struct:_rplidar_ans_header_t
syncByte2	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8  syncByte2; \/\/ must be RPLIDAR_ANS_SYNC_BYTE2$/;"	m	struct:_rplidar_ans_header_t
sync_quality	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8    sync_quality;      \/\/ syncbit:1;syncbit_inverse:1;quality:6;$/;"	m	struct:_rplidar_response_measurement_node_t
terminate	rplidar_ros/sdk/src/arch/linux/thread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
terminate	rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
terminate	rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
tf_factory	tf_tree/include/tf_tree/tf_factory.h	/^class tf_factory$/;"	c	namespace:autocar::tf_mul
tf_factory	tf_tree/src/tf_factory.cpp	/^tf_factory::tf_factory()$/;"	f	class:autocar::tf_mul::tf_factory
tf_mul	tf_tree/include/tf_tree/tf_factory.h	/^namespace tf_mul$/;"	n	namespace:autocar
tf_mul	tf_tree/include/tf_tree/tf_param.h	/^namespace tf_mul$/;"	n	namespace:autocar
tf_mul	tf_tree/src/tf_factory.cpp	/^namespace tf_mul$/;"	n	namespace:autocar	file:
tf_mul	tf_tree/src/tf_param.cpp	/^namespace tf_mul$/;"	n	namespace:autocar	file:
tf_param	tf_tree/include/tf_tree/tf_param.h	/^class tf_param: public autocar::param_mul::param_manager$/;"	c	namespace:autocar::tf_mul
tf_param	tf_tree/src/tf_param.cpp	/^tf_param::tf_param()$/;"	f	class:autocar::tf_mul::tf_param
th	odometry/include/odometry/vel2odom.h	/^  double th; \/\/\/< yaw-axis coordinates of the car in map$/;"	m	class:autocar::odom_mul::vel2odom
thread_proc_t	rplidar_ros/sdk/include/rptypes.h	/^typedef _word_size_t (THREAD_PROC * thread_proc_t ) ( void * );$/;"	t
to_light_rects	vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<cv::RotatedRect> armor_detecter::to_light_rects(const std::vector<std::vector<cv::Point>> &contours_light, const std::vector<std::vector<cv::Point>> &contours_brightness)$/;"	f	class:autocar::vision_mul::armor_detecter
toggleFolder	doc/html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	doc/html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	doc/html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleSyncButton	doc/html/navtree.js	/^function toggleSyncButton(relpath)$/;"	f
toggleVisibility	doc/html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
trans	tf_tree/include/tf_tree/tf_factory.h	/^  tf::Vector3 *trans;$/;"	m	class:autocar::tf_mul::tf_factory
transfData	vision_unit/src/vision_lidar_fusion/lidar2camera_node.cpp	/^void Lidar2Camera::transfData(const sensor_msgs::LaserScan::ConstPtr scan)$/;"	f	class:Lidar2Camera
transformed_scan_	vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  vision_unit::transformed_scan transformed_scan_;$/;"	m	class:Lidar2Camera
tvec	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat tvec;$/;"	m	class:autocar::vision_mul::armor_detect_node
type	rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8  type;$/;"	m	struct:_rplidar_ans_header_t
type	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  int type;$/;"	m	class:autocar::vision_mul::armor_info
typedef-members	doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
u_result	rplidar_ros/sdk/include/rptypes.h	/^typedef uint32_t u_result;$/;"	t
uint16_t	rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint32_t	rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint64_t	rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned __int64  uint64_t;$/;"	t
uint8_t	rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned char     uint8_t;$/;"	t
unlock	rplidar_ros/sdk/src/hal/locker.h	/^    void unlock()$/;"	f	class:rp::hal::Locker
updateStripes	doc/html/dynsections.js	/^function updateStripes()$/;"	f
v_w	serial_comm/include/comm_read.h	/^  int16_t v_w;$/;"	m	struct:autocar::serial_mul::__anon2
v_x	serial_comm/include/comm_read.h	/^  int16_t v_x;$/;"	m	struct:autocar::serial_mul::__anon2
v_y	serial_comm/include/comm_read.h	/^  int16_t v_y;$/;"	m	struct:autocar::serial_mul::__anon2
vel2odom	odometry/include/odometry/vel2odom.h	/^class vel2odom$/;"	c	namespace:autocar::odom_mul
vel2odom	odometry/src/vel2odom.cpp	/^vel2odom::vel2odom():x(0.0), y(0.0), th(0.0), vx(0.0), vy(0.0), vth(0.0)$/;"	f	class:autocar::odom_mul::vel2odom
vel_callback	serial_comm/src/comm_write_node.cpp	/^void vel_callback(const geometry_msgs::Twist& vel_data)$/;"	f
video_recoder	vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^    class video_recoder {$/;"	c	namespace:autocar::vision_mul
video_recoder	vision_unit/src/detect_factory/video_recoder.cpp	/^video_recoder::video_recoder(std::string video_dir_, int cols_, int rows_)$/;"	f	class:autocar::vision_mul::video_recoder
visionLidar_fusion	vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^VisionLidarFusion::visionLidar_fusion()$/;"	f	class:VisionLidarFusion
vision_callback	serial_comm/src/comm_write_node.cpp	/^void vision_callback(const vision_unit::armor_msg& vision_data)$/;"	f
vision_data_h	serial_comm/include/comm_write.h	/^    int16_t vision_data_h;$/;"	m	struct:autocar::serial_mul::__anon1
vision_data_status	serial_comm/include/comm_write.h	/^    uint8_t vision_data_status;$/;"	m	struct:autocar::serial_mul::__anon1
vision_data_w	serial_comm/include/comm_write.h	/^    int16_t vision_data_w;$/;"	m	struct:autocar::serial_mul::__anon1
vision_data_x	serial_comm/include/comm_write.h	/^    int16_t vision_data_x;$/;"	m	struct:autocar::serial_mul::__anon1
vision_data_y	serial_comm/include/comm_write.h	/^    int16_t vision_data_y;$/;"	m	struct:autocar::serial_mul::__anon1
vision_mul	vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/detect_factory.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/image_utility.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/labeler.h	/^namespace vision_mul {$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/rune_detect.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/util.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/include/vision_unit/detect_factory/vision_param.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/include/vision_unit/detect_factory/vision_param.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	vision_unit/src/detect_factory/armor_detect.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/armor_detect_node.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/image_utility.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/labeler.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/rune_detect.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/util.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/video_recoder.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	vision_unit/src/detect_factory/vision_param.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_param	vision_unit/include/vision_unit/detect_factory/vision_param.cpp	/^vision_param::vision_param()$/;"	f	class:autocar::vision_mul::vision_param
vision_param	vision_unit/include/vision_unit/detect_factory/vision_param.h	/^class vision_param: public param_mul::param_manager$/;"	c	namespace:autocar::vision_mul
vision_param	vision_unit/src/detect_factory/vision_param.cpp	/^vision_param::vision_param()$/;"	f	class:autocar::vision_mul::vision_param
vth	odometry/include/odometry/vel2odom.h	/^  double vth;\/\/\/< yaw-axis velocity of the car$/;"	m	class:autocar::odom_mul::vel2odom
vx	odometry/include/odometry/vel2odom.h	/^  double vx; \/\/\/< x-axis velocity of the car$/;"	m	class:autocar::odom_mul::vel2odom
vy	odometry/include/odometry/vel2odom.h	/^  double vy; \/\/\/< y-axis velocity of the car$/;"	m	class:autocar::odom_mul::vel2odom
wait	rplidar_ros/sdk/src/hal/event.h	/^    unsigned long wait( unsigned long timeout = 0xFFFFFFFF )$/;"	f	class:rp::hal::Event
waitfordata	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitfordata(size_t data_count, _u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitfordata(_word_size_t data_count, _u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitfordata(size_t data_count, _u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
working_mode	rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   working_mode;$/;"	m	struct:_rplidar_payload_express_scan_t
writeCookie	doc/html/resize.js	/^function writeCookie(cookie, val, expiration) $/;"	f
write_data	serial_comm/src/comm_write.cpp	/^void comm_write::write_data(autocar::serial_mul::data_t data_to_write)$/;"	f	class:autocar::serial_mul::comm_write
write_param	serial_comm/include/comm_write.h	/^  serial_param write_param;$/;"	m	class:autocar::serial_mul::comm_write
write_setup	serial_comm/src/comm_write.cpp	/^bool comm_write::write_setup()$/;"	f	class:autocar::serial_mul::comm_write
writer	vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^        cv::VideoWriter writer;$/;"	m	class:autocar::vision_mul::video_recoder
x	odometry/include/odometry/vel2odom.h	/^  double x;  \/\/\/< X-axis coordinates of the car in map$/;"	m	class:autocar::odom_mul::vel2odom
x	serial_comm/include/comm_read.h	/^  uint32_t x;$/;"	m	struct:autocar::serial_mul::__anon2
x	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double x;$/;"	m	struct:AbsPos
x	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double x;$/;"	m	struct:RelPos
y	odometry/include/odometry/vel2odom.h	/^  double y;  \/\/\/< y-axis coordinates of the car in map$/;"	m	class:autocar::odom_mul::vel2odom
y	serial_comm/include/comm_read.h	/^  uint32_t y;$/;"	m	struct:autocar::serial_mul::__anon2
y	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double y;$/;"	m	struct:AbsPos
y	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double y;$/;"	m	struct:RelPos
z	serial_comm/include/comm_read.h	/^  uint32_t z;$/;"	m	struct:autocar::serial_mul::__anon2
z	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double z;$/;"	m	struct:AbsPos
z	vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double z;$/;"	m	struct:RelPos
~AutoLocker	rplidar_ros/sdk/src/hal/locker.h	/^    ~AutoLocker() {_binded.unlock();}$/;"	f	class:rp::hal::AutoLocker
~Event	rplidar_ros/sdk/src/hal/event.h	/^    ~ Event()$/;"	f	class:rp::hal::Event
~Locker	rplidar_ros/sdk/src/hal/locker.h	/^    ~Locker()$/;"	f	class:rp::hal::Locker
~RPlidarDriver	rplidar_ros/sdk/include/rplidar_driver.h	/^    virtual ~RPlidarDriver() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
~RPlidarDriverSerialImpl	rplidar_ros/sdk/src/rplidar_driver.cpp	/^RPlidarDriverSerialImpl::~RPlidarDriverSerialImpl()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
~Thread	rplidar_ros/sdk/src/hal/thread.h	/^    ~Thread() { }$/;"	f	class:rp::hal::Thread
~armor_detect_node	vision_unit/src/detect_factory/armor_detect_node.cpp	/^armor_detect_node::~armor_detect_node(void)$/;"	f	class:autocar::vision_mul::armor_detect_node
~comm_read	serial_comm/src/comm_read.cpp	/^comm_read::~comm_read()$/;"	f	class:autocar::serial_mul::comm_read
~comm_write	serial_comm/src/comm_write.cpp	/^comm_write::~comm_write()$/;"	f	class:autocar::serial_mul::comm_write
~labeler	vision_unit/src/detect_factory/labeler.cpp	/^labeler::~labeler() {$/;"	f	class:autocar::vision_mul::labeler
~raw_serial	rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~raw_serial	rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~raw_serial	rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~serial_rxtx	rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    virtual ~serial_rxtx(){}$/;"	f	class:rp::hal::serial_rxtx
~video_recoder	vision_unit/src/detect_factory/video_recoder.cpp	/^video_recoder::~video_recoder()$/;"	f	class:autocar::vision_mul::video_recoder
